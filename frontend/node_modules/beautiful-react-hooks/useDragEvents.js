/* beautiful-react-hooks version: 0.31.1 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var react = require('react');
var hasOwnProperty = require('./utils/hasOwnProperty.js');
var createCbSetterErrorProxy = require('./utils/createCbSetterErrorProxy.js');
var createHandlerSetter = require('./utils/createHandlerSetter.js');

var assignDragEventOnMount = function assignDragEventOnMount(targetRef, handlerRef, eventName) {
  react.useEffect(function () {
    var cb = function cb(dragEvent) {
      if (handlerRef.current) {
        handlerRef.current(dragEvent);
      }
    };

    if (targetRef.current) {
      targetRef.current.addEventListener(eventName, cb);
    }

    return function () {
      if (targetRef.current) {
        targetRef.current.removeEventListener(eventName, cb);
      }
    };
  }, []);
};

var useDragEvents = function useDragEvents(targetRef) {
  var setDraggable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  var _createHandlerSetter = createHandlerSetter['default'](),
      _createHandlerSetter2 = _rollupPluginBabelHelpers.slicedToArray(_createHandlerSetter, 2),
      onDrag = _createHandlerSetter2[0],
      setOnDrag = _createHandlerSetter2[1];

  var _createHandlerSetter3 = createHandlerSetter['default'](),
      _createHandlerSetter4 = _rollupPluginBabelHelpers.slicedToArray(_createHandlerSetter3, 2),
      onDrop = _createHandlerSetter4[0],
      setOnDrop = _createHandlerSetter4[1];

  var _createHandlerSetter5 = createHandlerSetter['default'](),
      _createHandlerSetter6 = _rollupPluginBabelHelpers.slicedToArray(_createHandlerSetter5, 2),
      onDragEnter = _createHandlerSetter6[0],
      setOnDragEnter = _createHandlerSetter6[1];

  var _createHandlerSetter7 = createHandlerSetter['default'](),
      _createHandlerSetter8 = _rollupPluginBabelHelpers.slicedToArray(_createHandlerSetter7, 2),
      onDragEnd = _createHandlerSetter8[0],
      setOnDragEnd = _createHandlerSetter8[1];

  var _createHandlerSetter9 = createHandlerSetter['default'](),
      _createHandlerSetter10 = _rollupPluginBabelHelpers.slicedToArray(_createHandlerSetter9, 2),
      onDragExit = _createHandlerSetter10[0],
      setOnDragExit = _createHandlerSetter10[1];

  var _createHandlerSetter11 = createHandlerSetter['default'](),
      _createHandlerSetter12 = _rollupPluginBabelHelpers.slicedToArray(_createHandlerSetter11, 2),
      onDragLeave = _createHandlerSetter12[0],
      setOnDragLeave = _createHandlerSetter12[1];

  var _createHandlerSetter13 = createHandlerSetter['default'](),
      _createHandlerSetter14 = _rollupPluginBabelHelpers.slicedToArray(_createHandlerSetter13, 2),
      onDragOver = _createHandlerSetter14[0],
      setOnDragOver = _createHandlerSetter14[1];

  var _createHandlerSetter15 = createHandlerSetter['default'](),
      _createHandlerSetter16 = _rollupPluginBabelHelpers.slicedToArray(_createHandlerSetter15, 2),
      onDragStart = _createHandlerSetter16[0],
      setOnDragStart = _createHandlerSetter16[1];

  if (targetRef !== null && !hasOwnProperty['default'](targetRef, 'current')) {
    return createCbSetterErrorProxy['default']('Unable to assign any drag event to the given ref');
  }

  react.useEffect(function () {
    if (setDraggable && targetRef.current && !targetRef.current.hasAttribute('draggable')) {
      targetRef.current.setAttribute('draggable', true);
    }
  }, []);
  assignDragEventOnMount(targetRef, onDrag, 'drag');
  assignDragEventOnMount(targetRef, onDrop, 'drop');
  assignDragEventOnMount(targetRef, onDragEnter, 'dragenter');
  assignDragEventOnMount(targetRef, onDragEnd, 'dragend');
  assignDragEventOnMount(targetRef, onDragExit, 'dragexit');
  assignDragEventOnMount(targetRef, onDragLeave, 'dragleave');
  assignDragEventOnMount(targetRef, onDragOver, 'dragover');
  assignDragEventOnMount(targetRef, onDragStart, 'dragstart');
  return Object.freeze({
    onDrag: setOnDrag,
    onDrop: setOnDrop,
    onDragEnter: setOnDragEnter,
    onDragEnd: setOnDragEnd,
    onDragExit: setOnDragExit,
    onDragLeave: setOnDragLeave,
    onDragOver: setOnDragOver,
    onDragStart: setOnDragStart
  });
};

exports.default = useDragEvents;
