/* beautiful-react-hooks version: 0.31.1 */
import { objectSpread2 as _objectSpread2, slicedToArray as _slicedToArray } from './_virtual/_rollupPluginBabelHelpers.js';
import { useRef, useState, useCallback, useEffect } from 'react';

var defaultOptions = {
  cancelOnUnmount: true
};

var useTimeout = function useTimeout(fn, milliseconds) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOptions;

  var opts = _objectSpread2(_objectSpread2({}, defaultOptions), options || {});

  var timeout = useRef();
  var callback = useRef(fn);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isCleared = _useState2[0],
      setIsCleared = _useState2[1];

  var clear = useCallback(function () {
    if (timeout.current) {
      clearTimeout(timeout.current);
      setIsCleared(true);
    }
  }, []);
  useEffect(function () {
    if (typeof fn === 'function') {
      callback.current = fn;
    }
  }, [fn]);
  useEffect(function () {
    if (typeof milliseconds === 'number') {
      timeout.current = setTimeout(function () {
        callback.current();
      }, milliseconds);
    }

    return clear;
  }, [milliseconds]);
  useEffect(function () {
    return function () {
      if (opts.cancelOnUnmount) {
        clear();
      }
    };
  }, []);
  return [isCleared, clear];
};

export default useTimeout;
