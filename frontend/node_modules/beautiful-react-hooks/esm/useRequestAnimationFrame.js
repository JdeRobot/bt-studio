/* beautiful-react-hooks version: 0.31.1 */
import { objectSpread2 as _objectSpread2, slicedToArray as _slicedToArray } from './_virtual/_rollupPluginBabelHelpers.js';
import { useRef, useCallback } from 'react';
import createHandlerSetter from './utils/createHandlerSetter.js';
import isClient from './utils/isClient.js';
import isApiSupported from './utils/isAPISupported.js';
import createCbSetterErrorProxy from './utils/createCbSetterErrorProxy.js';

var defaultOptions = {
  increment: 1,
  startAt: 0,
  finishAt: 100
};
var errorMessage = 'requestAnimationFrame is not supported, this could happen both because ' + 'window.requestAnimationFrame is not supported by your current browser version or you\'re using the ' + 'useRequestAnimationFrame hook whilst server side rendering.';

var useRequestAnimationFrame = function useRequestAnimationFrame(func) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;

  if (!isClient || !isApiSupported('requestAnimationFrame')) {
    console.warn(errorMessage);
    return createCbSetterErrorProxy(errorMessage);
  }

  var opts = _objectSpread2(_objectSpread2({}, defaultOptions), options);

  var progress = useRef(opts.startAt);

  var _createHandlerSetter = createHandlerSetter(),
      _createHandlerSetter2 = _slicedToArray(_createHandlerSetter, 2),
      onFinish = _createHandlerSetter2[0],
      setOnFinish = _createHandlerSetter2[1];

  var next = function next() {
    return window.requestAnimationFrame(step);
  };

  var step = useCallback(function () {
    if (progress.current <= opts.finishAt || opts.finishAt === -1) {
      func(progress.current, next);
      progress.current += opts.increment;
    } else if (onFinish.current) {
      onFinish.current();
    }
  }, [func, opts.finishAt, opts.increment, progress.current, onFinish.current]);

  if (progress.current <= opts.startAt) {
    next();
  }

  return setOnFinish;
};

export default useRequestAnimationFrame;
