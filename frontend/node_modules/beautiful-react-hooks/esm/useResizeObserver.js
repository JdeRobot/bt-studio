/* beautiful-react-hooks version: 0.31.1 */
import { slicedToArray as _slicedToArray } from './_virtual/_rollupPluginBabelHelpers.js';
import { useRef, useState, useEffect } from 'react';
import debounce from 'lodash.debounce';
import isApiSupported from './utils/isAPISupported.js';
import isClient from './utils/isClient.js';

var errorMessage = 'ResizeObserver is not supported, this could happen both because window.ResizeObserver is not supported by your current browser or you\'re using the useResizeObserver hook whilst server side rendering.';

var useResizeObserver = function useResizeObserver(elementRef) {
  var debounceTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  var isSupported = isApiSupported('ResizeObserver');
  var observerRef = useRef(null);

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      DOMRect = _useState2[0],
      setDOMRect = _useState2[1];

  if (isClient && !isSupported) {
    console.warn(errorMessage);
  }

  useEffect(function () {
    if (isSupported) {
      var fn = debounce(function (entries) {
        var _entries$0$contentRec = entries[0].contentRect,
            bottom = _entries$0$contentRec.bottom,
            height = _entries$0$contentRec.height,
            left = _entries$0$contentRec.left,
            right = _entries$0$contentRec.right,
            top = _entries$0$contentRec.top,
            width = _entries$0$contentRec.width;
        setDOMRect({
          bottom: bottom,
          height: height,
          left: left,
          right: right,
          top: top,
          width: width
        });
      }, debounceTimeout);
      observerRef.current = new ResizeObserver(fn);
    }

    return function () {
      if (isSupported && observerRef.current && elementRef.current) {
        observerRef.current.unobserve(elementRef.current);
      }
    };
  }, []);
  useEffect(function () {
    if (isSupported && elementRef.current) {
      observerRef.current.observe(elementRef.current);
    }
  }, [elementRef.current]);
  return DOMRect;
};

export default useResizeObserver;
