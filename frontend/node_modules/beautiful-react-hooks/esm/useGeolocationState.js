/* beautiful-react-hooks version: 0.31.1 */
import { slicedToArray as _slicedToArray } from './_virtual/_rollupPluginBabelHelpers.js';
import { useState, useCallback, useEffect } from 'react';
import useGeolocationEvents from './useGeolocationEvents.js';
import geolocationStandardOptions from './utils/geolocationStandardOptions.js';
import makePositionObj from './utils/makePositionObject.js';
import isSamePosition from './utils/isSamePosition.js';

var useGeolocationState = function useGeolocationState() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : geolocationStandardOptions;

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      position = _useState2[0],
      setPosition = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isRetrieving = _useState4[0],
      setRetrieving = _useState4[1];

  var _useGeolocationEvents = useGeolocationEvents(options),
      isSupported = _useGeolocationEvents.isSupported,
      onChange = _useGeolocationEvents.onChange;

  var savePosition = useCallback(function () {
    if (position === null) {
      setRetrieving(true);
      navigator.geolocation.getCurrentPosition(function (nextPosition) {
        if (!isSamePosition(position, nextPosition)) {
          setPosition(makePositionObj(nextPosition));
          setRetrieving(false);
        }
      });
    }
  }, [position]);
  useEffect(savePosition, [position]);
  onChange(savePosition);
  return Object.freeze({
    isSupported: isSupported,
    isRetrieving: isRetrieving,
    position: position
  });
};

export default useGeolocationState;
