/* beautiful-react-hooks version: 0.31.1 */
import { slicedToArray as _slicedToArray } from './_virtual/_rollupPluginBabelHelpers.js';
import { useState, useLayoutEffect } from 'react';
import isClient from './utils/isClient.js';
import isApiSupported from './utils/isAPISupported.js';

var defaultOptions = {
  root: undefined,
  rootMargin: '0px',
  threshold: 0
};
var errorMessage = 'IntersectionObserver is not supported, this could happen both because' + ' window.IntersectionObserver is not supported by' + ' your current browser or you\'re using the useViewportSpy hook whilst server side rendering.';

var useViewportSpy = function useViewportSpy(elementRef) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;

  if (!isClient || !isApiSupported('IntersectionObserver')) {
    console.warn(errorMessage);
    return null;
  }

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      isVisible = _useState2[0],
      setIsVisible = _useState2[1];

  useLayoutEffect(function () {
    var observer = new window.IntersectionObserver(function (entries) {
      return entries.forEach(function (item) {
        var nextValue = item.isIntersecting;
        setIsVisible(nextValue);
      });
    }, options);
    observer.observe(elementRef.current);
    return function () {
      observer.disconnect(elementRef.current);
    };
  }, [elementRef]);
  return isVisible;
};

export default useViewportSpy;
