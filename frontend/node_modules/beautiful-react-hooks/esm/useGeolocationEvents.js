/* beautiful-react-hooks version: 0.31.1 */
import { slicedToArray as _slicedToArray } from './_virtual/_rollupPluginBabelHelpers.js';
import { useRef, useEffect } from 'react';
import createHandlerSetter from './utils/createHandlerSetter.js';
import createCbSetterErrorProxy from './utils/createCbSetterErrorProxy.js';
import geolocationStandardOptions from './utils/geolocationStandardOptions.js';

var useGeolocationEvents = function useGeolocationEvents() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : geolocationStandardOptions;
  var watchId = useRef();

  var _createHandlerSetter = createHandlerSetter(),
      _createHandlerSetter2 = _slicedToArray(_createHandlerSetter, 2),
      onChangeRef = _createHandlerSetter2[0],
      setOnChangeRef = _createHandlerSetter2[1];

  var _createHandlerSetter3 = createHandlerSetter(),
      _createHandlerSetter4 = _slicedToArray(_createHandlerSetter3, 2),
      onErrorRef = _createHandlerSetter4[0],
      setOnErrorRef = _createHandlerSetter4[1];

  var isSupported = typeof window !== 'undefined' && 'geolocation' in window.navigator;
  useEffect(function () {
    var onSuccess = function onSuccess(successEvent) {
      if (onChangeRef.current) {
        onChangeRef.current(successEvent);
      }
    };

    var onError = function onError(err) {
      if (onErrorRef.current) {
        onErrorRef.current(err);
      }
    };

    if (isSupported) {
      watchId.current = window.navigator.geolocation.watchPosition(onSuccess, onError, options);
    }

    return function () {
      if (isSupported) {
        window.navigator.geolocation.clearWatch(watchId.current);
      }
    };
  }, []);
  return !isSupported ? createCbSetterErrorProxy('The Geolocation API is not supported') : Object.freeze({
    isSupported: isSupported,
    onChange: setOnChangeRef,
    onError: setOnErrorRef
  });
};

export default useGeolocationEvents;
