/* beautiful-react-hooks version: 0.31.1 */
import { slicedToArray as _slicedToArray } from './_virtual/_rollupPluginBabelHelpers.js';
import { useEffect } from 'react';
import createHandlerSetter from './utils/createHandlerSetter.js';
import createCbSetterErrorProxy from './utils/createCbSetterErrorProxy.js';
import hasOwnProperty from './utils/hasOwnProperty.js';

var assignMouseEventOnMount = function assignMouseEventOnMount(targetRef, handlerRef, eventName) {
  useEffect(function () {
    var cb = function cb(mouseEvent) {
      if (handlerRef.current) {
        handlerRef.current(mouseEvent);
      }
    };

    var target;

    if (targetRef !== null && !!targetRef.current) {
      target = targetRef.current;
    }

    if (targetRef === null) {
      target = document;
    }

    if (target && target.addEventListener) {
      target.addEventListener(eventName, cb);
    }

    return function () {
      if (target && target.removeEventListener) {
        target.removeEventListener(eventName, cb);
      }
    };
  }, []);
};

var useMouseEvents = function useMouseEvents() {
  var targetRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  var _createHandlerSetter = createHandlerSetter(),
      _createHandlerSetter2 = _slicedToArray(_createHandlerSetter, 2),
      onMouseDownHandler = _createHandlerSetter2[0],
      setOnMouseDown = _createHandlerSetter2[1];

  var _createHandlerSetter3 = createHandlerSetter(),
      _createHandlerSetter4 = _slicedToArray(_createHandlerSetter3, 2),
      onMouseEnterHandler = _createHandlerSetter4[0],
      setOnMouseEnter = _createHandlerSetter4[1];

  var _createHandlerSetter5 = createHandlerSetter(),
      _createHandlerSetter6 = _slicedToArray(_createHandlerSetter5, 2),
      onMouseLeaveHandler = _createHandlerSetter6[0],
      setOnMouseLeave = _createHandlerSetter6[1];

  var _createHandlerSetter7 = createHandlerSetter(),
      _createHandlerSetter8 = _slicedToArray(_createHandlerSetter7, 2),
      onMouseMoveHandler = _createHandlerSetter8[0],
      setOnMouseMove = _createHandlerSetter8[1];

  var _createHandlerSetter9 = createHandlerSetter(),
      _createHandlerSetter10 = _slicedToArray(_createHandlerSetter9, 2),
      onMouseOutHandler = _createHandlerSetter10[0],
      setOnMouseOut = _createHandlerSetter10[1];

  var _createHandlerSetter11 = createHandlerSetter(),
      _createHandlerSetter12 = _slicedToArray(_createHandlerSetter11, 2),
      onMouseOverHandler = _createHandlerSetter12[0],
      setOnMouseOver = _createHandlerSetter12[1];

  var _createHandlerSetter13 = createHandlerSetter(),
      _createHandlerSetter14 = _slicedToArray(_createHandlerSetter13, 2),
      onMouseUpHandler = _createHandlerSetter14[0],
      setOnMouseUp = _createHandlerSetter14[1];

  if (targetRef !== null && !hasOwnProperty(targetRef, 'current')) {
    return createCbSetterErrorProxy('Unable to assign any mouse event to the given ref');
  }

  assignMouseEventOnMount(targetRef, onMouseDownHandler, 'mousedown');
  assignMouseEventOnMount(targetRef, onMouseEnterHandler, 'mouseenter');
  assignMouseEventOnMount(targetRef, onMouseLeaveHandler, 'mouseleave');
  assignMouseEventOnMount(targetRef, onMouseMoveHandler, 'mousemove');
  assignMouseEventOnMount(targetRef, onMouseOutHandler, 'mouseout');
  assignMouseEventOnMount(targetRef, onMouseOverHandler, 'mouseover');
  assignMouseEventOnMount(targetRef, onMouseUpHandler, 'mouseup');
  return Object.freeze({
    onMouseDown: setOnMouseDown,
    onMouseEnter: setOnMouseEnter,
    onMouseLeave: setOnMouseLeave,
    onMouseMove: setOnMouseMove,
    onMouseOut: setOnMouseOut,
    onMouseOver: setOnMouseOver,
    onMouseUp: setOnMouseUp
  });
};

export default useMouseEvents;
