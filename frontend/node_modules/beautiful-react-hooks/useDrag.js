/* beautiful-react-hooks version: 0.31.1 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var react = require('react');
var useDragEvents = require('./useDragEvents.js');

var defaultOptions = {
  dragImage: null,
  dragImageXOffset: 0,
  dragImageYOffset: 0,
  transfer: null,
  transferFormat: 'text'
};

var useDrag = function useDrag(targetRef) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;

  var _useDragEvents = useDragEvents['default'](targetRef, true),
      onDragStart = _useDragEvents.onDragStart,
      onDragEnd = _useDragEvents.onDragEnd;

  var _useState = react.useState(false),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      isDragging = _useState2[0],
      setIsDragging = _useState2[1];

  var opts = _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, defaultOptions), options || {});

  onDragStart(function (event) {
    setIsDragging(true);

    if (opts.dragImage) {
      var img = new Image();
      img.src = opts.dragImage;
      event.dataTransfer.setDragImage(img, opts.dragImageXOffset, opts.dragImageYOffset);
    }

    if (opts.transfer) {
      var data = _rollupPluginBabelHelpers['typeof'](opts.transfer) === 'object' ? JSON.stringify(opts.transfer) : "".concat(opts.transfer);
      event.dataTransfer.setData(opts.transferFormat, data);
    }
  });
  onDragEnd(function () {
    return setIsDragging(false);
  });
  return isDragging;
};

exports.default = useDrag;
