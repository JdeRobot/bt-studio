/* beautiful-react-hooks version: 0.31.1 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var react = require('react');
var safelyParseJson = require('./utils/safelyParseJson.js');
var isClient = require('./utils/isClient.js');
var isAPISupported = require('./utils/isAPISupported.js');
var isDevelopment = require('./utils/isDevelopment.js');

var useStorage = function useStorage(type) {
  var storageName = "".concat(type, "Storage");

  if (isClient['default'] && !isAPISupported['default'](storageName)) {
    console.warn("".concat(storageName, " is not supported"));
  }

  return function (storageKey, defaultValue) {
    if (!isClient['default']) {
      if (isDevelopment['default']) {
        console.warn("Please be aware that ".concat(storageName, " could not be available during SSR"));
      }

      return [JSON.stringify(defaultValue), function () {
        return undefined;
      }];
    }

    var storage = window[storageName];

    var _useState = react.useState(safelyParseJson['default'](storage.getItem(storageKey) || JSON.stringify(defaultValue))),
        _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
        value = _useState2[0],
        setValue = _useState2[1];

    react.useEffect(function () {
      storage.setItem(storageKey, JSON.stringify(value));
    }, [storageKey, value]);
    return [value, setValue];
  };
};

exports.default = useStorage;
