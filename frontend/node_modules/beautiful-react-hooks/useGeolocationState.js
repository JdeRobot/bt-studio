/* beautiful-react-hooks version: 0.31.1 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var react = require('react');
var useGeolocationEvents = require('./useGeolocationEvents.js');
var geolocationStandardOptions = require('./utils/geolocationStandardOptions.js');
var makePositionObject = require('./utils/makePositionObject.js');
var isSamePosition = require('./utils/isSamePosition.js');

var useGeolocationState = function useGeolocationState() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : geolocationStandardOptions['default'];

  var _useState = react.useState(null),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      position = _useState2[0],
      setPosition = _useState2[1];

  var _useState3 = react.useState(false),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      isRetrieving = _useState4[0],
      setRetrieving = _useState4[1];

  var _useGeolocationEvents = useGeolocationEvents['default'](options),
      isSupported = _useGeolocationEvents.isSupported,
      onChange = _useGeolocationEvents.onChange;

  var savePosition = react.useCallback(function () {
    if (position === null) {
      setRetrieving(true);
      navigator.geolocation.getCurrentPosition(function (nextPosition) {
        if (!isSamePosition['default'](position, nextPosition)) {
          setPosition(makePositionObject['default'](nextPosition));
          setRetrieving(false);
        }
      });
    }
  }, [position]);
  react.useEffect(savePosition, [position]);
  onChange(savePosition);
  return Object.freeze({
    isSupported: isSupported,
    isRetrieving: isRetrieving,
    position: position
  });
};

exports.default = useGeolocationState;
