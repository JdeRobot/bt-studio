/* beautiful-react-hooks version: 0.31.1 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var react = require('react');
var usePreviousValue = require('./usePreviousValue.js');

var defaultOptions = {
  cancelOnUnmount: true,
  cancelOnConditionChange: true
};

var useConditionalTimeout = function useConditionalTimeout(fn, milliseconds, condition) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultOptions;

  var opts = _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, defaultOptions), options || {});

  var timeout = react.useRef();
  var callback = react.useRef(fn);
  var prevCondition = usePreviousValue['default'](condition);

  var _useState = react.useState(false),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      isCleared = _useState2[0],
      setIsCleared = _useState2[1];

  var clear = react.useCallback(function () {
    if (timeout.current) {
      clearTimeout(timeout.current);
      setIsCleared(true);
    }
  }, []);
  react.useEffect(function () {
    if (typeof fn === 'function') {
      callback.current = fn;
    }
  }, [fn]);
  react.useEffect(function () {
    if (condition && typeof milliseconds === 'number') {
      timeout.current = setTimeout(function () {
        callback.current();
      }, milliseconds);
    }

    return clear;
  }, [condition, milliseconds]);
  react.useEffect(function () {
    if (prevCondition && condition !== prevCondition && opts.cancelOnConditionChange) {
      clear();
    }
  }, [condition, options]);
  react.useEffect(function () {
    return function () {
      if (opts.cancelOnUnmount) {
        clear();
      }
    };
  }, []);
  return [isCleared, clear];
};

exports.default = useConditionalTimeout;
