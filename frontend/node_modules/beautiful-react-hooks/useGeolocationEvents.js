/* beautiful-react-hooks version: 0.31.1 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var react = require('react');
var createHandlerSetter = require('./utils/createHandlerSetter.js');
var createCbSetterErrorProxy = require('./utils/createCbSetterErrorProxy.js');
var geolocationStandardOptions = require('./utils/geolocationStandardOptions.js');

var useGeolocationEvents = function useGeolocationEvents() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : geolocationStandardOptions['default'];
  var watchId = react.useRef();

  var _createHandlerSetter = createHandlerSetter['default'](),
      _createHandlerSetter2 = _rollupPluginBabelHelpers.slicedToArray(_createHandlerSetter, 2),
      onChangeRef = _createHandlerSetter2[0],
      setOnChangeRef = _createHandlerSetter2[1];

  var _createHandlerSetter3 = createHandlerSetter['default'](),
      _createHandlerSetter4 = _rollupPluginBabelHelpers.slicedToArray(_createHandlerSetter3, 2),
      onErrorRef = _createHandlerSetter4[0],
      setOnErrorRef = _createHandlerSetter4[1];

  var isSupported = typeof window !== 'undefined' && 'geolocation' in window.navigator;
  react.useEffect(function () {
    var onSuccess = function onSuccess(successEvent) {
      if (onChangeRef.current) {
        onChangeRef.current(successEvent);
      }
    };

    var onError = function onError(err) {
      if (onErrorRef.current) {
        onErrorRef.current(err);
      }
    };

    if (isSupported) {
      watchId.current = window.navigator.geolocation.watchPosition(onSuccess, onError, options);
    }

    return function () {
      if (isSupported) {
        window.navigator.geolocation.clearWatch(watchId.current);
      }
    };
  }, []);
  return !isSupported ? createCbSetterErrorProxy['default']('The Geolocation API is not supported') : Object.freeze({
    isSupported: isSupported,
    onChange: setOnChangeRef,
    onError: setOnErrorRef
  });
};

exports.default = useGeolocationEvents;
