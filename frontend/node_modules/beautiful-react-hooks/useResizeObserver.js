/* beautiful-react-hooks version: 0.31.1 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var react = require('react');
var debounce = require('lodash.debounce');
var isAPISupported = require('./utils/isAPISupported.js');
var isClient = require('./utils/isClient.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var debounce__default = /*#__PURE__*/_interopDefaultLegacy(debounce);

var errorMessage = 'ResizeObserver is not supported, this could happen both because window.ResizeObserver is not supported by your current browser or you\'re using the useResizeObserver hook whilst server side rendering.';

var useResizeObserver = function useResizeObserver(elementRef) {
  var debounceTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  var isSupported = isAPISupported['default']('ResizeObserver');
  var observerRef = react.useRef(null);

  var _useState = react.useState(),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      DOMRect = _useState2[0],
      setDOMRect = _useState2[1];

  if (isClient['default'] && !isSupported) {
    console.warn(errorMessage);
  }

  react.useEffect(function () {
    if (isSupported) {
      var fn = debounce__default['default'](function (entries) {
        var _entries$0$contentRec = entries[0].contentRect,
            bottom = _entries$0$contentRec.bottom,
            height = _entries$0$contentRec.height,
            left = _entries$0$contentRec.left,
            right = _entries$0$contentRec.right,
            top = _entries$0$contentRec.top,
            width = _entries$0$contentRec.width;
        setDOMRect({
          bottom: bottom,
          height: height,
          left: left,
          right: right,
          top: top,
          width: width
        });
      }, debounceTimeout);
      observerRef.current = new ResizeObserver(fn);
    }

    return function () {
      if (isSupported && observerRef.current && elementRef.current) {
        observerRef.current.unobserve(elementRef.current);
      }
    };
  }, []);
  react.useEffect(function () {
    if (isSupported && elementRef.current) {
      observerRef.current.observe(elementRef.current);
    }
  }, [elementRef.current]);
  return DOMRect;
};

exports.default = useResizeObserver;
