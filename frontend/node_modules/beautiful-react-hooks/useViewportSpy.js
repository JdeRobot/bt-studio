/* beautiful-react-hooks version: 0.31.1 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var react = require('react');
var isClient = require('./utils/isClient.js');
var isAPISupported = require('./utils/isAPISupported.js');

var defaultOptions = {
  root: undefined,
  rootMargin: '0px',
  threshold: 0
};
var errorMessage = 'IntersectionObserver is not supported, this could happen both because' + ' window.IntersectionObserver is not supported by' + ' your current browser or you\'re using the useViewportSpy hook whilst server side rendering.';

var useViewportSpy = function useViewportSpy(elementRef) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;

  if (!isClient['default'] || !isAPISupported['default']('IntersectionObserver')) {
    console.warn(errorMessage);
    return null;
  }

  var _useState = react.useState(),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      isVisible = _useState2[0],
      setIsVisible = _useState2[1];

  react.useLayoutEffect(function () {
    var observer = new window.IntersectionObserver(function (entries) {
      return entries.forEach(function (item) {
        var nextValue = item.isIntersecting;
        setIsVisible(nextValue);
      });
    }, options);
    observer.observe(elementRef.current);
    return function () {
      observer.disconnect(elementRef.current);
    };
  }, [elementRef]);
  return isVisible;
};

exports.default = useViewportSpy;
