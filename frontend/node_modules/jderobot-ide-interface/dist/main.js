/*! For license information please see main.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("react"),require("react-dom"));else if("function"==typeof define&&define.amd)define(["react","react-dom"],t);else{var n="object"==typeof exports?t(require("react"),require("react-dom")):t(e.React,e.ReactDOM);for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(this,(e,t)=>(()=>{var n={7:e=>{"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise(function(n,r){function i(n){e.removeListener(t,o),r(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),n([].slice.call(arguments))}g(e,t,o,{once:!0}),"error"!==t&&function(e,t){"function"==typeof e.on&&g(e,"error",t,{once:!0})}(e,i)})},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var a=10;function s(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function c(e,t,n,r){var i,o,a,c;if(s(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),a=o[t]),void 0===a)a=o[t]=n,++e._eventsCount;else if("function"==typeof a?a=o[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(i=l(e))>0&&a.length>i&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=a.length,c=u,console&&console.warn&&console.warn(c)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function f(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=u.bind(r);return i.listener=n,r.wrapFn=i,i}function d(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):h(i,i.length)}function p(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function h(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function g(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,function i(o){r.once&&e.removeEventListener(t,i),n(o)})}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return l(this)},o.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var l=o[e];if(void 0===l)return!1;if("function"==typeof l)r(l,this,t);else{var c=l.length,u=h(l,c);for(n=0;n<c;++n)r(u[n],this,t)}return!0},o.prototype.addListener=function(e,t){return c(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return c(this,e,t,!0)},o.prototype.once=function(e,t){return s(t),this.on(e,f(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return s(t),this.prependListener(e,f(this,e,t)),this},o.prototype.removeListener=function(e,t){var n,r,i,o,a;if(s(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0===--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){a=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0===--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},o.prototype.listeners=function(e){return d(this,e,!0)},o.prototype.rawListeners=function(e){return d(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},12:t=>{"use strict";t.exports=e},20:(e,t,n)=>{"use strict";var r=n(12),i=Symbol.for("react.element"),o=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,s=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,o={},c=null,u=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(u=t.ref),t)a.call(t,r)&&!l.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===o[r]&&(o[r]=t[r]);return{$$typeof:i,type:e,key:c,ref:u,props:o,_owner:s.current}}t.Fragment=o,t.jsx=c,t.jsxs=c},33:e=>{"use strict";e.exports=t},198:function(e,t,n){"use strict";var r,i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},i.apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(r=function(e){return r=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},r(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=r(e),i=0;i<n.length;i++)"default"!==n[i]&&o(t,e,n[i]);return a(t,e),t}),l=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n};Object.defineProperty(t,"__esModule",{value:!0});var c=s(n(12)),u=n(665),f=(0,n(489).createAnimation)("BounceLoader","0% {transform: scale(0)} 50% {transform: scale(1.0)} 100% {transform: scale(0)}","bounce");t.default=function(e){var t=e.loading,n=void 0===t||t,r=e.color,o=void 0===r?"#000000":r,a=e.speedMultiplier,s=void 0===a?1:a,d=e.cssOverride,p=void 0===d?{}:d,h=e.size,g=void 0===h?60:h,v=l(e,["loading","color","speedMultiplier","cssOverride","size"]),m=function(e){var t=1===e?"".concat(1/s,"s"):"0s";return{position:"absolute",height:(0,u.cssValue)(g),width:(0,u.cssValue)(g),backgroundColor:o,borderRadius:"100%",opacity:.6,top:0,left:0,animationFillMode:"both",animation:"".concat(f," ").concat(2.1/s,"s ").concat(t," infinite ease-in-out")}},b=i({display:"inherit",position:"relative",width:(0,u.cssValue)(g),height:(0,u.cssValue)(g)},p);return n?c.createElement("span",i({style:b},v),c.createElement("span",{style:m(1)}),c.createElement("span",{style:m(2)})):null}},489:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createAnimation=void 0,t.createAnimation=function(e,t,n){var r="react-spinners-".concat(e,"-").concat(n);if("undefined"==typeof window||!window.document)return r;var i=document.createElement("style");document.head.appendChild(i);var o=i.sheet,a="\n    @keyframes ".concat(r," {\n      ").concat(t,"\n    }\n  ");return o&&o.insertRule(a,0),r}},543:function(e,t,n){var r;e=n.nmd(e),function(){var i,o="Expected a function",a="__lodash_hash_undefined__",s="__lodash_placeholder__",l=32,c=128,u=1/0,f=9007199254740991,d=NaN,p=4294967295,h=[["ary",c],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",l],["partialRight",64],["rearg",256]],g="[object Arguments]",v="[object Array]",m="[object Boolean]",b="[object Date]",y="[object Error]",w="[object Function]",_="[object GeneratorFunction]",x="[object Map]",k="[object Number]",j="[object Object]",C="[object Promise]",S="[object RegExp]",z="[object Set]",E="[object String]",O="[object Symbol]",A="[object WeakMap]",R="[object ArrayBuffer]",I="[object DataView]",P="[object Float32Array]",T="[object Float64Array]",B="[object Int8Array]",L="[object Int16Array]",F="[object Int32Array]",N="[object Uint8Array]",M="[object Uint8ClampedArray]",D="[object Uint16Array]",W="[object Uint32Array]",U=/\b__p \+= '';/g,$=/\b(__p \+=) '' \+/g,H=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Z=/&(?:amp|lt|gt|quot|#39);/g,G=/[&<>"']/g,V=RegExp(Z.source),q=RegExp(G.source),K=/<%-([\s\S]+?)%>/g,Y=/<%([\s\S]+?)%>/g,X=/<%=([\s\S]+?)%>/g,J=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Q=/^\w*$/,ee=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,te=/[\\^$.*+?()[\]{}|]/g,ne=RegExp(te.source),re=/^\s+/,ie=/\s/,oe=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ae=/\{\n\/\* \[wrapped with (.+)\] \*/,se=/,? & /,le=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ce=/[()=,{}\[\]\/\s]/,ue=/\\(\\)?/g,fe=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,de=/\w*$/,pe=/^[-+]0x[0-9a-f]+$/i,he=/^0b[01]+$/i,ge=/^\[object .+?Constructor\]$/,ve=/^0o[0-7]+$/i,me=/^(?:0|[1-9]\d*)$/,be=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,ye=/($^)/,we=/['\n\r\u2028\u2029\\]/g,_e="\\ud800-\\udfff",xe="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",ke="\\u2700-\\u27bf",je="a-z\\xdf-\\xf6\\xf8-\\xff",Ce="A-Z\\xc0-\\xd6\\xd8-\\xde",Se="\\ufe0e\\ufe0f",ze="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Ee="["+_e+"]",Oe="["+ze+"]",Ae="["+xe+"]",Re="\\d+",Ie="["+ke+"]",Pe="["+je+"]",Te="[^"+_e+ze+Re+ke+je+Ce+"]",Be="\\ud83c[\\udffb-\\udfff]",Le="[^"+_e+"]",Fe="(?:\\ud83c[\\udde6-\\uddff]){2}",Ne="[\\ud800-\\udbff][\\udc00-\\udfff]",Me="["+Ce+"]",De="\\u200d",We="(?:"+Pe+"|"+Te+")",Ue="(?:"+Me+"|"+Te+")",$e="(?:['’](?:d|ll|m|re|s|t|ve))?",He="(?:['’](?:D|LL|M|RE|S|T|VE))?",Ze="(?:"+Ae+"|"+Be+")?",Ge="["+Se+"]?",Ve=Ge+Ze+"(?:"+De+"(?:"+[Le,Fe,Ne].join("|")+")"+Ge+Ze+")*",qe="(?:"+[Ie,Fe,Ne].join("|")+")"+Ve,Ke="(?:"+[Le+Ae+"?",Ae,Fe,Ne,Ee].join("|")+")",Ye=RegExp("['’]","g"),Xe=RegExp(Ae,"g"),Je=RegExp(Be+"(?="+Be+")|"+Ke+Ve,"g"),Qe=RegExp([Me+"?"+Pe+"+"+$e+"(?="+[Oe,Me,"$"].join("|")+")",Ue+"+"+He+"(?="+[Oe,Me+We,"$"].join("|")+")",Me+"?"+We+"+"+$e,Me+"+"+He,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Re,qe].join("|"),"g"),et=RegExp("["+De+_e+xe+Se+"]"),tt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,nt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],rt=-1,it={};it[P]=it[T]=it[B]=it[L]=it[F]=it[N]=it[M]=it[D]=it[W]=!0,it[g]=it[v]=it[R]=it[m]=it[I]=it[b]=it[y]=it[w]=it[x]=it[k]=it[j]=it[S]=it[z]=it[E]=it[A]=!1;var ot={};ot[g]=ot[v]=ot[R]=ot[I]=ot[m]=ot[b]=ot[P]=ot[T]=ot[B]=ot[L]=ot[F]=ot[x]=ot[k]=ot[j]=ot[S]=ot[z]=ot[E]=ot[O]=ot[N]=ot[M]=ot[D]=ot[W]=!0,ot[y]=ot[w]=ot[A]=!1;var at={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},st=parseFloat,lt=parseInt,ct="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,ut="object"==typeof self&&self&&self.Object===Object&&self,ft=ct||ut||Function("return this")(),dt=t&&!t.nodeType&&t,pt=dt&&e&&!e.nodeType&&e,ht=pt&&pt.exports===dt,gt=ht&&ct.process,vt=function(){try{return pt&&pt.require&&pt.require("util").types||gt&&gt.binding&&gt.binding("util")}catch(e){}}(),mt=vt&&vt.isArrayBuffer,bt=vt&&vt.isDate,yt=vt&&vt.isMap,wt=vt&&vt.isRegExp,_t=vt&&vt.isSet,xt=vt&&vt.isTypedArray;function kt(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function jt(e,t,n,r){for(var i=-1,o=null==e?0:e.length;++i<o;){var a=e[i];t(r,a,n(a),e)}return r}function Ct(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function St(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function zt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function Et(e,t){for(var n=-1,r=null==e?0:e.length,i=0,o=[];++n<r;){var a=e[n];t(a,n,e)&&(o[i++]=a)}return o}function Ot(e,t){return!(null==e||!e.length)&&Mt(e,t,0)>-1}function At(e,t,n){for(var r=-1,i=null==e?0:e.length;++r<i;)if(n(t,e[r]))return!0;return!1}function Rt(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}function It(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}function Pt(e,t,n,r){var i=-1,o=null==e?0:e.length;for(r&&o&&(n=e[++i]);++i<o;)n=t(n,e[i],i,e);return n}function Tt(e,t,n,r){var i=null==e?0:e.length;for(r&&i&&(n=e[--i]);i--;)n=t(n,e[i],i,e);return n}function Bt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var Lt=$t("length");function Ft(e,t,n){var r;return n(e,function(e,n,i){if(t(e,n,i))return r=n,!1}),r}function Nt(e,t,n,r){for(var i=e.length,o=n+(r?1:-1);r?o--:++o<i;)if(t(e[o],o,e))return o;return-1}function Mt(e,t,n){return t==t?function(e,t,n){for(var r=n-1,i=e.length;++r<i;)if(e[r]===t)return r;return-1}(e,t,n):Nt(e,Wt,n)}function Dt(e,t,n,r){for(var i=n-1,o=e.length;++i<o;)if(r(e[i],t))return i;return-1}function Wt(e){return e!=e}function Ut(e,t){var n=null==e?0:e.length;return n?Gt(e,t)/n:d}function $t(e){return function(t){return null==t?i:t[e]}}function Ht(e){return function(t){return null==e?i:e[t]}}function Zt(e,t,n,r,i){return i(e,function(e,i,o){n=r?(r=!1,e):t(n,e,i,o)}),n}function Gt(e,t){for(var n,r=-1,o=e.length;++r<o;){var a=t(e[r]);a!==i&&(n=n===i?a:n+a)}return n}function Vt(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function qt(e){return e?e.slice(0,dn(e)+1).replace(re,""):e}function Kt(e){return function(t){return e(t)}}function Yt(e,t){return Rt(t,function(t){return e[t]})}function Xt(e,t){return e.has(t)}function Jt(e,t){for(var n=-1,r=e.length;++n<r&&Mt(t,e[n],0)>-1;);return n}function Qt(e,t){for(var n=e.length;n--&&Mt(t,e[n],0)>-1;);return n}var en=Ht({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),tn=Ht({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function nn(e){return"\\"+at[e]}function rn(e){return et.test(e)}function on(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function an(e,t){return function(n){return e(t(n))}}function sn(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n];a!==t&&a!==s||(e[n]=s,o[i++]=n)}return o}function ln(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}function cn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=[e,e]}),n}function un(e){return rn(e)?function(e){for(var t=Je.lastIndex=0;Je.test(e);)++t;return t}(e):Lt(e)}function fn(e){return rn(e)?function(e){return e.match(Je)||[]}(e):function(e){return e.split("")}(e)}function dn(e){for(var t=e.length;t--&&ie.test(e.charAt(t)););return t}var pn=Ht({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),hn=function e(t){var n,r=(t=null==t?ft:hn.defaults(ft.Object(),t,hn.pick(ft,nt))).Array,ie=t.Date,_e=t.Error,xe=t.Function,ke=t.Math,je=t.Object,Ce=t.RegExp,Se=t.String,ze=t.TypeError,Ee=r.prototype,Oe=xe.prototype,Ae=je.prototype,Re=t["__core-js_shared__"],Ie=Oe.toString,Pe=Ae.hasOwnProperty,Te=0,Be=(n=/[^.]+$/.exec(Re&&Re.keys&&Re.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Le=Ae.toString,Fe=Ie.call(je),Ne=ft._,Me=Ce("^"+Ie.call(Pe).replace(te,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),De=ht?t.Buffer:i,We=t.Symbol,Ue=t.Uint8Array,$e=De?De.allocUnsafe:i,He=an(je.getPrototypeOf,je),Ze=je.create,Ge=Ae.propertyIsEnumerable,Ve=Ee.splice,qe=We?We.isConcatSpreadable:i,Ke=We?We.iterator:i,Je=We?We.toStringTag:i,et=function(){try{var e=lo(je,"defineProperty");return e({},"",{}),e}catch(e){}}(),at=t.clearTimeout!==ft.clearTimeout&&t.clearTimeout,ct=ie&&ie.now!==ft.Date.now&&ie.now,ut=t.setTimeout!==ft.setTimeout&&t.setTimeout,dt=ke.ceil,pt=ke.floor,gt=je.getOwnPropertySymbols,vt=De?De.isBuffer:i,Lt=t.isFinite,Ht=Ee.join,gn=an(je.keys,je),vn=ke.max,mn=ke.min,bn=ie.now,yn=t.parseInt,wn=ke.random,_n=Ee.reverse,xn=lo(t,"DataView"),kn=lo(t,"Map"),jn=lo(t,"Promise"),Cn=lo(t,"Set"),Sn=lo(t,"WeakMap"),zn=lo(je,"create"),En=Sn&&new Sn,On={},An=Fo(xn),Rn=Fo(kn),In=Fo(jn),Pn=Fo(Cn),Tn=Fo(Sn),Bn=We?We.prototype:i,Ln=Bn?Bn.valueOf:i,Fn=Bn?Bn.toString:i;function Nn(e){if(es(e)&&!$a(e)&&!(e instanceof Un)){if(e instanceof Wn)return e;if(Pe.call(e,"__wrapped__"))return No(e)}return new Wn(e)}var Mn=function(){function e(){}return function(t){if(!Qa(t))return{};if(Ze)return Ze(t);e.prototype=t;var n=new e;return e.prototype=i,n}}();function Dn(){}function Wn(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=i}function Un(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function $n(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Hn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Zn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Gn(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Zn;++t<n;)this.add(e[t])}function Vn(e){var t=this.__data__=new Hn(e);this.size=t.size}function qn(e,t){var n=$a(e),r=!n&&Ua(e),i=!n&&!r&&Va(e),o=!n&&!r&&!i&&ls(e),a=n||r||i||o,s=a?Vt(e.length,Se):[],l=s.length;for(var c in e)!t&&!Pe.call(e,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||vo(c,l))||s.push(c);return s}function Kn(e){var t=e.length;return t?e[Zr(0,t-1)]:i}function Yn(e,t){return Io(Si(e),or(t,0,e.length))}function Xn(e){return Io(Si(e))}function Jn(e,t,n){(n!==i&&!Ma(e[t],n)||n===i&&!(t in e))&&rr(e,t,n)}function Qn(e,t,n){var r=e[t];Pe.call(e,t)&&Ma(r,n)&&(n!==i||t in e)||rr(e,t,n)}function er(e,t){for(var n=e.length;n--;)if(Ma(e[n][0],t))return n;return-1}function tr(e,t,n,r){return ur(e,function(e,i,o){t(r,e,n(e),o)}),r}function nr(e,t){return e&&zi(t,As(t),e)}function rr(e,t,n){"__proto__"==t&&et?et(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function ir(e,t){for(var n=-1,o=t.length,a=r(o),s=null==e;++n<o;)a[n]=s?i:Cs(e,t[n]);return a}function or(e,t,n){return e==e&&(n!==i&&(e=e<=n?e:n),t!==i&&(e=e>=t?e:t)),e}function ar(e,t,n,r,o,a){var s,l=1&t,c=2&t,u=4&t;if(n&&(s=o?n(e,r,o,a):n(e)),s!==i)return s;if(!Qa(e))return e;var f=$a(e);if(f){if(s=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&Pe.call(e,"index")&&(n.index=e.index,n.input=e.input),n}(e),!l)return Si(e,s)}else{var d=fo(e),p=d==w||d==_;if(Va(e))return wi(e,l);if(d==j||d==g||p&&!o){if(s=c||p?{}:ho(e),!l)return c?function(e,t){return zi(e,uo(e),t)}(e,function(e,t){return e&&zi(t,Rs(t),e)}(s,e)):function(e,t){return zi(e,co(e),t)}(e,nr(s,e))}else{if(!ot[d])return o?e:{};s=function(e,t,n){var r,i=e.constructor;switch(t){case R:return _i(e);case m:case b:return new i(+e);case I:return function(e,t){var n=t?_i(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case P:case T:case B:case L:case F:case N:case M:case D:case W:return xi(e,n);case x:return new i;case k:case E:return new i(e);case S:return function(e){var t=new e.constructor(e.source,de.exec(e));return t.lastIndex=e.lastIndex,t}(e);case z:return new i;case O:return r=e,Ln?je(Ln.call(r)):{}}}(e,d,l)}}a||(a=new Vn);var h=a.get(e);if(h)return h;a.set(e,s),os(e)?e.forEach(function(r){s.add(ar(r,t,n,r,e,a))}):ts(e)&&e.forEach(function(r,i){s.set(i,ar(r,t,n,i,e,a))});var v=f?i:(u?c?to:eo:c?Rs:As)(e);return Ct(v||e,function(r,i){v&&(r=e[i=r]),Qn(s,i,ar(r,t,n,i,e,a))}),s}function sr(e,t,n){var r=n.length;if(null==e)return!r;for(e=je(e);r--;){var o=n[r],a=t[o],s=e[o];if(s===i&&!(o in e)||!a(s))return!1}return!0}function lr(e,t,n){if("function"!=typeof e)throw new ze(o);return Eo(function(){e.apply(i,n)},t)}function cr(e,t,n,r){var i=-1,o=Ot,a=!0,s=e.length,l=[],c=t.length;if(!s)return l;n&&(t=Rt(t,Kt(n))),r?(o=At,a=!1):t.length>=200&&(o=Xt,a=!1,t=new Gn(t));e:for(;++i<s;){var u=e[i],f=null==n?u:n(u);if(u=r||0!==u?u:0,a&&f==f){for(var d=c;d--;)if(t[d]===f)continue e;l.push(u)}else o(t,f,r)||l.push(u)}return l}Nn.templateSettings={escape:K,evaluate:Y,interpolate:X,variable:"",imports:{_:Nn}},Nn.prototype=Dn.prototype,Nn.prototype.constructor=Nn,Wn.prototype=Mn(Dn.prototype),Wn.prototype.constructor=Wn,Un.prototype=Mn(Dn.prototype),Un.prototype.constructor=Un,$n.prototype.clear=function(){this.__data__=zn?zn(null):{},this.size=0},$n.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},$n.prototype.get=function(e){var t=this.__data__;if(zn){var n=t[e];return n===a?i:n}return Pe.call(t,e)?t[e]:i},$n.prototype.has=function(e){var t=this.__data__;return zn?t[e]!==i:Pe.call(t,e)},$n.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=zn&&t===i?a:t,this},Hn.prototype.clear=function(){this.__data__=[],this.size=0},Hn.prototype.delete=function(e){var t=this.__data__,n=er(t,e);return!(n<0||(n==t.length-1?t.pop():Ve.call(t,n,1),--this.size,0))},Hn.prototype.get=function(e){var t=this.__data__,n=er(t,e);return n<0?i:t[n][1]},Hn.prototype.has=function(e){return er(this.__data__,e)>-1},Hn.prototype.set=function(e,t){var n=this.__data__,r=er(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},Zn.prototype.clear=function(){this.size=0,this.__data__={hash:new $n,map:new(kn||Hn),string:new $n}},Zn.prototype.delete=function(e){var t=ao(this,e).delete(e);return this.size-=t?1:0,t},Zn.prototype.get=function(e){return ao(this,e).get(e)},Zn.prototype.has=function(e){return ao(this,e).has(e)},Zn.prototype.set=function(e,t){var n=ao(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},Gn.prototype.add=Gn.prototype.push=function(e){return this.__data__.set(e,a),this},Gn.prototype.has=function(e){return this.__data__.has(e)},Vn.prototype.clear=function(){this.__data__=new Hn,this.size=0},Vn.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Vn.prototype.get=function(e){return this.__data__.get(e)},Vn.prototype.has=function(e){return this.__data__.has(e)},Vn.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Hn){var r=n.__data__;if(!kn||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Zn(r)}return n.set(e,t),this.size=n.size,this};var ur=Ai(br),fr=Ai(yr,!0);function dr(e,t){var n=!0;return ur(e,function(e,r,i){return n=!!t(e,r,i)}),n}function pr(e,t,n){for(var r=-1,o=e.length;++r<o;){var a=e[r],s=t(a);if(null!=s&&(l===i?s==s&&!ss(s):n(s,l)))var l=s,c=a}return c}function hr(e,t){var n=[];return ur(e,function(e,r,i){t(e,r,i)&&n.push(e)}),n}function gr(e,t,n,r,i){var o=-1,a=e.length;for(n||(n=go),i||(i=[]);++o<a;){var s=e[o];t>0&&n(s)?t>1?gr(s,t-1,n,r,i):It(i,s):r||(i[i.length]=s)}return i}var vr=Ri(),mr=Ri(!0);function br(e,t){return e&&vr(e,t,As)}function yr(e,t){return e&&mr(e,t,As)}function wr(e,t){return Et(t,function(t){return Ya(e[t])})}function _r(e,t){for(var n=0,r=(t=vi(t,e)).length;null!=e&&n<r;)e=e[Lo(t[n++])];return n&&n==r?e:i}function xr(e,t,n){var r=t(e);return $a(e)?r:It(r,n(e))}function kr(e){return null==e?e===i?"[object Undefined]":"[object Null]":Je&&Je in je(e)?function(e){var t=Pe.call(e,Je),n=e[Je];try{e[Je]=i;var r=!0}catch(e){}var o=Le.call(e);return r&&(t?e[Je]=n:delete e[Je]),o}(e):function(e){return Le.call(e)}(e)}function jr(e,t){return e>t}function Cr(e,t){return null!=e&&Pe.call(e,t)}function Sr(e,t){return null!=e&&t in je(e)}function zr(e,t,n){for(var o=n?At:Ot,a=e[0].length,s=e.length,l=s,c=r(s),u=1/0,f=[];l--;){var d=e[l];l&&t&&(d=Rt(d,Kt(t))),u=mn(d.length,u),c[l]=!n&&(t||a>=120&&d.length>=120)?new Gn(l&&d):i}d=e[0];var p=-1,h=c[0];e:for(;++p<a&&f.length<u;){var g=d[p],v=t?t(g):g;if(g=n||0!==g?g:0,!(h?Xt(h,v):o(f,v,n))){for(l=s;--l;){var m=c[l];if(!(m?Xt(m,v):o(e[l],v,n)))continue e}h&&h.push(v),f.push(g)}}return f}function Er(e,t,n){var r=null==(e=Co(e,t=vi(t,e)))?e:e[Lo(Ko(t))];return null==r?i:kt(r,e,n)}function Or(e){return es(e)&&kr(e)==g}function Ar(e,t,n,r,o){return e===t||(null==e||null==t||!es(e)&&!es(t)?e!=e&&t!=t:function(e,t,n,r,o,a){var s=$a(e),l=$a(t),c=s?v:fo(e),u=l?v:fo(t),f=(c=c==g?j:c)==j,d=(u=u==g?j:u)==j,p=c==u;if(p&&Va(e)){if(!Va(t))return!1;s=!0,f=!1}if(p&&!f)return a||(a=new Vn),s||ls(e)?Ji(e,t,n,r,o,a):function(e,t,n,r,i,o,a){switch(n){case I:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case R:return!(e.byteLength!=t.byteLength||!o(new Ue(e),new Ue(t)));case m:case b:case k:return Ma(+e,+t);case y:return e.name==t.name&&e.message==t.message;case S:case E:return e==t+"";case x:var s=on;case z:var l=1&r;if(s||(s=ln),e.size!=t.size&&!l)return!1;var c=a.get(e);if(c)return c==t;r|=2,a.set(e,t);var u=Ji(s(e),s(t),r,i,o,a);return a.delete(e),u;case O:if(Ln)return Ln.call(e)==Ln.call(t)}return!1}(e,t,c,n,r,o,a);if(!(1&n)){var h=f&&Pe.call(e,"__wrapped__"),w=d&&Pe.call(t,"__wrapped__");if(h||w){var _=h?e.value():e,C=w?t.value():t;return a||(a=new Vn),o(_,C,n,r,a)}}return!!p&&(a||(a=new Vn),function(e,t,n,r,o,a){var s=1&n,l=eo(e),c=l.length;if(c!=eo(t).length&&!s)return!1;for(var u=c;u--;){var f=l[u];if(!(s?f in t:Pe.call(t,f)))return!1}var d=a.get(e),p=a.get(t);if(d&&p)return d==t&&p==e;var h=!0;a.set(e,t),a.set(t,e);for(var g=s;++u<c;){var v=e[f=l[u]],m=t[f];if(r)var b=s?r(m,v,f,t,e,a):r(v,m,f,e,t,a);if(!(b===i?v===m||o(v,m,n,r,a):b)){h=!1;break}g||(g="constructor"==f)}if(h&&!g){var y=e.constructor,w=t.constructor;y==w||!("constructor"in e)||!("constructor"in t)||"function"==typeof y&&y instanceof y&&"function"==typeof w&&w instanceof w||(h=!1)}return a.delete(e),a.delete(t),h}(e,t,n,r,o,a))}(e,t,n,r,Ar,o))}function Rr(e,t,n,r){var o=n.length,a=o,s=!r;if(null==e)return!a;for(e=je(e);o--;){var l=n[o];if(s&&l[2]?l[1]!==e[l[0]]:!(l[0]in e))return!1}for(;++o<a;){var c=(l=n[o])[0],u=e[c],f=l[1];if(s&&l[2]){if(u===i&&!(c in e))return!1}else{var d=new Vn;if(r)var p=r(u,f,c,e,t,d);if(!(p===i?Ar(f,u,3,r,d):p))return!1}}return!0}function Ir(e){return!(!Qa(e)||(t=e,Be&&Be in t))&&(Ya(e)?Me:ge).test(Fo(e));var t}function Pr(e){return"function"==typeof e?e:null==e?nl:"object"==typeof e?$a(e)?Nr(e[0],e[1]):Fr(e):fl(e)}function Tr(e){if(!_o(e))return gn(e);var t=[];for(var n in je(e))Pe.call(e,n)&&"constructor"!=n&&t.push(n);return t}function Br(e,t){return e<t}function Lr(e,t){var n=-1,i=Za(e)?r(e.length):[];return ur(e,function(e,r,o){i[++n]=t(e,r,o)}),i}function Fr(e){var t=so(e);return 1==t.length&&t[0][2]?ko(t[0][0],t[0][1]):function(n){return n===e||Rr(n,e,t)}}function Nr(e,t){return bo(e)&&xo(t)?ko(Lo(e),t):function(n){var r=Cs(n,e);return r===i&&r===t?Ss(n,e):Ar(t,r,3)}}function Mr(e,t,n,r,o){e!==t&&vr(t,function(a,s){if(o||(o=new Vn),Qa(a))!function(e,t,n,r,o,a,s){var l=So(e,n),c=So(t,n),u=s.get(c);if(u)Jn(e,n,u);else{var f=a?a(l,c,n+"",e,t,s):i,d=f===i;if(d){var p=$a(c),h=!p&&Va(c),g=!p&&!h&&ls(c);f=c,p||h||g?$a(l)?f=l:Ga(l)?f=Si(l):h?(d=!1,f=wi(c,!0)):g?(d=!1,f=xi(c,!0)):f=[]:rs(c)||Ua(c)?(f=l,Ua(l)?f=vs(l):Qa(l)&&!Ya(l)||(f=ho(c))):d=!1}d&&(s.set(c,f),o(f,c,r,a,s),s.delete(c)),Jn(e,n,f)}}(e,t,s,n,Mr,r,o);else{var l=r?r(So(e,s),a,s+"",e,t,o):i;l===i&&(l=a),Jn(e,s,l)}},Rs)}function Dr(e,t){var n=e.length;if(n)return vo(t+=t<0?n:0,n)?e[t]:i}function Wr(e,t,n){t=t.length?Rt(t,function(e){return $a(e)?function(t){return _r(t,1===e.length?e[0]:e)}:e}):[nl];var r=-1;t=Rt(t,Kt(oo()));var i=Lr(e,function(e,n,i){var o=Rt(t,function(t){return t(e)});return{criteria:o,index:++r,value:e}});return function(e){var t=e.length;for(e.sort(function(e,t){return function(e,t,n){for(var r=-1,i=e.criteria,o=t.criteria,a=i.length,s=n.length;++r<a;){var l=ki(i[r],o[r]);if(l)return r>=s?l:l*("desc"==n[r]?-1:1)}return e.index-t.index}(e,t,n)});t--;)e[t]=e[t].value;return e}(i)}function Ur(e,t,n){for(var r=-1,i=t.length,o={};++r<i;){var a=t[r],s=_r(e,a);n(s,a)&&Yr(o,vi(a,e),s)}return o}function $r(e,t,n,r){var i=r?Dt:Mt,o=-1,a=t.length,s=e;for(e===t&&(t=Si(t)),n&&(s=Rt(e,Kt(n)));++o<a;)for(var l=0,c=t[o],u=n?n(c):c;(l=i(s,u,l,r))>-1;)s!==e&&Ve.call(s,l,1),Ve.call(e,l,1);return e}function Hr(e,t){for(var n=e?t.length:0,r=n-1;n--;){var i=t[n];if(n==r||i!==o){var o=i;vo(i)?Ve.call(e,i,1):li(e,i)}}return e}function Zr(e,t){return e+pt(wn()*(t-e+1))}function Gr(e,t){var n="";if(!e||t<1||t>f)return n;do{t%2&&(n+=e),(t=pt(t/2))&&(e+=e)}while(t);return n}function Vr(e,t){return Oo(jo(e,t,nl),e+"")}function qr(e){return Kn(Ms(e))}function Kr(e,t){var n=Ms(e);return Io(n,or(t,0,n.length))}function Yr(e,t,n,r){if(!Qa(e))return e;for(var o=-1,a=(t=vi(t,e)).length,s=a-1,l=e;null!=l&&++o<a;){var c=Lo(t[o]),u=n;if("__proto__"===c||"constructor"===c||"prototype"===c)return e;if(o!=s){var f=l[c];(u=r?r(f,c,l):i)===i&&(u=Qa(f)?f:vo(t[o+1])?[]:{})}Qn(l,c,u),l=l[c]}return e}var Xr=En?function(e,t){return En.set(e,t),e}:nl,Jr=et?function(e,t){return et(e,"toString",{configurable:!0,enumerable:!1,value:Qs(t),writable:!0})}:nl;function Qr(e){return Io(Ms(e))}function ei(e,t,n){var i=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var a=r(o);++i<o;)a[i]=e[i+t];return a}function ti(e,t){var n;return ur(e,function(e,r,i){return!(n=t(e,r,i))}),!!n}function ni(e,t,n){var r=0,i=null==e?r:e.length;if("number"==typeof t&&t==t&&i<=2147483647){for(;r<i;){var o=r+i>>>1,a=e[o];null!==a&&!ss(a)&&(n?a<=t:a<t)?r=o+1:i=o}return i}return ri(e,t,nl,n)}function ri(e,t,n,r){var o=0,a=null==e?0:e.length;if(0===a)return 0;for(var s=(t=n(t))!=t,l=null===t,c=ss(t),u=t===i;o<a;){var f=pt((o+a)/2),d=n(e[f]),p=d!==i,h=null===d,g=d==d,v=ss(d);if(s)var m=r||g;else m=u?g&&(r||p):l?g&&p&&(r||!h):c?g&&p&&!h&&(r||!v):!h&&!v&&(r?d<=t:d<t);m?o=f+1:a=f}return mn(a,4294967294)}function ii(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n],s=t?t(a):a;if(!n||!Ma(s,l)){var l=s;o[i++]=0===a?0:a}}return o}function oi(e){return"number"==typeof e?e:ss(e)?d:+e}function ai(e){if("string"==typeof e)return e;if($a(e))return Rt(e,ai)+"";if(ss(e))return Fn?Fn.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function si(e,t,n){var r=-1,i=Ot,o=e.length,a=!0,s=[],l=s;if(n)a=!1,i=At;else if(o>=200){var c=t?null:Gi(e);if(c)return ln(c);a=!1,i=Xt,l=new Gn}else l=t?[]:s;e:for(;++r<o;){var u=e[r],f=t?t(u):u;if(u=n||0!==u?u:0,a&&f==f){for(var d=l.length;d--;)if(l[d]===f)continue e;t&&l.push(f),s.push(u)}else i(l,f,n)||(l!==s&&l.push(f),s.push(u))}return s}function li(e,t){return null==(e=Co(e,t=vi(t,e)))||delete e[Lo(Ko(t))]}function ci(e,t,n,r){return Yr(e,t,n(_r(e,t)),r)}function ui(e,t,n,r){for(var i=e.length,o=r?i:-1;(r?o--:++o<i)&&t(e[o],o,e););return n?ei(e,r?0:o,r?o+1:i):ei(e,r?o+1:0,r?i:o)}function fi(e,t){var n=e;return n instanceof Un&&(n=n.value()),Pt(t,function(e,t){return t.func.apply(t.thisArg,It([e],t.args))},n)}function di(e,t,n){var i=e.length;if(i<2)return i?si(e[0]):[];for(var o=-1,a=r(i);++o<i;)for(var s=e[o],l=-1;++l<i;)l!=o&&(a[o]=cr(a[o]||s,e[l],t,n));return si(gr(a,1),t,n)}function pi(e,t,n){for(var r=-1,o=e.length,a=t.length,s={};++r<o;){var l=r<a?t[r]:i;n(s,e[r],l)}return s}function hi(e){return Ga(e)?e:[]}function gi(e){return"function"==typeof e?e:nl}function vi(e,t){return $a(e)?e:bo(e,t)?[e]:Bo(ms(e))}var mi=Vr;function bi(e,t,n){var r=e.length;return n=n===i?r:n,!t&&n>=r?e:ei(e,t,n)}var yi=at||function(e){return ft.clearTimeout(e)};function wi(e,t){if(t)return e.slice();var n=e.length,r=$e?$e(n):new e.constructor(n);return e.copy(r),r}function _i(e){var t=new e.constructor(e.byteLength);return new Ue(t).set(new Ue(e)),t}function xi(e,t){var n=t?_i(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function ki(e,t){if(e!==t){var n=e!==i,r=null===e,o=e==e,a=ss(e),s=t!==i,l=null===t,c=t==t,u=ss(t);if(!l&&!u&&!a&&e>t||a&&s&&c&&!l&&!u||r&&s&&c||!n&&c||!o)return 1;if(!r&&!a&&!u&&e<t||u&&n&&o&&!r&&!a||l&&n&&o||!s&&o||!c)return-1}return 0}function ji(e,t,n,i){for(var o=-1,a=e.length,s=n.length,l=-1,c=t.length,u=vn(a-s,0),f=r(c+u),d=!i;++l<c;)f[l]=t[l];for(;++o<s;)(d||o<a)&&(f[n[o]]=e[o]);for(;u--;)f[l++]=e[o++];return f}function Ci(e,t,n,i){for(var o=-1,a=e.length,s=-1,l=n.length,c=-1,u=t.length,f=vn(a-l,0),d=r(f+u),p=!i;++o<f;)d[o]=e[o];for(var h=o;++c<u;)d[h+c]=t[c];for(;++s<l;)(p||o<a)&&(d[h+n[s]]=e[o++]);return d}function Si(e,t){var n=-1,i=e.length;for(t||(t=r(i));++n<i;)t[n]=e[n];return t}function zi(e,t,n,r){var o=!n;n||(n={});for(var a=-1,s=t.length;++a<s;){var l=t[a],c=r?r(n[l],e[l],l,n,e):i;c===i&&(c=e[l]),o?rr(n,l,c):Qn(n,l,c)}return n}function Ei(e,t){return function(n,r){var i=$a(n)?jt:tr,o=t?t():{};return i(n,e,oo(r,2),o)}}function Oi(e){return Vr(function(t,n){var r=-1,o=n.length,a=o>1?n[o-1]:i,s=o>2?n[2]:i;for(a=e.length>3&&"function"==typeof a?(o--,a):i,s&&mo(n[0],n[1],s)&&(a=o<3?i:a,o=1),t=je(t);++r<o;){var l=n[r];l&&e(t,l,r,a)}return t})}function Ai(e,t){return function(n,r){if(null==n)return n;if(!Za(n))return e(n,r);for(var i=n.length,o=t?i:-1,a=je(n);(t?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function Ri(e){return function(t,n,r){for(var i=-1,o=je(t),a=r(t),s=a.length;s--;){var l=a[e?s:++i];if(!1===n(o[l],l,o))break}return t}}function Ii(e){return function(t){var n=rn(t=ms(t))?fn(t):i,r=n?n[0]:t.charAt(0),o=n?bi(n,1).join(""):t.slice(1);return r[e]()+o}}function Pi(e){return function(t){return Pt(Ys(Us(t).replace(Ye,"")),e,"")}}function Ti(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=Mn(e.prototype),r=e.apply(n,t);return Qa(r)?r:n}}function Bi(e){return function(t,n,r){var o=je(t);if(!Za(t)){var a=oo(n,3);t=As(t),n=function(e){return a(o[e],e,o)}}var s=e(t,n,r);return s>-1?o[a?t[s]:s]:i}}function Li(e){return Qi(function(t){var n=t.length,r=n,a=Wn.prototype.thru;for(e&&t.reverse();r--;){var s=t[r];if("function"!=typeof s)throw new ze(o);if(a&&!l&&"wrapper"==ro(s))var l=new Wn([],!0)}for(r=l?r:n;++r<n;){var c=ro(s=t[r]),u="wrapper"==c?no(s):i;l=u&&yo(u[0])&&424==u[1]&&!u[4].length&&1==u[9]?l[ro(u[0])].apply(l,u[3]):1==s.length&&yo(s)?l[c]():l.thru(s)}return function(){var e=arguments,r=e[0];if(l&&1==e.length&&$a(r))return l.plant(r).value();for(var i=0,o=n?t[i].apply(this,e):r;++i<n;)o=t[i].call(this,o);return o}})}function Fi(e,t,n,o,a,s,l,u,f,d){var p=t&c,h=1&t,g=2&t,v=24&t,m=512&t,b=g?i:Ti(e);return function c(){for(var y=arguments.length,w=r(y),_=y;_--;)w[_]=arguments[_];if(v)var x=io(c),k=function(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}(w,x);if(o&&(w=ji(w,o,a,v)),s&&(w=Ci(w,s,l,v)),y-=k,v&&y<d){var j=sn(w,x);return Hi(e,t,Fi,c.placeholder,n,w,j,u,f,d-y)}var C=h?n:this,S=g?C[e]:e;return y=w.length,u?w=function(e,t){for(var n=e.length,r=mn(t.length,n),o=Si(e);r--;){var a=t[r];e[r]=vo(a,n)?o[a]:i}return e}(w,u):m&&y>1&&w.reverse(),p&&f<y&&(w.length=f),this&&this!==ft&&this instanceof c&&(S=b||Ti(S)),S.apply(C,w)}}function Ni(e,t){return function(n,r){return function(e,t,n,r){return br(e,function(e,i,o){t(r,n(e),i,o)}),r}(n,e,t(r),{})}}function Mi(e,t){return function(n,r){var o;if(n===i&&r===i)return t;if(n!==i&&(o=n),r!==i){if(o===i)return r;"string"==typeof n||"string"==typeof r?(n=ai(n),r=ai(r)):(n=oi(n),r=oi(r)),o=e(n,r)}return o}}function Di(e){return Qi(function(t){return t=Rt(t,Kt(oo())),Vr(function(n){var r=this;return e(t,function(e){return kt(e,r,n)})})})}function Wi(e,t){var n=(t=t===i?" ":ai(t)).length;if(n<2)return n?Gr(t,e):t;var r=Gr(t,dt(e/un(t)));return rn(t)?bi(fn(r),0,e).join(""):r.slice(0,e)}function Ui(e){return function(t,n,o){return o&&"number"!=typeof o&&mo(t,n,o)&&(n=o=i),t=ds(t),n===i?(n=t,t=0):n=ds(n),function(e,t,n,i){for(var o=-1,a=vn(dt((t-e)/(n||1)),0),s=r(a);a--;)s[i?a:++o]=e,e+=n;return s}(t,n,o=o===i?t<n?1:-1:ds(o),e)}}function $i(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=gs(t),n=gs(n)),e(t,n)}}function Hi(e,t,n,r,o,a,s,c,u,f){var d=8&t;t|=d?l:64,4&(t&=~(d?64:l))||(t&=-4);var p=[e,t,o,d?a:i,d?s:i,d?i:a,d?i:s,c,u,f],h=n.apply(i,p);return yo(e)&&zo(h,p),h.placeholder=r,Ao(h,e,t)}function Zi(e){var t=ke[e];return function(e,n){if(e=gs(e),(n=null==n?0:mn(ps(n),292))&&Lt(e)){var r=(ms(e)+"e").split("e");return+((r=(ms(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Gi=Cn&&1/ln(new Cn([,-0]))[1]==u?function(e){return new Cn(e)}:sl;function Vi(e){return function(t){var n=fo(t);return n==x?on(t):n==z?cn(t):function(e,t){return Rt(t,function(t){return[t,e[t]]})}(t,e(t))}}function qi(e,t,n,a,u,f,d,p){var h=2&t;if(!h&&"function"!=typeof e)throw new ze(o);var g=a?a.length:0;if(g||(t&=-97,a=u=i),d=d===i?d:vn(ps(d),0),p=p===i?p:ps(p),g-=u?u.length:0,64&t){var v=a,m=u;a=u=i}var b=h?i:no(e),y=[e,t,n,a,u,v,m,f,d,p];if(b&&function(e,t){var n=e[1],r=t[1],i=n|r,o=i<131,a=r==c&&8==n||r==c&&256==n&&e[7].length<=t[8]||384==r&&t[7].length<=t[8]&&8==n;if(!o&&!a)return e;1&r&&(e[2]=t[2],i|=1&n?0:4);var l=t[3];if(l){var u=e[3];e[3]=u?ji(u,l,t[4]):l,e[4]=u?sn(e[3],s):t[4]}(l=t[5])&&(u=e[5],e[5]=u?Ci(u,l,t[6]):l,e[6]=u?sn(e[5],s):t[6]),(l=t[7])&&(e[7]=l),r&c&&(e[8]=null==e[8]?t[8]:mn(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=i}(y,b),e=y[0],t=y[1],n=y[2],a=y[3],u=y[4],!(p=y[9]=y[9]===i?h?0:e.length:vn(y[9]-g,0))&&24&t&&(t&=-25),t&&1!=t)w=8==t||16==t?function(e,t,n){var o=Ti(e);return function a(){for(var s=arguments.length,l=r(s),c=s,u=io(a);c--;)l[c]=arguments[c];var f=s<3&&l[0]!==u&&l[s-1]!==u?[]:sn(l,u);return(s-=f.length)<n?Hi(e,t,Fi,a.placeholder,i,l,f,i,i,n-s):kt(this&&this!==ft&&this instanceof a?o:e,this,l)}}(e,t,p):t!=l&&33!=t||u.length?Fi.apply(i,y):function(e,t,n,i){var o=1&t,a=Ti(e);return function t(){for(var s=-1,l=arguments.length,c=-1,u=i.length,f=r(u+l),d=this&&this!==ft&&this instanceof t?a:e;++c<u;)f[c]=i[c];for(;l--;)f[c++]=arguments[++s];return kt(d,o?n:this,f)}}(e,t,n,a);else var w=function(e,t,n){var r=1&t,i=Ti(e);return function t(){return(this&&this!==ft&&this instanceof t?i:e).apply(r?n:this,arguments)}}(e,t,n);return Ao((b?Xr:zo)(w,y),e,t)}function Ki(e,t,n,r){return e===i||Ma(e,Ae[n])&&!Pe.call(r,n)?t:e}function Yi(e,t,n,r,o,a){return Qa(e)&&Qa(t)&&(a.set(t,e),Mr(e,t,i,Yi,a),a.delete(t)),e}function Xi(e){return rs(e)?i:e}function Ji(e,t,n,r,o,a){var s=1&n,l=e.length,c=t.length;if(l!=c&&!(s&&c>l))return!1;var u=a.get(e),f=a.get(t);if(u&&f)return u==t&&f==e;var d=-1,p=!0,h=2&n?new Gn:i;for(a.set(e,t),a.set(t,e);++d<l;){var g=e[d],v=t[d];if(r)var m=s?r(v,g,d,t,e,a):r(g,v,d,e,t,a);if(m!==i){if(m)continue;p=!1;break}if(h){if(!Bt(t,function(e,t){if(!Xt(h,t)&&(g===e||o(g,e,n,r,a)))return h.push(t)})){p=!1;break}}else if(g!==v&&!o(g,v,n,r,a)){p=!1;break}}return a.delete(e),a.delete(t),p}function Qi(e){return Oo(jo(e,i,Ho),e+"")}function eo(e){return xr(e,As,co)}function to(e){return xr(e,Rs,uo)}var no=En?function(e){return En.get(e)}:sl;function ro(e){for(var t=e.name+"",n=On[t],r=Pe.call(On,t)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==e)return i.name}return t}function io(e){return(Pe.call(Nn,"placeholder")?Nn:e).placeholder}function oo(){var e=Nn.iteratee||rl;return e=e===rl?Pr:e,arguments.length?e(arguments[0],arguments[1]):e}function ao(e,t){var n,r,i=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof t?"string":"hash"]:i.map}function so(e){for(var t=As(e),n=t.length;n--;){var r=t[n],i=e[r];t[n]=[r,i,xo(i)]}return t}function lo(e,t){var n=function(e,t){return null==e?i:e[t]}(e,t);return Ir(n)?n:i}var co=gt?function(e){return null==e?[]:(e=je(e),Et(gt(e),function(t){return Ge.call(e,t)}))}:hl,uo=gt?function(e){for(var t=[];e;)It(t,co(e)),e=He(e);return t}:hl,fo=kr;function po(e,t,n){for(var r=-1,i=(t=vi(t,e)).length,o=!1;++r<i;){var a=Lo(t[r]);if(!(o=null!=e&&n(e,a)))break;e=e[a]}return o||++r!=i?o:!!(i=null==e?0:e.length)&&Ja(i)&&vo(a,i)&&($a(e)||Ua(e))}function ho(e){return"function"!=typeof e.constructor||_o(e)?{}:Mn(He(e))}function go(e){return $a(e)||Ua(e)||!!(qe&&e&&e[qe])}function vo(e,t){var n=typeof e;return!!(t=null==t?f:t)&&("number"==n||"symbol"!=n&&me.test(e))&&e>-1&&e%1==0&&e<t}function mo(e,t,n){if(!Qa(n))return!1;var r=typeof t;return!!("number"==r?Za(n)&&vo(t,n.length):"string"==r&&t in n)&&Ma(n[t],e)}function bo(e,t){if($a(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!ss(e))||Q.test(e)||!J.test(e)||null!=t&&e in je(t)}function yo(e){var t=ro(e),n=Nn[t];if("function"!=typeof n||!(t in Un.prototype))return!1;if(e===n)return!0;var r=no(n);return!!r&&e===r[0]}(xn&&fo(new xn(new ArrayBuffer(1)))!=I||kn&&fo(new kn)!=x||jn&&fo(jn.resolve())!=C||Cn&&fo(new Cn)!=z||Sn&&fo(new Sn)!=A)&&(fo=function(e){var t=kr(e),n=t==j?e.constructor:i,r=n?Fo(n):"";if(r)switch(r){case An:return I;case Rn:return x;case In:return C;case Pn:return z;case Tn:return A}return t});var wo=Re?Ya:gl;function _o(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||Ae)}function xo(e){return e==e&&!Qa(e)}function ko(e,t){return function(n){return null!=n&&n[e]===t&&(t!==i||e in je(n))}}function jo(e,t,n){return t=vn(t===i?e.length-1:t,0),function(){for(var i=arguments,o=-1,a=vn(i.length-t,0),s=r(a);++o<a;)s[o]=i[t+o];o=-1;for(var l=r(t+1);++o<t;)l[o]=i[o];return l[t]=n(s),kt(e,this,l)}}function Co(e,t){return t.length<2?e:_r(e,ei(t,0,-1))}function So(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var zo=Ro(Xr),Eo=ut||function(e,t){return ft.setTimeout(e,t)},Oo=Ro(Jr);function Ao(e,t,n){var r=t+"";return Oo(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(oe,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return Ct(h,function(n){var r="_."+n[0];t&n[1]&&!Ot(e,r)&&e.push(r)}),e.sort()}(function(e){var t=e.match(ae);return t?t[1].split(se):[]}(r),n)))}function Ro(e){var t=0,n=0;return function(){var r=bn(),o=16-(r-n);if(n=r,o>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(i,arguments)}}function Io(e,t){var n=-1,r=e.length,o=r-1;for(t=t===i?r:t;++n<t;){var a=Zr(n,o),s=e[a];e[a]=e[n],e[n]=s}return e.length=t,e}var Po,To,Bo=(Po=Pa(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(ee,function(e,n,r,i){t.push(r?i.replace(ue,"$1"):n||e)}),t},function(e){return 500===To.size&&To.clear(),e}),To=Po.cache,Po);function Lo(e){if("string"==typeof e||ss(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Fo(e){if(null!=e){try{return Ie.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function No(e){if(e instanceof Un)return e.clone();var t=new Wn(e.__wrapped__,e.__chain__);return t.__actions__=Si(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var Mo=Vr(function(e,t){return Ga(e)?cr(e,gr(t,1,Ga,!0)):[]}),Do=Vr(function(e,t){var n=Ko(t);return Ga(n)&&(n=i),Ga(e)?cr(e,gr(t,1,Ga,!0),oo(n,2)):[]}),Wo=Vr(function(e,t){var n=Ko(t);return Ga(n)&&(n=i),Ga(e)?cr(e,gr(t,1,Ga,!0),i,n):[]});function Uo(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:ps(n);return i<0&&(i=vn(r+i,0)),Nt(e,oo(t,3),i)}function $o(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r-1;return n!==i&&(o=ps(n),o=n<0?vn(r+o,0):mn(o,r-1)),Nt(e,oo(t,3),o,!0)}function Ho(e){return null!=e&&e.length?gr(e,1):[]}function Zo(e){return e&&e.length?e[0]:i}var Go=Vr(function(e){var t=Rt(e,hi);return t.length&&t[0]===e[0]?zr(t):[]}),Vo=Vr(function(e){var t=Ko(e),n=Rt(e,hi);return t===Ko(n)?t=i:n.pop(),n.length&&n[0]===e[0]?zr(n,oo(t,2)):[]}),qo=Vr(function(e){var t=Ko(e),n=Rt(e,hi);return(t="function"==typeof t?t:i)&&n.pop(),n.length&&n[0]===e[0]?zr(n,i,t):[]});function Ko(e){var t=null==e?0:e.length;return t?e[t-1]:i}var Yo=Vr(Xo);function Xo(e,t){return e&&e.length&&t&&t.length?$r(e,t):e}var Jo=Qi(function(e,t){var n=null==e?0:e.length,r=ir(e,t);return Hr(e,Rt(t,function(e){return vo(e,n)?+e:e}).sort(ki)),r});function Qo(e){return null==e?e:_n.call(e)}var ea=Vr(function(e){return si(gr(e,1,Ga,!0))}),ta=Vr(function(e){var t=Ko(e);return Ga(t)&&(t=i),si(gr(e,1,Ga,!0),oo(t,2))}),na=Vr(function(e){var t=Ko(e);return t="function"==typeof t?t:i,si(gr(e,1,Ga,!0),i,t)});function ra(e){if(!e||!e.length)return[];var t=0;return e=Et(e,function(e){if(Ga(e))return t=vn(e.length,t),!0}),Vt(t,function(t){return Rt(e,$t(t))})}function ia(e,t){if(!e||!e.length)return[];var n=ra(e);return null==t?n:Rt(n,function(e){return kt(t,i,e)})}var oa=Vr(function(e,t){return Ga(e)?cr(e,t):[]}),aa=Vr(function(e){return di(Et(e,Ga))}),sa=Vr(function(e){var t=Ko(e);return Ga(t)&&(t=i),di(Et(e,Ga),oo(t,2))}),la=Vr(function(e){var t=Ko(e);return t="function"==typeof t?t:i,di(Et(e,Ga),i,t)}),ca=Vr(ra),ua=Vr(function(e){var t=e.length,n=t>1?e[t-1]:i;return n="function"==typeof n?(e.pop(),n):i,ia(e,n)});function fa(e){var t=Nn(e);return t.__chain__=!0,t}function da(e,t){return t(e)}var pa=Qi(function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,o=function(t){return ir(t,e)};return!(t>1||this.__actions__.length)&&r instanceof Un&&vo(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:da,args:[o],thisArg:i}),new Wn(r,this.__chain__).thru(function(e){return t&&!e.length&&e.push(i),e})):this.thru(o)}),ha=Ei(function(e,t,n){Pe.call(e,n)?++e[n]:rr(e,n,1)}),ga=Bi(Uo),va=Bi($o);function ma(e,t){return($a(e)?Ct:ur)(e,oo(t,3))}function ba(e,t){return($a(e)?St:fr)(e,oo(t,3))}var ya=Ei(function(e,t,n){Pe.call(e,n)?e[n].push(t):rr(e,n,[t])}),wa=Vr(function(e,t,n){var i=-1,o="function"==typeof t,a=Za(e)?r(e.length):[];return ur(e,function(e){a[++i]=o?kt(t,e,n):Er(e,t,n)}),a}),_a=Ei(function(e,t,n){rr(e,n,t)});function xa(e,t){return($a(e)?Rt:Lr)(e,oo(t,3))}var ka=Ei(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]}),ja=Vr(function(e,t){if(null==e)return[];var n=t.length;return n>1&&mo(e,t[0],t[1])?t=[]:n>2&&mo(t[0],t[1],t[2])&&(t=[t[0]]),Wr(e,gr(t,1),[])}),Ca=ct||function(){return ft.Date.now()};function Sa(e,t,n){return t=n?i:t,t=e&&null==t?e.length:t,qi(e,c,i,i,i,i,t)}function za(e,t){var n;if("function"!=typeof t)throw new ze(o);return e=ps(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=i),n}}var Ea=Vr(function(e,t,n){var r=1;if(n.length){var i=sn(n,io(Ea));r|=l}return qi(e,r,t,n,i)}),Oa=Vr(function(e,t,n){var r=3;if(n.length){var i=sn(n,io(Oa));r|=l}return qi(t,r,e,n,i)});function Aa(e,t,n){var r,a,s,l,c,u,f=0,d=!1,p=!1,h=!0;if("function"!=typeof e)throw new ze(o);function g(t){var n=r,o=a;return r=a=i,f=t,l=e.apply(o,n)}function v(e){var n=e-u;return u===i||n>=t||n<0||p&&e-f>=s}function m(){var e=Ca();if(v(e))return b(e);c=Eo(m,function(e){var n=t-(e-u);return p?mn(n,s-(e-f)):n}(e))}function b(e){return c=i,h&&r?g(e):(r=a=i,l)}function y(){var e=Ca(),n=v(e);if(r=arguments,a=this,u=e,n){if(c===i)return function(e){return f=e,c=Eo(m,t),d?g(e):l}(u);if(p)return yi(c),c=Eo(m,t),g(u)}return c===i&&(c=Eo(m,t)),l}return t=gs(t)||0,Qa(n)&&(d=!!n.leading,s=(p="maxWait"in n)?vn(gs(n.maxWait)||0,t):s,h="trailing"in n?!!n.trailing:h),y.cancel=function(){c!==i&&yi(c),f=0,r=u=a=c=i},y.flush=function(){return c===i?l:b(Ca())},y}var Ra=Vr(function(e,t){return lr(e,1,t)}),Ia=Vr(function(e,t,n){return lr(e,gs(t)||0,n)});function Pa(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new ze(o);var n=function(){var r=arguments,i=t?t.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=e.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(Pa.Cache||Zn),n}function Ta(e){if("function"!=typeof e)throw new ze(o);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}Pa.Cache=Zn;var Ba=mi(function(e,t){var n=(t=1==t.length&&$a(t[0])?Rt(t[0],Kt(oo())):Rt(gr(t,1),Kt(oo()))).length;return Vr(function(r){for(var i=-1,o=mn(r.length,n);++i<o;)r[i]=t[i].call(this,r[i]);return kt(e,this,r)})}),La=Vr(function(e,t){var n=sn(t,io(La));return qi(e,l,i,t,n)}),Fa=Vr(function(e,t){var n=sn(t,io(Fa));return qi(e,64,i,t,n)}),Na=Qi(function(e,t){return qi(e,256,i,i,i,t)});function Ma(e,t){return e===t||e!=e&&t!=t}var Da=$i(jr),Wa=$i(function(e,t){return e>=t}),Ua=Or(function(){return arguments}())?Or:function(e){return es(e)&&Pe.call(e,"callee")&&!Ge.call(e,"callee")},$a=r.isArray,Ha=mt?Kt(mt):function(e){return es(e)&&kr(e)==R};function Za(e){return null!=e&&Ja(e.length)&&!Ya(e)}function Ga(e){return es(e)&&Za(e)}var Va=vt||gl,qa=bt?Kt(bt):function(e){return es(e)&&kr(e)==b};function Ka(e){if(!es(e))return!1;var t=kr(e);return t==y||"[object DOMException]"==t||"string"==typeof e.message&&"string"==typeof e.name&&!rs(e)}function Ya(e){if(!Qa(e))return!1;var t=kr(e);return t==w||t==_||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Xa(e){return"number"==typeof e&&e==ps(e)}function Ja(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=f}function Qa(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function es(e){return null!=e&&"object"==typeof e}var ts=yt?Kt(yt):function(e){return es(e)&&fo(e)==x};function ns(e){return"number"==typeof e||es(e)&&kr(e)==k}function rs(e){if(!es(e)||kr(e)!=j)return!1;var t=He(e);if(null===t)return!0;var n=Pe.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&Ie.call(n)==Fe}var is=wt?Kt(wt):function(e){return es(e)&&kr(e)==S},os=_t?Kt(_t):function(e){return es(e)&&fo(e)==z};function as(e){return"string"==typeof e||!$a(e)&&es(e)&&kr(e)==E}function ss(e){return"symbol"==typeof e||es(e)&&kr(e)==O}var ls=xt?Kt(xt):function(e){return es(e)&&Ja(e.length)&&!!it[kr(e)]},cs=$i(Br),us=$i(function(e,t){return e<=t});function fs(e){if(!e)return[];if(Za(e))return as(e)?fn(e):Si(e);if(Ke&&e[Ke])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Ke]());var t=fo(e);return(t==x?on:t==z?ln:Ms)(e)}function ds(e){return e?(e=gs(e))===u||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function ps(e){var t=ds(e),n=t%1;return t==t?n?t-n:t:0}function hs(e){return e?or(ps(e),0,p):0}function gs(e){if("number"==typeof e)return e;if(ss(e))return d;if(Qa(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Qa(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=qt(e);var n=he.test(e);return n||ve.test(e)?lt(e.slice(2),n?2:8):pe.test(e)?d:+e}function vs(e){return zi(e,Rs(e))}function ms(e){return null==e?"":ai(e)}var bs=Oi(function(e,t){if(_o(t)||Za(t))zi(t,As(t),e);else for(var n in t)Pe.call(t,n)&&Qn(e,n,t[n])}),ys=Oi(function(e,t){zi(t,Rs(t),e)}),ws=Oi(function(e,t,n,r){zi(t,Rs(t),e,r)}),_s=Oi(function(e,t,n,r){zi(t,As(t),e,r)}),xs=Qi(ir),ks=Vr(function(e,t){e=je(e);var n=-1,r=t.length,o=r>2?t[2]:i;for(o&&mo(t[0],t[1],o)&&(r=1);++n<r;)for(var a=t[n],s=Rs(a),l=-1,c=s.length;++l<c;){var u=s[l],f=e[u];(f===i||Ma(f,Ae[u])&&!Pe.call(e,u))&&(e[u]=a[u])}return e}),js=Vr(function(e){return e.push(i,Yi),kt(Ps,i,e)});function Cs(e,t,n){var r=null==e?i:_r(e,t);return r===i?n:r}function Ss(e,t){return null!=e&&po(e,t,Sr)}var zs=Ni(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Le.call(t)),e[t]=n},Qs(nl)),Es=Ni(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Le.call(t)),Pe.call(e,t)?e[t].push(n):e[t]=[n]},oo),Os=Vr(Er);function As(e){return Za(e)?qn(e):Tr(e)}function Rs(e){return Za(e)?qn(e,!0):function(e){if(!Qa(e))return function(e){var t=[];if(null!=e)for(var n in je(e))t.push(n);return t}(e);var t=_o(e),n=[];for(var r in e)("constructor"!=r||!t&&Pe.call(e,r))&&n.push(r);return n}(e)}var Is=Oi(function(e,t,n){Mr(e,t,n)}),Ps=Oi(function(e,t,n,r){Mr(e,t,n,r)}),Ts=Qi(function(e,t){var n={};if(null==e)return n;var r=!1;t=Rt(t,function(t){return t=vi(t,e),r||(r=t.length>1),t}),zi(e,to(e),n),r&&(n=ar(n,7,Xi));for(var i=t.length;i--;)li(n,t[i]);return n}),Bs=Qi(function(e,t){return null==e?{}:function(e,t){return Ur(e,t,function(t,n){return Ss(e,n)})}(e,t)});function Ls(e,t){if(null==e)return{};var n=Rt(to(e),function(e){return[e]});return t=oo(t),Ur(e,n,function(e,n){return t(e,n[0])})}var Fs=Vi(As),Ns=Vi(Rs);function Ms(e){return null==e?[]:Yt(e,As(e))}var Ds=Pi(function(e,t,n){return t=t.toLowerCase(),e+(n?Ws(t):t)});function Ws(e){return Ks(ms(e).toLowerCase())}function Us(e){return(e=ms(e))&&e.replace(be,en).replace(Xe,"")}var $s=Pi(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),Hs=Pi(function(e,t,n){return e+(n?" ":"")+t.toLowerCase()}),Zs=Ii("toLowerCase"),Gs=Pi(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}),Vs=Pi(function(e,t,n){return e+(n?" ":"")+Ks(t)}),qs=Pi(function(e,t,n){return e+(n?" ":"")+t.toUpperCase()}),Ks=Ii("toUpperCase");function Ys(e,t,n){return e=ms(e),(t=n?i:t)===i?function(e){return tt.test(e)}(e)?function(e){return e.match(Qe)||[]}(e):function(e){return e.match(le)||[]}(e):e.match(t)||[]}var Xs=Vr(function(e,t){try{return kt(e,i,t)}catch(e){return Ka(e)?e:new _e(e)}}),Js=Qi(function(e,t){return Ct(t,function(t){t=Lo(t),rr(e,t,Ea(e[t],e))}),e});function Qs(e){return function(){return e}}var el=Li(),tl=Li(!0);function nl(e){return e}function rl(e){return Pr("function"==typeof e?e:ar(e,1))}var il=Vr(function(e,t){return function(n){return Er(n,e,t)}}),ol=Vr(function(e,t){return function(n){return Er(e,n,t)}});function al(e,t,n){var r=As(t),i=wr(t,r);null!=n||Qa(t)&&(i.length||!r.length)||(n=t,t=e,e=this,i=wr(t,As(t)));var o=!(Qa(n)&&"chain"in n&&!n.chain),a=Ya(e);return Ct(i,function(n){var r=t[n];e[n]=r,a&&(e.prototype[n]=function(){var t=this.__chain__;if(o||t){var n=e(this.__wrapped__);return(n.__actions__=Si(this.__actions__)).push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,It([this.value()],arguments))})}),e}function sl(){}var ll=Di(Rt),cl=Di(zt),ul=Di(Bt);function fl(e){return bo(e)?$t(Lo(e)):function(e){return function(t){return _r(t,e)}}(e)}var dl=Ui(),pl=Ui(!0);function hl(){return[]}function gl(){return!1}var vl,ml=Mi(function(e,t){return e+t},0),bl=Zi("ceil"),yl=Mi(function(e,t){return e/t},1),wl=Zi("floor"),_l=Mi(function(e,t){return e*t},1),xl=Zi("round"),kl=Mi(function(e,t){return e-t},0);return Nn.after=function(e,t){if("function"!=typeof t)throw new ze(o);return e=ps(e),function(){if(--e<1)return t.apply(this,arguments)}},Nn.ary=Sa,Nn.assign=bs,Nn.assignIn=ys,Nn.assignInWith=ws,Nn.assignWith=_s,Nn.at=xs,Nn.before=za,Nn.bind=Ea,Nn.bindAll=Js,Nn.bindKey=Oa,Nn.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return $a(e)?e:[e]},Nn.chain=fa,Nn.chunk=function(e,t,n){t=(n?mo(e,t,n):t===i)?1:vn(ps(t),0);var o=null==e?0:e.length;if(!o||t<1)return[];for(var a=0,s=0,l=r(dt(o/t));a<o;)l[s++]=ei(e,a,a+=t);return l},Nn.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,i=[];++t<n;){var o=e[t];o&&(i[r++]=o)}return i},Nn.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],i=e;i--;)t[i-1]=arguments[i];return It($a(n)?Si(n):[n],gr(t,1))},Nn.cond=function(e){var t=null==e?0:e.length,n=oo();return e=t?Rt(e,function(e){if("function"!=typeof e[1])throw new ze(o);return[n(e[0]),e[1]]}):[],Vr(function(n){for(var r=-1;++r<t;){var i=e[r];if(kt(i[0],this,n))return kt(i[1],this,n)}})},Nn.conforms=function(e){return function(e){var t=As(e);return function(n){return sr(n,e,t)}}(ar(e,1))},Nn.constant=Qs,Nn.countBy=ha,Nn.create=function(e,t){var n=Mn(e);return null==t?n:nr(n,t)},Nn.curry=function e(t,n,r){var o=qi(t,8,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},Nn.curryRight=function e(t,n,r){var o=qi(t,16,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},Nn.debounce=Aa,Nn.defaults=ks,Nn.defaultsDeep=js,Nn.defer=Ra,Nn.delay=Ia,Nn.difference=Mo,Nn.differenceBy=Do,Nn.differenceWith=Wo,Nn.drop=function(e,t,n){var r=null==e?0:e.length;return r?ei(e,(t=n||t===i?1:ps(t))<0?0:t,r):[]},Nn.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?ei(e,0,(t=r-(t=n||t===i?1:ps(t)))<0?0:t):[]},Nn.dropRightWhile=function(e,t){return e&&e.length?ui(e,oo(t,3),!0,!0):[]},Nn.dropWhile=function(e,t){return e&&e.length?ui(e,oo(t,3),!0):[]},Nn.fill=function(e,t,n,r){var o=null==e?0:e.length;return o?(n&&"number"!=typeof n&&mo(e,t,n)&&(n=0,r=o),function(e,t,n,r){var o=e.length;for((n=ps(n))<0&&(n=-n>o?0:o+n),(r=r===i||r>o?o:ps(r))<0&&(r+=o),r=n>r?0:hs(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},Nn.filter=function(e,t){return($a(e)?Et:hr)(e,oo(t,3))},Nn.flatMap=function(e,t){return gr(xa(e,t),1)},Nn.flatMapDeep=function(e,t){return gr(xa(e,t),u)},Nn.flatMapDepth=function(e,t,n){return n=n===i?1:ps(n),gr(xa(e,t),n)},Nn.flatten=Ho,Nn.flattenDeep=function(e){return null!=e&&e.length?gr(e,u):[]},Nn.flattenDepth=function(e,t){return null!=e&&e.length?gr(e,t=t===i?1:ps(t)):[]},Nn.flip=function(e){return qi(e,512)},Nn.flow=el,Nn.flowRight=tl,Nn.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var i=e[t];r[i[0]]=i[1]}return r},Nn.functions=function(e){return null==e?[]:wr(e,As(e))},Nn.functionsIn=function(e){return null==e?[]:wr(e,Rs(e))},Nn.groupBy=ya,Nn.initial=function(e){return null!=e&&e.length?ei(e,0,-1):[]},Nn.intersection=Go,Nn.intersectionBy=Vo,Nn.intersectionWith=qo,Nn.invert=zs,Nn.invertBy=Es,Nn.invokeMap=wa,Nn.iteratee=rl,Nn.keyBy=_a,Nn.keys=As,Nn.keysIn=Rs,Nn.map=xa,Nn.mapKeys=function(e,t){var n={};return t=oo(t,3),br(e,function(e,r,i){rr(n,t(e,r,i),e)}),n},Nn.mapValues=function(e,t){var n={};return t=oo(t,3),br(e,function(e,r,i){rr(n,r,t(e,r,i))}),n},Nn.matches=function(e){return Fr(ar(e,1))},Nn.matchesProperty=function(e,t){return Nr(e,ar(t,1))},Nn.memoize=Pa,Nn.merge=Is,Nn.mergeWith=Ps,Nn.method=il,Nn.methodOf=ol,Nn.mixin=al,Nn.negate=Ta,Nn.nthArg=function(e){return e=ps(e),Vr(function(t){return Dr(t,e)})},Nn.omit=Ts,Nn.omitBy=function(e,t){return Ls(e,Ta(oo(t)))},Nn.once=function(e){return za(2,e)},Nn.orderBy=function(e,t,n,r){return null==e?[]:($a(t)||(t=null==t?[]:[t]),$a(n=r?i:n)||(n=null==n?[]:[n]),Wr(e,t,n))},Nn.over=ll,Nn.overArgs=Ba,Nn.overEvery=cl,Nn.overSome=ul,Nn.partial=La,Nn.partialRight=Fa,Nn.partition=ka,Nn.pick=Bs,Nn.pickBy=Ls,Nn.property=fl,Nn.propertyOf=function(e){return function(t){return null==e?i:_r(e,t)}},Nn.pull=Yo,Nn.pullAll=Xo,Nn.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?$r(e,t,oo(n,2)):e},Nn.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?$r(e,t,i,n):e},Nn.pullAt=Jo,Nn.range=dl,Nn.rangeRight=pl,Nn.rearg=Na,Nn.reject=function(e,t){return($a(e)?Et:hr)(e,Ta(oo(t,3)))},Nn.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,i=[],o=e.length;for(t=oo(t,3);++r<o;){var a=e[r];t(a,r,e)&&(n.push(a),i.push(r))}return Hr(e,i),n},Nn.rest=function(e,t){if("function"!=typeof e)throw new ze(o);return Vr(e,t=t===i?t:ps(t))},Nn.reverse=Qo,Nn.sampleSize=function(e,t,n){return t=(n?mo(e,t,n):t===i)?1:ps(t),($a(e)?Yn:Kr)(e,t)},Nn.set=function(e,t,n){return null==e?e:Yr(e,t,n)},Nn.setWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:Yr(e,t,n,r)},Nn.shuffle=function(e){return($a(e)?Xn:Qr)(e)},Nn.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&mo(e,t,n)?(t=0,n=r):(t=null==t?0:ps(t),n=n===i?r:ps(n)),ei(e,t,n)):[]},Nn.sortBy=ja,Nn.sortedUniq=function(e){return e&&e.length?ii(e):[]},Nn.sortedUniqBy=function(e,t){return e&&e.length?ii(e,oo(t,2)):[]},Nn.split=function(e,t,n){return n&&"number"!=typeof n&&mo(e,t,n)&&(t=n=i),(n=n===i?p:n>>>0)?(e=ms(e))&&("string"==typeof t||null!=t&&!is(t))&&!(t=ai(t))&&rn(e)?bi(fn(e),0,n):e.split(t,n):[]},Nn.spread=function(e,t){if("function"!=typeof e)throw new ze(o);return t=null==t?0:vn(ps(t),0),Vr(function(n){var r=n[t],i=bi(n,0,t);return r&&It(i,r),kt(e,this,i)})},Nn.tail=function(e){var t=null==e?0:e.length;return t?ei(e,1,t):[]},Nn.take=function(e,t,n){return e&&e.length?ei(e,0,(t=n||t===i?1:ps(t))<0?0:t):[]},Nn.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?ei(e,(t=r-(t=n||t===i?1:ps(t)))<0?0:t,r):[]},Nn.takeRightWhile=function(e,t){return e&&e.length?ui(e,oo(t,3),!1,!0):[]},Nn.takeWhile=function(e,t){return e&&e.length?ui(e,oo(t,3)):[]},Nn.tap=function(e,t){return t(e),e},Nn.throttle=function(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new ze(o);return Qa(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Aa(e,t,{leading:r,maxWait:t,trailing:i})},Nn.thru=da,Nn.toArray=fs,Nn.toPairs=Fs,Nn.toPairsIn=Ns,Nn.toPath=function(e){return $a(e)?Rt(e,Lo):ss(e)?[e]:Si(Bo(ms(e)))},Nn.toPlainObject=vs,Nn.transform=function(e,t,n){var r=$a(e),i=r||Va(e)||ls(e);if(t=oo(t,4),null==n){var o=e&&e.constructor;n=i?r?new o:[]:Qa(e)&&Ya(o)?Mn(He(e)):{}}return(i?Ct:br)(e,function(e,r,i){return t(n,e,r,i)}),n},Nn.unary=function(e){return Sa(e,1)},Nn.union=ea,Nn.unionBy=ta,Nn.unionWith=na,Nn.uniq=function(e){return e&&e.length?si(e):[]},Nn.uniqBy=function(e,t){return e&&e.length?si(e,oo(t,2)):[]},Nn.uniqWith=function(e,t){return t="function"==typeof t?t:i,e&&e.length?si(e,i,t):[]},Nn.unset=function(e,t){return null==e||li(e,t)},Nn.unzip=ra,Nn.unzipWith=ia,Nn.update=function(e,t,n){return null==e?e:ci(e,t,gi(n))},Nn.updateWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:ci(e,t,gi(n),r)},Nn.values=Ms,Nn.valuesIn=function(e){return null==e?[]:Yt(e,Rs(e))},Nn.without=oa,Nn.words=Ys,Nn.wrap=function(e,t){return La(gi(t),e)},Nn.xor=aa,Nn.xorBy=sa,Nn.xorWith=la,Nn.zip=ca,Nn.zipObject=function(e,t){return pi(e||[],t||[],Qn)},Nn.zipObjectDeep=function(e,t){return pi(e||[],t||[],Yr)},Nn.zipWith=ua,Nn.entries=Fs,Nn.entriesIn=Ns,Nn.extend=ys,Nn.extendWith=ws,al(Nn,Nn),Nn.add=ml,Nn.attempt=Xs,Nn.camelCase=Ds,Nn.capitalize=Ws,Nn.ceil=bl,Nn.clamp=function(e,t,n){return n===i&&(n=t,t=i),n!==i&&(n=(n=gs(n))==n?n:0),t!==i&&(t=(t=gs(t))==t?t:0),or(gs(e),t,n)},Nn.clone=function(e){return ar(e,4)},Nn.cloneDeep=function(e){return ar(e,5)},Nn.cloneDeepWith=function(e,t){return ar(e,5,t="function"==typeof t?t:i)},Nn.cloneWith=function(e,t){return ar(e,4,t="function"==typeof t?t:i)},Nn.conformsTo=function(e,t){return null==t||sr(e,t,As(t))},Nn.deburr=Us,Nn.defaultTo=function(e,t){return null==e||e!=e?t:e},Nn.divide=yl,Nn.endsWith=function(e,t,n){e=ms(e),t=ai(t);var r=e.length,o=n=n===i?r:or(ps(n),0,r);return(n-=t.length)>=0&&e.slice(n,o)==t},Nn.eq=Ma,Nn.escape=function(e){return(e=ms(e))&&q.test(e)?e.replace(G,tn):e},Nn.escapeRegExp=function(e){return(e=ms(e))&&ne.test(e)?e.replace(te,"\\$&"):e},Nn.every=function(e,t,n){var r=$a(e)?zt:dr;return n&&mo(e,t,n)&&(t=i),r(e,oo(t,3))},Nn.find=ga,Nn.findIndex=Uo,Nn.findKey=function(e,t){return Ft(e,oo(t,3),br)},Nn.findLast=va,Nn.findLastIndex=$o,Nn.findLastKey=function(e,t){return Ft(e,oo(t,3),yr)},Nn.floor=wl,Nn.forEach=ma,Nn.forEachRight=ba,Nn.forIn=function(e,t){return null==e?e:vr(e,oo(t,3),Rs)},Nn.forInRight=function(e,t){return null==e?e:mr(e,oo(t,3),Rs)},Nn.forOwn=function(e,t){return e&&br(e,oo(t,3))},Nn.forOwnRight=function(e,t){return e&&yr(e,oo(t,3))},Nn.get=Cs,Nn.gt=Da,Nn.gte=Wa,Nn.has=function(e,t){return null!=e&&po(e,t,Cr)},Nn.hasIn=Ss,Nn.head=Zo,Nn.identity=nl,Nn.includes=function(e,t,n,r){e=Za(e)?e:Ms(e),n=n&&!r?ps(n):0;var i=e.length;return n<0&&(n=vn(i+n,0)),as(e)?n<=i&&e.indexOf(t,n)>-1:!!i&&Mt(e,t,n)>-1},Nn.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:ps(n);return i<0&&(i=vn(r+i,0)),Mt(e,t,i)},Nn.inRange=function(e,t,n){return t=ds(t),n===i?(n=t,t=0):n=ds(n),function(e,t,n){return e>=mn(t,n)&&e<vn(t,n)}(e=gs(e),t,n)},Nn.invoke=Os,Nn.isArguments=Ua,Nn.isArray=$a,Nn.isArrayBuffer=Ha,Nn.isArrayLike=Za,Nn.isArrayLikeObject=Ga,Nn.isBoolean=function(e){return!0===e||!1===e||es(e)&&kr(e)==m},Nn.isBuffer=Va,Nn.isDate=qa,Nn.isElement=function(e){return es(e)&&1===e.nodeType&&!rs(e)},Nn.isEmpty=function(e){if(null==e)return!0;if(Za(e)&&($a(e)||"string"==typeof e||"function"==typeof e.splice||Va(e)||ls(e)||Ua(e)))return!e.length;var t=fo(e);if(t==x||t==z)return!e.size;if(_o(e))return!Tr(e).length;for(var n in e)if(Pe.call(e,n))return!1;return!0},Nn.isEqual=function(e,t){return Ar(e,t)},Nn.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:i)?n(e,t):i;return r===i?Ar(e,t,i,n):!!r},Nn.isError=Ka,Nn.isFinite=function(e){return"number"==typeof e&&Lt(e)},Nn.isFunction=Ya,Nn.isInteger=Xa,Nn.isLength=Ja,Nn.isMap=ts,Nn.isMatch=function(e,t){return e===t||Rr(e,t,so(t))},Nn.isMatchWith=function(e,t,n){return n="function"==typeof n?n:i,Rr(e,t,so(t),n)},Nn.isNaN=function(e){return ns(e)&&e!=+e},Nn.isNative=function(e){if(wo(e))throw new _e("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Ir(e)},Nn.isNil=function(e){return null==e},Nn.isNull=function(e){return null===e},Nn.isNumber=ns,Nn.isObject=Qa,Nn.isObjectLike=es,Nn.isPlainObject=rs,Nn.isRegExp=is,Nn.isSafeInteger=function(e){return Xa(e)&&e>=-9007199254740991&&e<=f},Nn.isSet=os,Nn.isString=as,Nn.isSymbol=ss,Nn.isTypedArray=ls,Nn.isUndefined=function(e){return e===i},Nn.isWeakMap=function(e){return es(e)&&fo(e)==A},Nn.isWeakSet=function(e){return es(e)&&"[object WeakSet]"==kr(e)},Nn.join=function(e,t){return null==e?"":Ht.call(e,t)},Nn.kebabCase=$s,Nn.last=Ko,Nn.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r;return n!==i&&(o=(o=ps(n))<0?vn(r+o,0):mn(o,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,o):Nt(e,Wt,o,!0)},Nn.lowerCase=Hs,Nn.lowerFirst=Zs,Nn.lt=cs,Nn.lte=us,Nn.max=function(e){return e&&e.length?pr(e,nl,jr):i},Nn.maxBy=function(e,t){return e&&e.length?pr(e,oo(t,2),jr):i},Nn.mean=function(e){return Ut(e,nl)},Nn.meanBy=function(e,t){return Ut(e,oo(t,2))},Nn.min=function(e){return e&&e.length?pr(e,nl,Br):i},Nn.minBy=function(e,t){return e&&e.length?pr(e,oo(t,2),Br):i},Nn.stubArray=hl,Nn.stubFalse=gl,Nn.stubObject=function(){return{}},Nn.stubString=function(){return""},Nn.stubTrue=function(){return!0},Nn.multiply=_l,Nn.nth=function(e,t){return e&&e.length?Dr(e,ps(t)):i},Nn.noConflict=function(){return ft._===this&&(ft._=Ne),this},Nn.noop=sl,Nn.now=Ca,Nn.pad=function(e,t,n){e=ms(e);var r=(t=ps(t))?un(e):0;if(!t||r>=t)return e;var i=(t-r)/2;return Wi(pt(i),n)+e+Wi(dt(i),n)},Nn.padEnd=function(e,t,n){e=ms(e);var r=(t=ps(t))?un(e):0;return t&&r<t?e+Wi(t-r,n):e},Nn.padStart=function(e,t,n){e=ms(e);var r=(t=ps(t))?un(e):0;return t&&r<t?Wi(t-r,n)+e:e},Nn.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),yn(ms(e).replace(re,""),t||0)},Nn.random=function(e,t,n){if(n&&"boolean"!=typeof n&&mo(e,t,n)&&(t=n=i),n===i&&("boolean"==typeof t?(n=t,t=i):"boolean"==typeof e&&(n=e,e=i)),e===i&&t===i?(e=0,t=1):(e=ds(e),t===i?(t=e,e=0):t=ds(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var o=wn();return mn(e+o*(t-e+st("1e-"+((o+"").length-1))),t)}return Zr(e,t)},Nn.reduce=function(e,t,n){var r=$a(e)?Pt:Zt,i=arguments.length<3;return r(e,oo(t,4),n,i,ur)},Nn.reduceRight=function(e,t,n){var r=$a(e)?Tt:Zt,i=arguments.length<3;return r(e,oo(t,4),n,i,fr)},Nn.repeat=function(e,t,n){return t=(n?mo(e,t,n):t===i)?1:ps(t),Gr(ms(e),t)},Nn.replace=function(){var e=arguments,t=ms(e[0]);return e.length<3?t:t.replace(e[1],e[2])},Nn.result=function(e,t,n){var r=-1,o=(t=vi(t,e)).length;for(o||(o=1,e=i);++r<o;){var a=null==e?i:e[Lo(t[r])];a===i&&(r=o,a=n),e=Ya(a)?a.call(e):a}return e},Nn.round=xl,Nn.runInContext=e,Nn.sample=function(e){return($a(e)?Kn:qr)(e)},Nn.size=function(e){if(null==e)return 0;if(Za(e))return as(e)?un(e):e.length;var t=fo(e);return t==x||t==z?e.size:Tr(e).length},Nn.snakeCase=Gs,Nn.some=function(e,t,n){var r=$a(e)?Bt:ti;return n&&mo(e,t,n)&&(t=i),r(e,oo(t,3))},Nn.sortedIndex=function(e,t){return ni(e,t)},Nn.sortedIndexBy=function(e,t,n){return ri(e,t,oo(n,2))},Nn.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=ni(e,t);if(r<n&&Ma(e[r],t))return r}return-1},Nn.sortedLastIndex=function(e,t){return ni(e,t,!0)},Nn.sortedLastIndexBy=function(e,t,n){return ri(e,t,oo(n,2),!0)},Nn.sortedLastIndexOf=function(e,t){if(null!=e&&e.length){var n=ni(e,t,!0)-1;if(Ma(e[n],t))return n}return-1},Nn.startCase=Vs,Nn.startsWith=function(e,t,n){return e=ms(e),n=null==n?0:or(ps(n),0,e.length),t=ai(t),e.slice(n,n+t.length)==t},Nn.subtract=kl,Nn.sum=function(e){return e&&e.length?Gt(e,nl):0},Nn.sumBy=function(e,t){return e&&e.length?Gt(e,oo(t,2)):0},Nn.template=function(e,t,n){var r=Nn.templateSettings;n&&mo(e,t,n)&&(t=i),e=ms(e),t=ws({},t,r,Ki);var o,a,s=ws({},t.imports,r.imports,Ki),l=As(s),c=Yt(s,l),u=0,f=t.interpolate||ye,d="__p += '",p=Ce((t.escape||ye).source+"|"+f.source+"|"+(f===X?fe:ye).source+"|"+(t.evaluate||ye).source+"|$","g"),h="//# sourceURL="+(Pe.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++rt+"]")+"\n";e.replace(p,function(t,n,r,i,s,l){return r||(r=i),d+=e.slice(u,l).replace(we,nn),n&&(o=!0,d+="' +\n__e("+n+") +\n'"),s&&(a=!0,d+="';\n"+s+";\n__p += '"),r&&(d+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),u=l+t.length,t}),d+="';\n";var g=Pe.call(t,"variable")&&t.variable;if(g){if(ce.test(g))throw new _e("Invalid `variable` option passed into `_.template`")}else d="with (obj) {\n"+d+"\n}\n";d=(a?d.replace(U,""):d).replace($,"$1").replace(H,"$1;"),d="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var v=Xs(function(){return xe(l,h+"return "+d).apply(i,c)});if(v.source=d,Ka(v))throw v;return v},Nn.times=function(e,t){if((e=ps(e))<1||e>f)return[];var n=p,r=mn(e,p);t=oo(t),e-=p;for(var i=Vt(r,t);++n<e;)t(n);return i},Nn.toFinite=ds,Nn.toInteger=ps,Nn.toLength=hs,Nn.toLower=function(e){return ms(e).toLowerCase()},Nn.toNumber=gs,Nn.toSafeInteger=function(e){return e?or(ps(e),-9007199254740991,f):0===e?e:0},Nn.toString=ms,Nn.toUpper=function(e){return ms(e).toUpperCase()},Nn.trim=function(e,t,n){if((e=ms(e))&&(n||t===i))return qt(e);if(!e||!(t=ai(t)))return e;var r=fn(e),o=fn(t);return bi(r,Jt(r,o),Qt(r,o)+1).join("")},Nn.trimEnd=function(e,t,n){if((e=ms(e))&&(n||t===i))return e.slice(0,dn(e)+1);if(!e||!(t=ai(t)))return e;var r=fn(e);return bi(r,0,Qt(r,fn(t))+1).join("")},Nn.trimStart=function(e,t,n){if((e=ms(e))&&(n||t===i))return e.replace(re,"");if(!e||!(t=ai(t)))return e;var r=fn(e);return bi(r,Jt(r,fn(t))).join("")},Nn.truncate=function(e,t){var n=30,r="...";if(Qa(t)){var o="separator"in t?t.separator:o;n="length"in t?ps(t.length):n,r="omission"in t?ai(t.omission):r}var a=(e=ms(e)).length;if(rn(e)){var s=fn(e);a=s.length}if(n>=a)return e;var l=n-un(r);if(l<1)return r;var c=s?bi(s,0,l).join(""):e.slice(0,l);if(o===i)return c+r;if(s&&(l+=c.length-l),is(o)){if(e.slice(l).search(o)){var u,f=c;for(o.global||(o=Ce(o.source,ms(de.exec(o))+"g")),o.lastIndex=0;u=o.exec(f);)var d=u.index;c=c.slice(0,d===i?l:d)}}else if(e.indexOf(ai(o),l)!=l){var p=c.lastIndexOf(o);p>-1&&(c=c.slice(0,p))}return c+r},Nn.unescape=function(e){return(e=ms(e))&&V.test(e)?e.replace(Z,pn):e},Nn.uniqueId=function(e){var t=++Te;return ms(e)+t},Nn.upperCase=qs,Nn.upperFirst=Ks,Nn.each=ma,Nn.eachRight=ba,Nn.first=Zo,al(Nn,(vl={},br(Nn,function(e,t){Pe.call(Nn.prototype,t)||(vl[t]=e)}),vl),{chain:!1}),Nn.VERSION="4.17.21",Ct(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){Nn[e].placeholder=Nn}),Ct(["drop","take"],function(e,t){Un.prototype[e]=function(n){n=n===i?1:vn(ps(n),0);var r=this.__filtered__&&!t?new Un(this):this.clone();return r.__filtered__?r.__takeCount__=mn(n,r.__takeCount__):r.__views__.push({size:mn(n,p),type:e+(r.__dir__<0?"Right":"")}),r},Un.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),Ct(["filter","map","takeWhile"],function(e,t){var n=t+1,r=1==n||3==n;Un.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:oo(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}}),Ct(["head","last"],function(e,t){var n="take"+(t?"Right":"");Un.prototype[e]=function(){return this[n](1).value()[0]}}),Ct(["initial","tail"],function(e,t){var n="drop"+(t?"":"Right");Un.prototype[e]=function(){return this.__filtered__?new Un(this):this[n](1)}}),Un.prototype.compact=function(){return this.filter(nl)},Un.prototype.find=function(e){return this.filter(e).head()},Un.prototype.findLast=function(e){return this.reverse().find(e)},Un.prototype.invokeMap=Vr(function(e,t){return"function"==typeof e?new Un(this):this.map(function(n){return Er(n,e,t)})}),Un.prototype.reject=function(e){return this.filter(Ta(oo(e)))},Un.prototype.slice=function(e,t){e=ps(e);var n=this;return n.__filtered__&&(e>0||t<0)?new Un(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==i&&(n=(t=ps(t))<0?n.dropRight(-t):n.take(t-e)),n)},Un.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Un.prototype.toArray=function(){return this.take(p)},br(Un.prototype,function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),o=Nn[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);o&&(Nn.prototype[t]=function(){var t=this.__wrapped__,s=r?[1]:arguments,l=t instanceof Un,c=s[0],u=l||$a(t),f=function(e){var t=o.apply(Nn,It([e],s));return r&&d?t[0]:t};u&&n&&"function"==typeof c&&1!=c.length&&(l=u=!1);var d=this.__chain__,p=!!this.__actions__.length,h=a&&!d,g=l&&!p;if(!a&&u){t=g?t:new Un(this);var v=e.apply(t,s);return v.__actions__.push({func:da,args:[f],thisArg:i}),new Wn(v,d)}return h&&g?e.apply(this,s):(v=this.thru(f),h?r?v.value()[0]:v.value():v)})}),Ct(["pop","push","shift","sort","splice","unshift"],function(e){var t=Ee[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);Nn.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var i=this.value();return t.apply($a(i)?i:[],e)}return this[n](function(n){return t.apply($a(n)?n:[],e)})}}),br(Un.prototype,function(e,t){var n=Nn[t];if(n){var r=n.name+"";Pe.call(On,r)||(On[r]=[]),On[r].push({name:t,func:n})}}),On[Fi(i,2).name]=[{name:"wrapper",func:i}],Un.prototype.clone=function(){var e=new Un(this.__wrapped__);return e.__actions__=Si(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=Si(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=Si(this.__views__),e},Un.prototype.reverse=function(){if(this.__filtered__){var e=new Un(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},Un.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=$a(e),r=t<0,i=n?e.length:0,o=function(e,t,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":e+=a;break;case"dropRight":t-=a;break;case"take":t=mn(t,e+a);break;case"takeRight":e=vn(e,t-a)}}return{start:e,end:t}}(0,i,this.__views__),a=o.start,s=o.end,l=s-a,c=r?s:a-1,u=this.__iteratees__,f=u.length,d=0,p=mn(l,this.__takeCount__);if(!n||!r&&i==l&&p==l)return fi(e,this.__actions__);var h=[];e:for(;l--&&d<p;){for(var g=-1,v=e[c+=t];++g<f;){var m=u[g],b=m.iteratee,y=m.type,w=b(v);if(2==y)v=w;else if(!w){if(1==y)continue e;break e}}h[d++]=v}return h},Nn.prototype.at=pa,Nn.prototype.chain=function(){return fa(this)},Nn.prototype.commit=function(){return new Wn(this.value(),this.__chain__)},Nn.prototype.next=function(){this.__values__===i&&(this.__values__=fs(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?i:this.__values__[this.__index__++]}},Nn.prototype.plant=function(e){for(var t,n=this;n instanceof Dn;){var r=No(n);r.__index__=0,r.__values__=i,t?o.__wrapped__=r:t=r;var o=r;n=n.__wrapped__}return o.__wrapped__=e,t},Nn.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof Un){var t=e;return this.__actions__.length&&(t=new Un(this)),(t=t.reverse()).__actions__.push({func:da,args:[Qo],thisArg:i}),new Wn(t,this.__chain__)}return this.thru(Qo)},Nn.prototype.toJSON=Nn.prototype.valueOf=Nn.prototype.value=function(){return fi(this.__wrapped__,this.__actions__)},Nn.prototype.first=Nn.prototype.head,Ke&&(Nn.prototype[Ke]=function(){return this}),Nn}();ft._=hn,(r=function(){return hn}.call(t,n,t,e))===i||(e.exports=r)}.call(this)},665:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseLengthAndUnit=r,t.cssValue=function(e){var t=r(e);return"".concat(t.value).concat(t.unit)};var n={cm:!0,mm:!0,in:!0,px:!0,pt:!0,pc:!0,em:!0,ex:!0,ch:!0,rem:!0,vw:!0,vh:!0,vmin:!0,vmax:!0,"%":!0};function r(e){if("number"==typeof e)return{value:e,unit:"px"};var t,r=(e.match(/^[0-9.]*/)||"").toString();t=r.includes(".")?parseFloat(r):parseInt(r,10);var i=(e.match(/[^0-9]*$/)||"").toString();return n[i]?{value:t,unit:i}:(console.warn("React Spinners: ".concat(e," is not a valid css value. Defaulting to ").concat(t,"px.")),{value:t,unit:"px"})}},710:(e,t,n)=>{e.exports=function e(t,n,r){function i(a,s){if(!n[a]){if(!t[a]){if(o)return o(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};t[a][0].call(c.exports,function(e){return i(t[a][1][e]||e)},c,c.exports,e,t,n,r)}return n[a].exports}for(var o=void 0,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t,n){"use strict";var r=e("./utils"),i=e("./support"),o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";n.encode=function(e){for(var t,n,i,a,s,l,c,u=[],f=0,d=e.length,p=d,h="string"!==r.getTypeOf(e);f<e.length;)p=d-f,i=h?(t=e[f++],n=f<d?e[f++]:0,f<d?e[f++]:0):(t=e.charCodeAt(f++),n=f<d?e.charCodeAt(f++):0,f<d?e.charCodeAt(f++):0),a=t>>2,s=(3&t)<<4|n>>4,l=1<p?(15&n)<<2|i>>6:64,c=2<p?63&i:64,u.push(o.charAt(a)+o.charAt(s)+o.charAt(l)+o.charAt(c));return u.join("")},n.decode=function(e){var t,n,r,a,s,l,c=0,u=0,f="data:";if(e.substr(0,5)===f)throw new Error("Invalid base64 input, it looks like a data url.");var d,p=3*(e=e.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(e.charAt(e.length-1)===o.charAt(64)&&p--,e.charAt(e.length-2)===o.charAt(64)&&p--,p%1!=0)throw new Error("Invalid base64 input, bad content length.");for(d=i.uint8array?new Uint8Array(0|p):new Array(0|p);c<e.length;)t=o.indexOf(e.charAt(c++))<<2|(a=o.indexOf(e.charAt(c++)))>>4,n=(15&a)<<4|(s=o.indexOf(e.charAt(c++)))>>2,r=(3&s)<<6|(l=o.indexOf(e.charAt(c++))),d[u++]=t,64!==s&&(d[u++]=n),64!==l&&(d[u++]=r);return d}},{"./support":30,"./utils":32}],2:[function(e,t,n){"use strict";var r=e("./external"),i=e("./stream/DataWorker"),o=e("./stream/Crc32Probe"),a=e("./stream/DataLengthProbe");function s(e,t,n,r,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=n,this.compression=r,this.compressedContent=i}s.prototype={getContentWorker:function(){var e=new i(r.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),t=this;return e.on("end",function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),e},getCompressedWorker:function(){return new i(r.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},s.createWorkerFrom=function(e,t,n){return e.pipe(new o).pipe(new a("uncompressedSize")).pipe(t.compressWorker(n)).pipe(new a("compressedSize")).withStreamInfo("compression",t)},t.exports=s},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,n){"use strict";var r=e("./stream/GenericWorker");n.STORE={magic:"\0\0",compressWorker:function(){return new r("STORE compression")},uncompressWorker:function(){return new r("STORE decompression")}},n.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,n){"use strict";var r=e("./utils"),i=function(){for(var e,t=[],n=0;n<256;n++){e=n;for(var r=0;r<8;r++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==r.getTypeOf(e)?function(e,t,n){var r=i,o=0+n;e^=-1;for(var a=0;a<o;a++)e=e>>>8^r[255&(e^t[a])];return-1^e}(0|t,e,e.length):function(e,t,n){var r=i,o=0+n;e^=-1;for(var a=0;a<o;a++)e=e>>>8^r[255&(e^t.charCodeAt(a))];return-1^e}(0|t,e,e.length):0}},{"./utils":32}],5:[function(e,t,n){"use strict";n.base64=!1,n.binary=!1,n.dir=!1,n.createFolders=!0,n.date=null,n.compression=null,n.compressionOptions=null,n.comment=null,n.unixPermissions=null,n.dosPermissions=null},{}],6:[function(e,t,n){"use strict";var r;r="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:r}},{lie:37}],7:[function(e,t,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=e("pako"),o=e("./utils"),a=e("./stream/GenericWorker"),s=r?"uint8array":"array";function l(e,t){a.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}n.magic="\b\0",o.inherits(l,a),l.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(o.transformTo(s,e.data),!1)},l.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},l.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},l.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},n.compressWorker=function(e){return new l("Deflate",e)},n.uncompressWorker=function(){return new l("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,n){"use strict";function r(e,t){var n,r="";for(n=0;n<t;n++)r+=String.fromCharCode(255&e),e>>>=8;return r}function i(e,t,n,i,a,u){var f,d,p=e.file,h=e.compression,g=u!==s.utf8encode,v=o.transformTo("string",u(p.name)),m=o.transformTo("string",s.utf8encode(p.name)),b=p.comment,y=o.transformTo("string",u(b)),w=o.transformTo("string",s.utf8encode(b)),_=m.length!==p.name.length,x=w.length!==b.length,k="",j="",C="",S=p.dir,z=p.date,E={crc32:0,compressedSize:0,uncompressedSize:0};t&&!n||(E.crc32=e.crc32,E.compressedSize=e.compressedSize,E.uncompressedSize=e.uncompressedSize);var O=0;t&&(O|=8),g||!_&&!x||(O|=2048);var A=0,R=0;S&&(A|=16),"UNIX"===a?(R=798,A|=function(e,t){var n=e;return e||(n=t?16893:33204),(65535&n)<<16}(p.unixPermissions,S)):(R=20,A|=function(e){return 63&(e||0)}(p.dosPermissions)),f=z.getUTCHours(),f<<=6,f|=z.getUTCMinutes(),f<<=5,f|=z.getUTCSeconds()/2,d=z.getUTCFullYear()-1980,d<<=4,d|=z.getUTCMonth()+1,d<<=5,d|=z.getUTCDate(),_&&(j=r(1,1)+r(l(v),4)+m,k+="up"+r(j.length,2)+j),x&&(C=r(1,1)+r(l(y),4)+w,k+="uc"+r(C.length,2)+C);var I="";return I+="\n\0",I+=r(O,2),I+=h.magic,I+=r(f,2),I+=r(d,2),I+=r(E.crc32,4),I+=r(E.compressedSize,4),I+=r(E.uncompressedSize,4),I+=r(v.length,2),I+=r(k.length,2),{fileRecord:c.LOCAL_FILE_HEADER+I+v+k,dirRecord:c.CENTRAL_FILE_HEADER+r(R,2)+I+r(y.length,2)+"\0\0\0\0"+r(A,4)+r(i,4)+v+k+y}}var o=e("../utils"),a=e("../stream/GenericWorker"),s=e("../utf8"),l=e("../crc32"),c=e("../signature");function u(e,t,n,r){a.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=n,this.encodeFileName=r,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}o.inherits(u,a),u.prototype.push=function(e){var t=e.meta.percent||0,n=this.entriesCount,r=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,a.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:n?(t+100*(n-r-1))/n:100}}))},u.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var n=i(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:n.fileRecord,meta:{percent:0}})}else this.accumulate=!0},u.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,n=i(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(n.dirRecord),t)this.push({data:function(e){return c.DATA_DESCRIPTOR+r(e.crc32,4)+r(e.compressedSize,4)+r(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:n.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},u.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var n=this.bytesWritten-e,i=function(e,t,n,i,a){var s=o.transformTo("string",a(i));return c.CENTRAL_DIRECTORY_END+"\0\0\0\0"+r(e,2)+r(e,2)+r(t,4)+r(n,4)+r(s.length,2)+s}(this.dirRecords.length,n,e,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}})},u.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},u.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",function(e){t.processChunk(e)}),e.on("end",function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()}),e.on("error",function(e){t.error(e)}),this},u.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},u.prototype.error=function(e){var t=this._sources;if(!a.prototype.error.call(this,e))return!1;for(var n=0;n<t.length;n++)try{t[n].error(e)}catch(e){}return!0},u.prototype.lock=function(){a.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=u},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,n){"use strict";var r=e("../compressions"),i=e("./ZipFileWorker");n.generateWorker=function(e,t,n){var o=new i(t.streamFiles,n,t.platform,t.encodeFileName),a=0;try{e.forEach(function(e,n){a++;var i=function(e,t){var n=e||t,i=r[n];if(!i)throw new Error(n+" is not a valid compression method !");return i}(n.options.compression,t.compression),s=n.options.compressionOptions||t.compressionOptions||{},l=n.dir,c=n.date;n._compressWorker(i,s).withStreamInfo("file",{name:e,dir:l,date:c,comment:n.comment||"",unixPermissions:n.unixPermissions,dosPermissions:n.dosPermissions}).pipe(o)}),o.entriesCount=a}catch(e){o.error(e)}return o}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,n){"use strict";function r(){if(!(this instanceof r))return new r;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var e=new r;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}}(r.prototype=e("./object")).loadAsync=e("./load"),r.support=e("./support"),r.defaults=e("./defaults"),r.version="3.10.1",r.loadAsync=function(e,t){return(new r).loadAsync(e,t)},r.external=e("./external"),t.exports=r},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,n){"use strict";var r=e("./utils"),i=e("./external"),o=e("./utf8"),a=e("./zipEntries"),s=e("./stream/Crc32Probe"),l=e("./nodejsUtils");function c(e){return new i.Promise(function(t,n){var r=e.decompressed.getContentWorker().pipe(new s);r.on("error",function(e){n(e)}).on("end",function(){r.streamInfo.crc32!==e.decompressed.crc32?n(new Error("Corrupted zip : CRC32 mismatch")):t()}).resume()})}t.exports=function(e,t){var n=this;return t=r.extend(t||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),l.isNode&&l.isStream(e)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):r.prepareContent("the loaded zip file",e,!0,t.optimizedBinaryString,t.base64).then(function(e){var n=new a(t);return n.load(e),n}).then(function(e){var n=[i.Promise.resolve(e)],r=e.files;if(t.checkCRC32)for(var o=0;o<r.length;o++)n.push(c(r[o]));return i.Promise.all(n)}).then(function(e){for(var i=e.shift(),o=i.files,a=0;a<o.length;a++){var s=o[a],l=s.fileNameStr,c=r.resolve(s.fileNameStr);n.file(c,s.decompressed,{binary:!0,optimizedBinaryString:!0,date:s.date,dir:s.dir,comment:s.fileCommentStr.length?s.fileCommentStr:null,unixPermissions:s.unixPermissions,dosPermissions:s.dosPermissions,createFolders:t.createFolders}),s.dir||(n.file(c).unsafeOriginalName=l)}return i.zipComment.length&&(n.comment=i.zipComment),n})}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,n){"use strict";var r=e("../utils"),i=e("../stream/GenericWorker");function o(e,t){i.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t)}r.inherits(o,i),o.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",function(e){t.push({data:e,meta:{percent:0}})}).on("error",function(e){t.isPaused?this.generatedError=e:t.error(e)}).on("end",function(){t.isPaused?t._upstreamEnded=!0:t.end()})},o.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},o.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=o},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,n){"use strict";var r=e("readable-stream").Readable;function i(e,t,n){r.call(this,t),this._helper=e;var i=this;e.on("data",function(e,t){i.push(e)||i._helper.pause(),n&&n(t)}).on("error",function(e){i.emit("error",e)}).on("end",function(){i.push(null)})}e("../utils").inherits(i,r),i.prototype._read=function(){this._helper.resume()},t.exports=i},{"../utils":32,"readable-stream":16}],14:[function(e,t,n){"use strict";t.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}}},{}],15:[function(e,t,n){"use strict";function r(e,t,n){var r,i=o.getTypeOf(t),s=o.extend(n||{},l);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(e=g(e)),s.createFolders&&(r=h(e))&&v.call(this,r,!0);var f="string"===i&&!1===s.binary&&!1===s.base64;n&&void 0!==n.binary||(s.binary=!f),(t instanceof c&&0===t.uncompressedSize||s.dir||!t||0===t.length)&&(s.base64=!1,s.binary=!0,t="",s.compression="STORE",i="string");var m;m=t instanceof c||t instanceof a?t:d.isNode&&d.isStream(t)?new p(e,t):o.prepareContent(e,t,s.binary,s.optimizedBinaryString,s.base64);var b=new u(e,m,s);this.files[e]=b}var i=e("./utf8"),o=e("./utils"),a=e("./stream/GenericWorker"),s=e("./stream/StreamHelper"),l=e("./defaults"),c=e("./compressedObject"),u=e("./zipObject"),f=e("./generate"),d=e("./nodejsUtils"),p=e("./nodejs/NodejsStreamInputAdapter"),h=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""},g=function(e){return"/"!==e.slice(-1)&&(e+="/"),e},v=function(e,t){return t=void 0!==t?t:l.createFolders,e=g(e),this.files[e]||r.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function m(e){return"[object RegExp]"===Object.prototype.toString.call(e)}var b={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,n,r;for(t in this.files)r=this.files[t],(n=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(n,r)},filter:function(e){var t=[];return this.forEach(function(n,r){e(n,r)&&t.push(r)}),t},file:function(e,t,n){if(1!==arguments.length)return e=this.root+e,r.call(this,e,t,n),this;if(m(e)){var i=e;return this.filter(function(e,t){return!t.dir&&i.test(e)})}var o=this.files[this.root+e];return o&&!o.dir?o:null},folder:function(e){if(!e)return this;if(m(e))return this.filter(function(t,n){return n.dir&&e.test(t)});var t=this.root+e,n=v.call(this,t),r=this.clone();return r.root=n.name,r},remove:function(e){e=this.root+e;var t=this.files[e];if(t||("/"!==e.slice(-1)&&(e+="/"),t=this.files[e]),t&&!t.dir)delete this.files[e];else for(var n=this.filter(function(t,n){return n.name.slice(0,e.length)===e}),r=0;r<n.length;r++)delete this.files[n[r].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,n={};try{if((n=o.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=n.type.toLowerCase(),n.compression=n.compression.toUpperCase(),"binarystring"===n.type&&(n.type="string"),!n.type)throw new Error("No output type specified.");o.checkSupport(n.type),"darwin"!==n.platform&&"freebsd"!==n.platform&&"linux"!==n.platform&&"sunos"!==n.platform||(n.platform="UNIX"),"win32"===n.platform&&(n.platform="DOS");var r=n.comment||this.comment||"";t=f.generateWorker(this,n,r)}catch(e){(t=new a("error")).error(e)}return new s(t,n.type||"string",n.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=b},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,n){"use strict";t.exports=e("stream")},{stream:void 0}],17:[function(e,t,n){"use strict";var r=e("./DataReader");function i(e){r.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e("../utils").inherits(i,r),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),n=e.charCodeAt(1),r=e.charCodeAt(2),i=e.charCodeAt(3),o=this.length-4;0<=o;--o)if(this.data[o]===t&&this.data[o+1]===n&&this.data[o+2]===r&&this.data[o+3]===i)return o-this.zero;return-1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),n=e.charCodeAt(1),r=e.charCodeAt(2),i=e.charCodeAt(3),o=this.readData(4);return t===o[0]&&n===o[1]&&r===o[2]&&i===o[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],18:[function(e,t,n){"use strict";var r=e("../utils");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(){},readInt:function(e){var t,n=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)n=(n<<8)+this.byteAt(t);return this.index+=e,n},readString:function(e){return r.transformTo("string",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i},{"../utils":32}],19:[function(e,t,n){"use strict";var r=e("./Uint8ArrayReader");function i(e){r.call(this,e)}e("../utils").inherits(i,r),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,n){"use strict";var r=e("./DataReader");function i(e){r.call(this,e)}e("../utils").inherits(i,r),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],21:[function(e,t,n){"use strict";var r=e("./ArrayReader");function i(e){r.call(this,e)}e("../utils").inherits(i,r),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,n){"use strict";var r=e("../utils"),i=e("../support"),o=e("./ArrayReader"),a=e("./StringReader"),s=e("./NodeBufferReader"),l=e("./Uint8ArrayReader");t.exports=function(e){var t=r.getTypeOf(e);return r.checkSupport(t),"string"!==t||i.uint8array?"nodebuffer"===t?new s(e):i.uint8array?new l(r.transformTo("uint8array",e)):new o(r.transformTo("array",e)):new a(e)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,n){"use strict";n.LOCAL_FILE_HEADER="PK",n.CENTRAL_FILE_HEADER="PK",n.CENTRAL_DIRECTORY_END="PK",n.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",n.ZIP64_CENTRAL_DIRECTORY_END="PK",n.DATA_DESCRIPTOR="PK\b"},{}],24:[function(e,t,n){"use strict";var r=e("./GenericWorker"),i=e("../utils");function o(e){r.call(this,"ConvertWorker to "+e),this.destType=e}i.inherits(o,r),o.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta})},t.exports=o},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,n){"use strict";var r=e("./GenericWorker"),i=e("../crc32");function o(){r.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(o,r),o.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=o},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,n){"use strict";var r=e("../utils"),i=e("./GenericWorker");function o(e){i.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0)}r.inherits(o,i),o.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}i.prototype.processChunk.call(this,e)},t.exports=o},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,n){"use strict";var r=e("../utils"),i=e("./GenericWorker");function o(e){i.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then(function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=r.getTypeOf(e),t.isPaused||t._tickAndRepeat()},function(e){t.error(e)})}r.inherits(o,i),o.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},o.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,r.delay(this._tickAndRepeat,[],this)),!0)},o.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(r.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},o.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=o},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,n){"use strict";function r(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}r.prototype={push:function(e){this.emit("data",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit("error",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var n=0;n<this._listeners[e].length;n++)this._listeners[e][n].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",function(e){t.processChunk(e)}),e.on("end",function(){t.end()}),e.on("error",function(e){t.error(e)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=r},{}],29:[function(e,t,n){"use strict";var r=e("../utils"),i=e("./ConvertWorker"),o=e("./GenericWorker"),a=e("../base64"),s=e("../support"),l=e("../external"),c=null;if(s.nodestream)try{c=e("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function u(e,t,n){var a=t;switch(t){case"blob":case"arraybuffer":a="uint8array";break;case"base64":a="string"}try{this._internalType=a,this._outputType=t,this._mimeType=n,r.checkSupport(a),this._worker=e.pipe(new i(a)),e.lock()}catch(e){this._worker=new o("error"),this._worker.error(e)}}u.prototype={accumulate:function(e){return function(e,t){return new l.Promise(function(n,i){var o=[],s=e._internalType,l=e._outputType,c=e._mimeType;e.on("data",function(e,n){o.push(e),t&&t(n)}).on("error",function(e){o=[],i(e)}).on("end",function(){try{var e=function(e,t,n){switch(e){case"blob":return r.newBlob(r.transformTo("arraybuffer",t),n);case"base64":return a.encode(t);default:return r.transformTo(e,t)}}(l,function(e,t){var n,r=0,i=null,o=0;for(n=0;n<t.length;n++)o+=t[n].length;switch(e){case"string":return t.join("");case"array":return Array.prototype.concat.apply([],t);case"uint8array":for(i=new Uint8Array(o),n=0;n<t.length;n++)i.set(t[n],r),r+=t[n].length;return i;case"nodebuffer":return Buffer.concat(t);default:throw new Error("concat : unsupported type '"+e+"'")}}(s,o),c);n(e)}catch(e){i(e)}o=[]}).resume()})}(this,e)},on:function(e,t){var n=this;return"data"===e?this._worker.on(e,function(e){t.call(n,e.data,e.meta)}):this._worker.on(e,function(){r.delay(t,arguments,n)}),this},resume:function(){return r.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(r.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new c(this,{objectMode:"nodebuffer"!==this._outputType},e)}},t.exports=u},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,n){"use strict";if(n.base64=!0,n.array=!0,n.string=!0,n.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,n.nodebuffer="undefined"!=typeof Buffer,n.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)n.blob=!1;else{var r=new ArrayBuffer(0);try{n.blob=0===new Blob([r],{type:"application/zip"}).size}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(r),n.blob=0===i.getBlob("application/zip").size}catch(e){n.blob=!1}}}try{n.nodestream=!!e("readable-stream").Readable}catch(e){n.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,n){"use strict";for(var r=e("./utils"),i=e("./support"),o=e("./nodejsUtils"),a=e("./stream/GenericWorker"),s=new Array(256),l=0;l<256;l++)s[l]=252<=l?6:248<=l?5:240<=l?4:224<=l?3:192<=l?2:1;function c(){a.call(this,"utf-8 decode"),this.leftOver=null}function u(){a.call(this,"utf-8 encode")}s[254]=s[254]=1,n.utf8encode=function(e){return i.nodebuffer?o.newBufferFrom(e,"utf-8"):function(e){var t,n,r,o,a,s=e.length,l=0;for(o=0;o<s;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<s&&56320==(64512&(r=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(r-56320),o++),l+=n<128?1:n<2048?2:n<65536?3:4;for(t=i.uint8array?new Uint8Array(l):new Array(l),o=a=0;a<l;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<s&&56320==(64512&(r=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(r-56320),o++),n<128?t[a++]=n:(n<2048?t[a++]=192|n>>>6:(n<65536?t[a++]=224|n>>>12:(t[a++]=240|n>>>18,t[a++]=128|n>>>12&63),t[a++]=128|n>>>6&63),t[a++]=128|63&n);return t}(e)},n.utf8decode=function(e){return i.nodebuffer?r.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,n,i,o,a=e.length,l=new Array(2*a);for(t=n=0;t<a;)if((i=e[t++])<128)l[n++]=i;else if(4<(o=s[i]))l[n++]=65533,t+=o-1;else{for(i&=2===o?31:3===o?15:7;1<o&&t<a;)i=i<<6|63&e[t++],o--;1<o?l[n++]=65533:i<65536?l[n++]=i:(i-=65536,l[n++]=55296|i>>10&1023,l[n++]=56320|1023&i)}return l.length!==n&&(l.subarray?l=l.subarray(0,n):l.length=n),r.applyFromCharCode(l)}(e=r.transformTo(i.uint8array?"uint8array":"array",e))},r.inherits(c,a),c.prototype.processChunk=function(e){var t=r.transformTo(i.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(i.uint8array){var o=t;(t=new Uint8Array(o.length+this.leftOver.length)).set(this.leftOver,0),t.set(o,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var a=function(e,t){var n;for((t=t||e.length)>e.length&&(t=e.length),n=t-1;0<=n&&128==(192&e[n]);)n--;return n<0||0===n?t:n+s[e[n]]>t?n:t}(t),l=t;a!==t.length&&(i.uint8array?(l=t.subarray(0,a),this.leftOver=t.subarray(a,t.length)):(l=t.slice(0,a),this.leftOver=t.slice(a,t.length))),this.push({data:n.utf8decode(l),meta:e.meta})},c.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:n.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},n.Utf8DecodeWorker=c,r.inherits(u,a),u.prototype.processChunk=function(e){this.push({data:n.utf8encode(e.data),meta:e.meta})},n.Utf8EncodeWorker=u},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,n){"use strict";var r=e("./support"),i=e("./base64"),o=e("./nodejsUtils"),a=e("./external");function s(e){return e}function l(e,t){for(var n=0;n<e.length;++n)t[n]=255&e.charCodeAt(n);return t}e("setimmediate"),n.newBlob=function(e,t){n.checkSupport("blob");try{return new Blob([e],{type:t})}catch(n){try{var r=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return r.append(e),r.getBlob(t)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var c={stringifyByChunk:function(e,t,n){var r=[],i=0,o=e.length;if(o<=n)return String.fromCharCode.apply(null,e);for(;i<o;)"array"===t||"nodebuffer"===t?r.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+n,o)))):r.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+n,o)))),i+=n;return r.join("")},stringifyByChar:function(e){for(var t="",n=0;n<e.length;n++)t+=String.fromCharCode(e[n]);return t},applyCanBeUsed:{uint8array:function(){try{return r.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return r.nodebuffer&&1===String.fromCharCode.apply(null,o.allocBuffer(1)).length}catch(e){return!1}}()}};function u(e){var t=65536,r=n.getTypeOf(e),i=!0;if("uint8array"===r?i=c.applyCanBeUsed.uint8array:"nodebuffer"===r&&(i=c.applyCanBeUsed.nodebuffer),i)for(;1<t;)try{return c.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2)}return c.stringifyByChar(e)}function f(e,t){for(var n=0;n<e.length;n++)t[n]=e[n];return t}n.applyFromCharCode=u;var d={};d.string={string:s,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return d.string.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:function(e){return l(e,o.allocBuffer(e.length))}},d.array={string:u,array:s,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return o.newBufferFrom(e)}},d.arraybuffer={string:function(e){return u(new Uint8Array(e))},array:function(e){return f(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:s,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return o.newBufferFrom(new Uint8Array(e))}},d.uint8array={string:u,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:s,nodebuffer:function(e){return o.newBufferFrom(e)}},d.nodebuffer={string:u,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return d.nodebuffer.uint8array(e).buffer},uint8array:function(e){return f(e,new Uint8Array(e.length))},nodebuffer:s},n.transformTo=function(e,t){if(t=t||"",!e)return t;n.checkSupport(e);var r=n.getTypeOf(t);return d[r][e](t)},n.resolve=function(e){for(var t=e.split("/"),n=[],r=0;r<t.length;r++){var i=t[r];"."===i||""===i&&0!==r&&r!==t.length-1||(".."===i?n.pop():n.push(i))}return n.join("/")},n.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":r.nodebuffer&&o.isBuffer(e)?"nodebuffer":r.uint8array&&e instanceof Uint8Array?"uint8array":r.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},n.checkSupport=function(e){if(!r[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},n.MAX_VALUE_16BITS=65535,n.MAX_VALUE_32BITS=-1,n.pretty=function(e){var t,n,r="";for(n=0;n<(e||"").length;n++)r+="\\x"+((t=e.charCodeAt(n))<16?"0":"")+t.toString(16).toUpperCase();return r},n.delay=function(e,t,n){setImmediate(function(){e.apply(n||null,t||[])})},n.inherits=function(e,t){function n(){}n.prototype=t.prototype,e.prototype=new n},n.extend=function(){var e,t,n={};for(e=0;e<arguments.length;e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],t)&&void 0===n[t]&&(n[t]=arguments[e][t]);return n},n.prepareContent=function(e,t,o,s,c){return a.Promise.resolve(t).then(function(e){return r.blob&&(e instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(e)))&&"undefined"!=typeof FileReader?new a.Promise(function(t,n){var r=new FileReader;r.onload=function(e){t(e.target.result)},r.onerror=function(e){n(e.target.error)},r.readAsArrayBuffer(e)}):e}).then(function(t){var u=n.getTypeOf(t);return u?("arraybuffer"===u?t=n.transformTo("uint8array",t):"string"===u&&(c?t=i.decode(t):o&&!0!==s&&(t=function(e){return l(e,r.uint8array?new Uint8Array(e.length):new Array(e.length))}(t))),t):a.Promise.reject(new Error("Can't read the data of '"+e+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(e,t,n){"use strict";var r=e("./reader/readerFor"),i=e("./utils"),o=e("./signature"),a=e("./zipEntry"),s=e("./support");function l(e){this.files=[],this.loadOptions=e}l.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(t)+", expected "+i.pretty(e)+")")}},isSignature:function(e,t){var n=this.reader.index;this.reader.setIndex(e);var r=this.reader.readString(4)===t;return this.reader.setIndex(n),r},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=s.uint8array?"uint8array":"array",n=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(n)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,n,r=this.zip64EndOfCentralSize-44;0<r;)e=this.reader.readInt(2),t=this.reader.readInt(4),n=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:n}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(o.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(o.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(o.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,o.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(e);var t=e;if(this.checkSignature(o.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,o.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var n=this.centralDirOffset+this.centralDirSize;this.zip64&&(n+=20,n+=12+this.zip64EndOfCentralSize);var r=t-n;if(0<r)this.isSignature(t,o.CENTRAL_FILE_HEADER)||(this.reader.zero=r);else if(r<0)throw new Error("Corrupted zip: missing "+Math.abs(r)+" bytes.")},prepareReader:function(e){this.reader=r(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=l},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(e,t,n){"use strict";var r=e("./reader/readerFor"),i=e("./utils"),o=e("./compressedObject"),a=e("./crc32"),s=e("./utf8"),l=e("./compressions"),c=e("./support");function u(e,t){this.options=e,this.loadOptions=t}u.prototype={isEncrypted:function(){return!(1&~this.bitFlag)},useUTF8:function(){return!(2048&~this.bitFlag)},readLocalPart:function(e){var t,n;if(e.skip(22),this.fileNameLength=e.readInt(2),n=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(n),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in l)if(Object.prototype.hasOwnProperty.call(l,t)&&l[t].magic===e)return l[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+i.pretty(this.compressionMethod)+" unknown (inner file : "+i.transformTo("string",this.fileName)+")");this.decompressed=new o(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=r(this.extraFields[1].value);this.uncompressedSize===i.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===i.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===i.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===i.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(e){var t,n,r,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),n=e.readInt(2),r=e.readData(n),this.extraFields[t]={id:t,length:n,value:r};e.setIndex(i)},handleUTF8:function(){var e=c.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=s.utf8decode(this.fileName),this.fileCommentStr=s.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var n=i.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(n)}var r=this.findExtraFieldUnicodeComment();if(null!==r)this.fileCommentStr=r;else{var o=i.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(o)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=r(e.value);return 1!==t.readInt(1)||a(this.fileName)!==t.readInt(4)?null:s.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=r(e.value);return 1!==t.readInt(1)||a(this.fileComment)!==t.readInt(4)?null:s.utf8decode(t.readData(e.length-5))}return null}},t.exports=u},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,n){"use strict";function r(e,t,n){this.name=e,this.dir=n.dir,this.date=n.date,this.comment=n.comment,this.unixPermissions=n.unixPermissions,this.dosPermissions=n.dosPermissions,this._data=t,this._dataBinary=n.binary,this.options={compression:n.compression,compressionOptions:n.compressionOptions}}var i=e("./stream/StreamHelper"),o=e("./stream/DataWorker"),a=e("./utf8"),s=e("./compressedObject"),l=e("./stream/GenericWorker");r.prototype={internalStream:function(e){var t=null,n="string";try{if(!e)throw new Error("No output type specified.");var r="string"===(n=e.toLowerCase())||"text"===n;"binarystring"!==n&&"text"!==n||(n="string"),t=this._decompressWorker();var o=!this._dataBinary;o&&!r&&(t=t.pipe(new a.Utf8EncodeWorker)),!o&&r&&(t=t.pipe(new a.Utf8DecodeWorker))}catch(e){(t=new l("error")).error(e)}return new i(t,n,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof s&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var n=this._decompressWorker();return this._dataBinary||(n=n.pipe(new a.Utf8EncodeWorker)),s.createWorkerFrom(n,e,t)},_decompressWorker:function(){return this._data instanceof s?this._data.getContentWorker():this._data instanceof l?this._data:new o(this._data)}};for(var c=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],u=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},f=0;f<c.length;f++)r.prototype[c[f]]=u;t.exports=r},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,t,r){(function(e){"use strict";var n,r,i=e.MutationObserver||e.WebKitMutationObserver;if(i){var o=0,a=new i(u),s=e.document.createTextNode("");a.observe(s,{characterData:!0}),n=function(){s.data=o=++o%2}}else if(e.setImmediate||void 0===e.MessageChannel)n="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){u(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(u,0)};else{var l=new e.MessageChannel;l.port1.onmessage=u,n=function(){l.port2.postMessage(0)}}var c=[];function u(){var e,t;r=!0;for(var n=c.length;n;){for(t=c,c=[],e=-1;++e<n;)t[e]();n=c.length}r=!1}t.exports=function(e){1!==c.push(e)||r||n()}}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(e,t,n){"use strict";var r=e("immediate");function i(){}var o={},a=["REJECTED"],s=["FULFILLED"],l=["PENDING"];function c(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=l,this.queue=[],this.outcome=void 0,e!==i&&p(this,e)}function u(e,t,n){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function f(e,t,n){r(function(){var r;try{r=t(n)}catch(r){return o.reject(e,r)}r===e?o.reject(e,new TypeError("Cannot resolve promise with itself")):o.resolve(e,r)})}function d(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function p(e,t){var n=!1;function r(t){n||(n=!0,o.reject(e,t))}function i(t){n||(n=!0,o.resolve(e,t))}var a=h(function(){t(i,r)});"error"===a.status&&r(a.value)}function h(e,t){var n={};try{n.value=e(t),n.status="success"}catch(e){n.status="error",n.value=e}return n}(t.exports=c).prototype.finally=function(e){if("function"!=typeof e)return this;var t=this.constructor;return this.then(function(n){return t.resolve(e()).then(function(){return n})},function(n){return t.resolve(e()).then(function(){throw n})})},c.prototype.catch=function(e){return this.then(null,e)},c.prototype.then=function(e,t){if("function"!=typeof e&&this.state===s||"function"!=typeof t&&this.state===a)return this;var n=new this.constructor(i);return this.state!==l?f(n,this.state===s?e:t,this.outcome):this.queue.push(new u(n,e,t)),n},u.prototype.callFulfilled=function(e){o.resolve(this.promise,e)},u.prototype.otherCallFulfilled=function(e){f(this.promise,this.onFulfilled,e)},u.prototype.callRejected=function(e){o.reject(this.promise,e)},u.prototype.otherCallRejected=function(e){f(this.promise,this.onRejected,e)},o.resolve=function(e,t){var n=h(d,t);if("error"===n.status)return o.reject(e,n.value);var r=n.value;if(r)p(e,r);else{e.state=s,e.outcome=t;for(var i=-1,a=e.queue.length;++i<a;)e.queue[i].callFulfilled(t)}return e},o.reject=function(e,t){e.state=a,e.outcome=t;for(var n=-1,r=e.queue.length;++n<r;)e.queue[n].callRejected(t);return e},c.resolve=function(e){return e instanceof this?e:o.resolve(new this(i),e)},c.reject=function(e){var t=new this(i);return o.reject(t,e)},c.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var a=new Array(n),s=0,l=-1,c=new this(i);++l<n;)u(e[l],l);return c;function u(e,i){t.resolve(e).then(function(e){a[i]=e,++s!==n||r||(r=!0,o.resolve(c,a))},function(e){r||(r=!0,o.reject(c,e))})}},c.race=function(e){if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,n=!1;if(!t)return this.resolve([]);for(var r,a=-1,s=new this(i);++a<t;)r=e[a],this.resolve(r).then(function(e){n||(n=!0,o.resolve(s,e))},function(e){n||(n=!0,o.reject(s,e))});return s}},{immediate:36}],38:[function(e,t,n){"use strict";var r={};(0,e("./lib/utils/common").assign)(r,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=r},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,n){"use strict";var r=e("./zlib/deflate"),i=e("./utils/common"),o=e("./utils/strings"),a=e("./zlib/messages"),s=e("./zlib/zstream"),l=Object.prototype.toString;function c(e){if(!(this instanceof c))return new c(e);this.options=i.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var n=r.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(0!==n)throw new Error(a[n]);if(t.header&&r.deflateSetHeader(this.strm,t.header),t.dictionary){var u;if(u="string"==typeof t.dictionary?o.string2buf(t.dictionary):"[object ArrayBuffer]"===l.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,0!==(n=r.deflateSetDictionary(this.strm,u)))throw new Error(a[n]);this._dict_set=!0}}function u(e,t){var n=new c(t);if(n.push(e,!0),n.err)throw n.msg||a[n.err];return n.result}c.prototype.push=function(e,t){var n,a,s=this.strm,c=this.options.chunkSize;if(this.ended)return!1;a=t===~~t?t:!0===t?4:0,"string"==typeof e?s.input=o.string2buf(e):"[object ArrayBuffer]"===l.call(e)?s.input=new Uint8Array(e):s.input=e,s.next_in=0,s.avail_in=s.input.length;do{if(0===s.avail_out&&(s.output=new i.Buf8(c),s.next_out=0,s.avail_out=c),1!==(n=r.deflate(s,a))&&0!==n)return this.onEnd(n),!(this.ended=!0);0!==s.avail_out&&(0!==s.avail_in||4!==a&&2!==a)||("string"===this.options.to?this.onData(o.buf2binstring(i.shrinkBuf(s.output,s.next_out))):this.onData(i.shrinkBuf(s.output,s.next_out)))}while((0<s.avail_in||0===s.avail_out)&&1!==n);return 4===a?(n=r.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,0===n):2!==a||(this.onEnd(0),!(s.avail_out=0))},c.prototype.onData=function(e){this.chunks.push(e)},c.prototype.onEnd=function(e){0===e&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},n.Deflate=c,n.deflate=u,n.deflateRaw=function(e,t){return(t=t||{}).raw=!0,u(e,t)},n.gzip=function(e,t){return(t=t||{}).gzip=!0,u(e,t)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,n){"use strict";var r=e("./zlib/inflate"),i=e("./utils/common"),o=e("./utils/strings"),a=e("./zlib/constants"),s=e("./zlib/messages"),l=e("./zlib/zstream"),c=e("./zlib/gzheader"),u=Object.prototype.toString;function f(e){if(!(this instanceof f))return new f(e);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&!(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var n=r.inflateInit2(this.strm,t.windowBits);if(n!==a.Z_OK)throw new Error(s[n]);this.header=new c,r.inflateGetHeader(this.strm,this.header)}function d(e,t){var n=new f(t);if(n.push(e,!0),n.err)throw n.msg||s[n.err];return n.result}f.prototype.push=function(e,t){var n,s,l,c,f,d,p=this.strm,h=this.options.chunkSize,g=this.options.dictionary,v=!1;if(this.ended)return!1;s=t===~~t?t:!0===t?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof e?p.input=o.binstring2buf(e):"[object ArrayBuffer]"===u.call(e)?p.input=new Uint8Array(e):p.input=e,p.next_in=0,p.avail_in=p.input.length;do{if(0===p.avail_out&&(p.output=new i.Buf8(h),p.next_out=0,p.avail_out=h),(n=r.inflate(p,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&g&&(d="string"==typeof g?o.string2buf(g):"[object ArrayBuffer]"===u.call(g)?new Uint8Array(g):g,n=r.inflateSetDictionary(this.strm,d)),n===a.Z_BUF_ERROR&&!0===v&&(n=a.Z_OK,v=!1),n!==a.Z_STREAM_END&&n!==a.Z_OK)return this.onEnd(n),!(this.ended=!0);p.next_out&&(0!==p.avail_out&&n!==a.Z_STREAM_END&&(0!==p.avail_in||s!==a.Z_FINISH&&s!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(l=o.utf8border(p.output,p.next_out),c=p.next_out-l,f=o.buf2string(p.output,l),p.next_out=c,p.avail_out=h-c,c&&i.arraySet(p.output,p.output,l,c,0),this.onData(f)):this.onData(i.shrinkBuf(p.output,p.next_out)))),0===p.avail_in&&0===p.avail_out&&(v=!0)}while((0<p.avail_in||0===p.avail_out)&&n!==a.Z_STREAM_END);return n===a.Z_STREAM_END&&(s=a.Z_FINISH),s===a.Z_FINISH?(n=r.inflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===a.Z_OK):s!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),!(p.avail_out=0))},f.prototype.onData=function(e){this.chunks.push(e)},f.prototype.onEnd=function(e){e===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},n.Inflate=f,n.inflate=d,n.inflateRaw=function(e,t){return(t=t||{}).raw=!0,d(e,t)},n.ungzip=d},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;n.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var n=t.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(var r in n)n.hasOwnProperty(r)&&(e[r]=n[r])}}return e},n.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,n,r,i){if(t.subarray&&e.subarray)e.set(t.subarray(n,n+r),i);else for(var o=0;o<r;o++)e[i+o]=t[n+o]},flattenChunks:function(e){var t,n,r,i,o,a;for(t=r=0,n=e.length;t<n;t++)r+=e[t].length;for(a=new Uint8Array(r),t=i=0,n=e.length;t<n;t++)o=e[t],a.set(o,i),i+=o.length;return a}},o={arraySet:function(e,t,n,r,i){for(var o=0;o<r;o++)e[i+o]=t[n+o]},flattenChunks:function(e){return[].concat.apply([],e)}};n.setTyped=function(e){e?(n.Buf8=Uint8Array,n.Buf16=Uint16Array,n.Buf32=Int32Array,n.assign(n,i)):(n.Buf8=Array,n.Buf16=Array,n.Buf32=Array,n.assign(n,o))},n.setTyped(r)},{}],42:[function(e,t,n){"use strict";var r=e("./common"),i=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){o=!1}for(var a=new r.Buf8(256),s=0;s<256;s++)a[s]=252<=s?6:248<=s?5:240<=s?4:224<=s?3:192<=s?2:1;function l(e,t){if(t<65537&&(e.subarray&&o||!e.subarray&&i))return String.fromCharCode.apply(null,r.shrinkBuf(e,t));for(var n="",a=0;a<t;a++)n+=String.fromCharCode(e[a]);return n}a[254]=a[254]=1,n.string2buf=function(e){var t,n,i,o,a,s=e.length,l=0;for(o=0;o<s;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(i-56320),o++),l+=n<128?1:n<2048?2:n<65536?3:4;for(t=new r.Buf8(l),o=a=0;a<l;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(i-56320),o++),n<128?t[a++]=n:(n<2048?t[a++]=192|n>>>6:(n<65536?t[a++]=224|n>>>12:(t[a++]=240|n>>>18,t[a++]=128|n>>>12&63),t[a++]=128|n>>>6&63),t[a++]=128|63&n);return t},n.buf2binstring=function(e){return l(e,e.length)},n.binstring2buf=function(e){for(var t=new r.Buf8(e.length),n=0,i=t.length;n<i;n++)t[n]=e.charCodeAt(n);return t},n.buf2string=function(e,t){var n,r,i,o,s=t||e.length,c=new Array(2*s);for(n=r=0;n<s;)if((i=e[n++])<128)c[r++]=i;else if(4<(o=a[i]))c[r++]=65533,n+=o-1;else{for(i&=2===o?31:3===o?15:7;1<o&&n<s;)i=i<<6|63&e[n++],o--;1<o?c[r++]=65533:i<65536?c[r++]=i:(i-=65536,c[r++]=55296|i>>10&1023,c[r++]=56320|1023&i)}return l(c,r)},n.utf8border=function(e,t){var n;for((t=t||e.length)>e.length&&(t=e.length),n=t-1;0<=n&&128==(192&e[n]);)n--;return n<0||0===n?t:n+a[e[n]]>t?n:t}},{"./common":41}],43:[function(e,t,n){"use strict";t.exports=function(e,t,n,r){for(var i=65535&e,o=e>>>16&65535,a=0;0!==n;){for(n-=a=2e3<n?2e3:n;o=o+(i=i+t[r++]|0)|0,--a;);i%=65521,o%=65521}return i|o<<16}},{}],44:[function(e,t,n){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,n){"use strict";var r=function(){for(var e,t=[],n=0;n<256;n++){e=n;for(var r=0;r<8;r++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t}();t.exports=function(e,t,n,i){var o=r,a=i+n;e^=-1;for(var s=i;s<a;s++)e=e>>>8^o[255&(e^t[s])];return-1^e}},{}],46:[function(e,t,n){"use strict";var r,i=e("../utils/common"),o=e("./trees"),a=e("./adler32"),s=e("./crc32"),l=e("./messages"),c=-2,u=258,f=262,d=113;function p(e,t){return e.msg=l[t],t}function h(e){return(e<<1)-(4<e?9:0)}function g(e){for(var t=e.length;0<=--t;)e[t]=0}function v(e){var t=e.state,n=t.pending;n>e.avail_out&&(n=e.avail_out),0!==n&&(i.arraySet(e.output,t.pending_buf,t.pending_out,n,e.next_out),e.next_out+=n,t.pending_out+=n,e.total_out+=n,e.avail_out-=n,t.pending-=n,0===t.pending&&(t.pending_out=0))}function m(e,t){o._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,v(e.strm)}function b(e,t){e.pending_buf[e.pending++]=t}function y(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function w(e,t){var n,r,i=e.max_chain_length,o=e.strstart,a=e.prev_length,s=e.nice_match,l=e.strstart>e.w_size-f?e.strstart-(e.w_size-f):0,c=e.window,d=e.w_mask,p=e.prev,h=e.strstart+u,g=c[o+a-1],v=c[o+a];e.prev_length>=e.good_match&&(i>>=2),s>e.lookahead&&(s=e.lookahead);do{if(c[(n=t)+a]===v&&c[n+a-1]===g&&c[n]===c[o]&&c[++n]===c[o+1]){o+=2,n++;do{}while(c[++o]===c[++n]&&c[++o]===c[++n]&&c[++o]===c[++n]&&c[++o]===c[++n]&&c[++o]===c[++n]&&c[++o]===c[++n]&&c[++o]===c[++n]&&c[++o]===c[++n]&&o<h);if(r=u-(h-o),o=h-u,a<r){if(e.match_start=t,s<=(a=r))break;g=c[o+a-1],v=c[o+a]}}}while((t=p[t&d])>l&&0!=--i);return a<=e.lookahead?a:e.lookahead}function _(e){var t,n,r,o,l,c,u,d,p,h,g=e.w_size;do{if(o=e.window_size-e.lookahead-e.strstart,e.strstart>=g+(g-f)){for(i.arraySet(e.window,e.window,g,g,0),e.match_start-=g,e.strstart-=g,e.block_start-=g,t=n=e.hash_size;r=e.head[--t],e.head[t]=g<=r?r-g:0,--n;);for(t=n=g;r=e.prev[--t],e.prev[t]=g<=r?r-g:0,--n;);o+=g}if(0===e.strm.avail_in)break;if(c=e.strm,u=e.window,d=e.strstart+e.lookahead,h=void 0,(p=o)<(h=c.avail_in)&&(h=p),n=0===h?0:(c.avail_in-=h,i.arraySet(u,c.input,c.next_in,h,d),1===c.state.wrap?c.adler=a(c.adler,u,h,d):2===c.state.wrap&&(c.adler=s(c.adler,u,h,d)),c.next_in+=h,c.total_in+=h,h),e.lookahead+=n,e.lookahead+e.insert>=3)for(l=e.strstart-e.insert,e.ins_h=e.window[l],e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+3-1])&e.hash_mask,e.prev[l&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=l,l++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<f&&0!==e.strm.avail_in)}function x(e,t){for(var n,r;;){if(e.lookahead<f){if(_(e),e.lookahead<f&&0===t)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==n&&e.strstart-n<=e.w_size-f&&(e.match_length=w(e,n)),e.match_length>=3)if(r=o._tr_tally(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else r=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(r&&(m(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===t?(m(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(m(e,!1),0===e.strm.avail_out)?1:2}function k(e,t){for(var n,r,i;;){if(e.lookahead<f){if(_(e),e.lookahead<f&&0===t)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==n&&e.prev_length<e.max_lazy_match&&e.strstart-n<=e.w_size-f&&(e.match_length=w(e,n),e.match_length<=5&&(1===e.strategy||3===e.match_length&&4096<e.strstart-e.match_start)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-3,r=o._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=2,e.strstart++,r&&(m(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((r=o._tr_tally(e,0,e.window[e.strstart-1]))&&m(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(r=o._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===t?(m(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(m(e,!1),0===e.strm.avail_out)?1:2}function j(e,t,n,r,i){this.good_length=e,this.max_lazy=t,this.nice_length=n,this.max_chain=r,this.func=i}function C(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(1146),this.dyn_dtree=new i.Buf16(122),this.bl_tree=new i.Buf16(78),g(this.dyn_ltree),g(this.dyn_dtree),g(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(16),this.heap=new i.Buf16(573),g(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(573),g(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function S(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?42:d,e.adler=2===t.wrap?0:1,t.last_flush=0,o._tr_init(t),0):p(e,c)}function z(e){var t=S(e);return 0===t&&function(e){e.window_size=2*e.w_size,g(e.head),e.max_lazy_match=r[e.level].max_lazy,e.good_match=r[e.level].good_length,e.nice_match=r[e.level].nice_length,e.max_chain_length=r[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0}(e.state),t}function E(e,t,n,r,o,a){if(!e)return c;var s=1;if(-1===t&&(t=6),r<0?(s=0,r=-r):15<r&&(s=2,r-=16),o<1||9<o||8!==n||r<8||15<r||t<0||9<t||a<0||4<a)return p(e,c);8===r&&(r=9);var l=new C;return(e.state=l).strm=e,l.wrap=s,l.gzhead=null,l.w_bits=r,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=o+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+3-1)/3),l.window=new i.Buf8(2*l.w_size),l.head=new i.Buf16(l.hash_size),l.prev=new i.Buf16(l.w_size),l.lit_bufsize=1<<o+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new i.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=t,l.strategy=a,l.method=n,z(e)}r=[new j(0,0,0,0,function(e,t){var n=65535;for(n>e.pending_buf_size-5&&(n=e.pending_buf_size-5);;){if(e.lookahead<=1){if(_(e),0===e.lookahead&&0===t)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var r=e.block_start+n;if((0===e.strstart||e.strstart>=r)&&(e.lookahead=e.strstart-r,e.strstart=r,m(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-f&&(m(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(m(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(m(e,!1),e.strm.avail_out),1)}),new j(4,4,8,4,x),new j(4,5,16,8,x),new j(4,6,32,32,x),new j(4,4,16,16,k),new j(8,16,32,32,k),new j(8,16,128,128,k),new j(8,32,128,256,k),new j(32,128,258,1024,k),new j(32,258,258,4096,k)],n.deflateInit=function(e,t){return E(e,t,8,15,8,0)},n.deflateInit2=E,n.deflateReset=z,n.deflateResetKeep=S,n.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?c:(e.state.gzhead=t,0):c},n.deflate=function(e,t){var n,i,a,l;if(!e||!e.state||5<t||t<0)return e?p(e,c):c;if(i=e.state,!e.output||!e.input&&0!==e.avail_in||666===i.status&&4!==t)return p(e,0===e.avail_out?-5:c);if(i.strm=e,n=i.last_flush,i.last_flush=t,42===i.status)if(2===i.wrap)e.adler=0,b(i,31),b(i,139),b(i,8),i.gzhead?(b(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),b(i,255&i.gzhead.time),b(i,i.gzhead.time>>8&255),b(i,i.gzhead.time>>16&255),b(i,i.gzhead.time>>24&255),b(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),b(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(b(i,255&i.gzhead.extra.length),b(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(e.adler=s(e.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(b(i,0),b(i,0),b(i,0),b(i,0),b(i,0),b(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),b(i,3),i.status=d);else{var f=8+(i.w_bits-8<<4)<<8;f|=(2<=i.strategy||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(f|=32),f+=31-f%31,i.status=d,y(i,f),0!==i.strstart&&(y(i,e.adler>>>16),y(i,65535&e.adler)),e.adler=1}if(69===i.status)if(i.gzhead.extra){for(a=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),v(e),a=i.pending,i.pending!==i.pending_buf_size));)b(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),v(e),a=i.pending,i.pending===i.pending_buf_size)){l=1;break}l=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,b(i,l)}while(0!==l);i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),0===l&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),v(e),a=i.pending,i.pending===i.pending_buf_size)){l=1;break}l=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,b(i,l)}while(0!==l);i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),0===l&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&v(e),i.pending+2<=i.pending_buf_size&&(b(i,255&e.adler),b(i,e.adler>>8&255),e.adler=0,i.status=d)):i.status=d),0!==i.pending){if(v(e),0===e.avail_out)return i.last_flush=-1,0}else if(0===e.avail_in&&h(t)<=h(n)&&4!==t)return p(e,-5);if(666===i.status&&0!==e.avail_in)return p(e,-5);if(0!==e.avail_in||0!==i.lookahead||0!==t&&666!==i.status){var w=2===i.strategy?function(e,t){for(var n;;){if(0===e.lookahead&&(_(e),0===e.lookahead)){if(0===t)return 1;break}if(e.match_length=0,n=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,n&&(m(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(m(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(m(e,!1),0===e.strm.avail_out)?1:2}(i,t):3===i.strategy?function(e,t){for(var n,r,i,a,s=e.window;;){if(e.lookahead<=u){if(_(e),e.lookahead<=u&&0===t)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&0<e.strstart&&(r=s[i=e.strstart-1])===s[++i]&&r===s[++i]&&r===s[++i]){a=e.strstart+u;do{}while(r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&i<a);e.match_length=u-(a-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(n=o._tr_tally(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(n=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),n&&(m(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(m(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(m(e,!1),0===e.strm.avail_out)?1:2}(i,t):r[i.level].func(i,t);if(3!==w&&4!==w||(i.status=666),1===w||3===w)return 0===e.avail_out&&(i.last_flush=-1),0;if(2===w&&(1===t?o._tr_align(i):5!==t&&(o._tr_stored_block(i,0,0,!1),3===t&&(g(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),v(e),0===e.avail_out))return i.last_flush=-1,0}return 4!==t?0:i.wrap<=0?1:(2===i.wrap?(b(i,255&e.adler),b(i,e.adler>>8&255),b(i,e.adler>>16&255),b(i,e.adler>>24&255),b(i,255&e.total_in),b(i,e.total_in>>8&255),b(i,e.total_in>>16&255),b(i,e.total_in>>24&255)):(y(i,e.adler>>>16),y(i,65535&e.adler)),v(e),0<i.wrap&&(i.wrap=-i.wrap),0!==i.pending?0:1)},n.deflateEnd=function(e){var t;return e&&e.state?42!==(t=e.state.status)&&69!==t&&73!==t&&91!==t&&103!==t&&t!==d&&666!==t?p(e,c):(e.state=null,t===d?p(e,-3):0):c},n.deflateSetDictionary=function(e,t){var n,r,o,s,l,u,f,d,p=t.length;if(!e||!e.state)return c;if(2===(s=(n=e.state).wrap)||1===s&&42!==n.status||n.lookahead)return c;for(1===s&&(e.adler=a(e.adler,t,p,0)),n.wrap=0,p>=n.w_size&&(0===s&&(g(n.head),n.strstart=0,n.block_start=0,n.insert=0),d=new i.Buf8(n.w_size),i.arraySet(d,t,p-n.w_size,n.w_size,0),t=d,p=n.w_size),l=e.avail_in,u=e.next_in,f=e.input,e.avail_in=p,e.next_in=0,e.input=t,_(n);n.lookahead>=3;){for(r=n.strstart,o=n.lookahead-2;n.ins_h=(n.ins_h<<n.hash_shift^n.window[r+3-1])&n.hash_mask,n.prev[r&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=r,r++,--o;);n.strstart=r,n.lookahead=2,_(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=2,n.match_available=0,e.next_in=u,e.input=f,e.avail_in=l,n.wrap=s,0},n.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,n){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,n){"use strict";t.exports=function(e,t){var n,r,i,o,a,s,l,c,u,f,d,p,h,g,v,m,b,y,w,_,x,k,j,C,S;n=e.state,r=e.next_in,C=e.input,i=r+(e.avail_in-5),o=e.next_out,S=e.output,a=o-(t-e.avail_out),s=o+(e.avail_out-257),l=n.dmax,c=n.wsize,u=n.whave,f=n.wnext,d=n.window,p=n.hold,h=n.bits,g=n.lencode,v=n.distcode,m=(1<<n.lenbits)-1,b=(1<<n.distbits)-1;e:do{h<15&&(p+=C[r++]<<h,h+=8,p+=C[r++]<<h,h+=8),y=g[p&m];t:for(;;){if(p>>>=w=y>>>24,h-=w,0==(w=y>>>16&255))S[o++]=65535&y;else{if(!(16&w)){if(!(64&w)){y=g[(65535&y)+(p&(1<<w)-1)];continue t}if(32&w){n.mode=12;break e}e.msg="invalid literal/length code",n.mode=30;break e}_=65535&y,(w&=15)&&(h<w&&(p+=C[r++]<<h,h+=8),_+=p&(1<<w)-1,p>>>=w,h-=w),h<15&&(p+=C[r++]<<h,h+=8,p+=C[r++]<<h,h+=8),y=v[p&b];n:for(;;){if(p>>>=w=y>>>24,h-=w,!(16&(w=y>>>16&255))){if(!(64&w)){y=v[(65535&y)+(p&(1<<w)-1)];continue n}e.msg="invalid distance code",n.mode=30;break e}if(x=65535&y,h<(w&=15)&&(p+=C[r++]<<h,(h+=8)<w&&(p+=C[r++]<<h,h+=8)),l<(x+=p&(1<<w)-1)){e.msg="invalid distance too far back",n.mode=30;break e}if(p>>>=w,h-=w,(w=o-a)<x){if(u<(w=x-w)&&n.sane){e.msg="invalid distance too far back",n.mode=30;break e}if(j=d,(k=0)===f){if(k+=c-w,w<_){for(_-=w;S[o++]=d[k++],--w;);k=o-x,j=S}}else if(f<w){if(k+=c+f-w,(w-=f)<_){for(_-=w;S[o++]=d[k++],--w;);if(k=0,f<_){for(_-=w=f;S[o++]=d[k++],--w;);k=o-x,j=S}}}else if(k+=f-w,w<_){for(_-=w;S[o++]=d[k++],--w;);k=o-x,j=S}for(;2<_;)S[o++]=j[k++],S[o++]=j[k++],S[o++]=j[k++],_-=3;_&&(S[o++]=j[k++],1<_&&(S[o++]=j[k++]))}else{for(k=o-x;S[o++]=S[k++],S[o++]=S[k++],S[o++]=S[k++],2<(_-=3););_&&(S[o++]=S[k++],1<_&&(S[o++]=S[k++]))}break}}break}}while(r<i&&o<s);r-=_=h>>3,p&=(1<<(h-=_<<3))-1,e.next_in=r,e.next_out=o,e.avail_in=r<i?i-r+5:5-(r-i),e.avail_out=o<s?s-o+257:257-(o-s),n.hold=p,n.bits=h}},{}],49:[function(e,t,n){"use strict";var r=e("../utils/common"),i=e("./adler32"),o=e("./crc32"),a=e("./inffast"),s=e("./inftrees"),l=-2;function c(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function u(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function f(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new r.Buf32(852),t.distcode=t.distdyn=new r.Buf32(592),t.sane=1,t.back=-1,0):l}function d(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,f(e)):l}function p(e,t){var n,r;return e&&e.state?(r=e.state,t<0?(n=0,t=-t):(n=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?l:(null!==r.window&&r.wbits!==t&&(r.window=null),r.wrap=n,r.wbits=t,d(e))):l}function h(e,t){var n,r;return e?(r=new u,(e.state=r).window=null,0!==(n=p(e,t))&&(e.state=null),n):l}var g,v,m=!0;function b(e){if(m){var t;for(g=new r.Buf32(512),v=new r.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(s(1,e.lens,0,288,g,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;s(2,e.lens,0,32,v,0,e.work,{bits:5}),m=!1}e.lencode=g,e.lenbits=9,e.distcode=v,e.distbits=5}function y(e,t,n,i){var o,a=e.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new r.Buf8(a.wsize)),i>=a.wsize?(r.arraySet(a.window,t,n-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):(i<(o=a.wsize-a.wnext)&&(o=i),r.arraySet(a.window,t,n-i,o,a.wnext),(i-=o)?(r.arraySet(a.window,t,n-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=o,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=o))),0}n.inflateReset=d,n.inflateReset2=p,n.inflateResetKeep=f,n.inflateInit=function(e){return h(e,15)},n.inflateInit2=h,n.inflate=function(e,t){var n,u,f,d,p,h,g,v,m,w,_,x,k,j,C,S,z,E,O,A,R,I,P,T,B=0,L=new r.Buf8(4),F=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return l;12===(n=e.state).mode&&(n.mode=13),p=e.next_out,f=e.output,g=e.avail_out,d=e.next_in,u=e.input,h=e.avail_in,v=n.hold,m=n.bits,w=h,_=g,I=0;e:for(;;)switch(n.mode){case 1:if(0===n.wrap){n.mode=13;break}for(;m<16;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}if(2&n.wrap&&35615===v){L[n.check=0]=255&v,L[1]=v>>>8&255,n.check=o(n.check,L,2,0),m=v=0,n.mode=2;break}if(n.flags=0,n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&v)<<8)+(v>>8))%31){e.msg="incorrect header check",n.mode=30;break}if(8!=(15&v)){e.msg="unknown compression method",n.mode=30;break}if(m-=4,R=8+(15&(v>>>=4)),0===n.wbits)n.wbits=R;else if(R>n.wbits){e.msg="invalid window size",n.mode=30;break}n.dmax=1<<R,e.adler=n.check=1,n.mode=512&v?10:12,m=v=0;break;case 2:for(;m<16;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}if(n.flags=v,8!=(255&n.flags)){e.msg="unknown compression method",n.mode=30;break}if(57344&n.flags){e.msg="unknown header flags set",n.mode=30;break}n.head&&(n.head.text=v>>8&1),512&n.flags&&(L[0]=255&v,L[1]=v>>>8&255,n.check=o(n.check,L,2,0)),m=v=0,n.mode=3;case 3:for(;m<32;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}n.head&&(n.head.time=v),512&n.flags&&(L[0]=255&v,L[1]=v>>>8&255,L[2]=v>>>16&255,L[3]=v>>>24&255,n.check=o(n.check,L,4,0)),m=v=0,n.mode=4;case 4:for(;m<16;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}n.head&&(n.head.xflags=255&v,n.head.os=v>>8),512&n.flags&&(L[0]=255&v,L[1]=v>>>8&255,n.check=o(n.check,L,2,0)),m=v=0,n.mode=5;case 5:if(1024&n.flags){for(;m<16;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}n.length=v,n.head&&(n.head.extra_len=v),512&n.flags&&(L[0]=255&v,L[1]=v>>>8&255,n.check=o(n.check,L,2,0)),m=v=0}else n.head&&(n.head.extra=null);n.mode=6;case 6:if(1024&n.flags&&(h<(x=n.length)&&(x=h),x&&(n.head&&(R=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Array(n.head.extra_len)),r.arraySet(n.head.extra,u,d,x,R)),512&n.flags&&(n.check=o(n.check,u,x,d)),h-=x,d+=x,n.length-=x),n.length))break e;n.length=0,n.mode=7;case 7:if(2048&n.flags){if(0===h)break e;for(x=0;R=u[d+x++],n.head&&R&&n.length<65536&&(n.head.name+=String.fromCharCode(R)),R&&x<h;);if(512&n.flags&&(n.check=o(n.check,u,x,d)),h-=x,d+=x,R)break e}else n.head&&(n.head.name=null);n.length=0,n.mode=8;case 8:if(4096&n.flags){if(0===h)break e;for(x=0;R=u[d+x++],n.head&&R&&n.length<65536&&(n.head.comment+=String.fromCharCode(R)),R&&x<h;);if(512&n.flags&&(n.check=o(n.check,u,x,d)),h-=x,d+=x,R)break e}else n.head&&(n.head.comment=null);n.mode=9;case 9:if(512&n.flags){for(;m<16;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}if(v!==(65535&n.check)){e.msg="header crc mismatch",n.mode=30;break}m=v=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),e.adler=n.check=0,n.mode=12;break;case 10:for(;m<32;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}e.adler=n.check=c(v),m=v=0,n.mode=11;case 11:if(0===n.havedict)return e.next_out=p,e.avail_out=g,e.next_in=d,e.avail_in=h,n.hold=v,n.bits=m,2;e.adler=n.check=1,n.mode=12;case 12:if(5===t||6===t)break e;case 13:if(n.last){v>>>=7&m,m-=7&m,n.mode=27;break}for(;m<3;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}switch(n.last=1&v,m-=1,3&(v>>>=1)){case 0:n.mode=14;break;case 1:if(b(n),n.mode=20,6!==t)break;v>>>=2,m-=2;break e;case 2:n.mode=17;break;case 3:e.msg="invalid block type",n.mode=30}v>>>=2,m-=2;break;case 14:for(v>>>=7&m,m-=7&m;m<32;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}if((65535&v)!=(v>>>16^65535)){e.msg="invalid stored block lengths",n.mode=30;break}if(n.length=65535&v,m=v=0,n.mode=15,6===t)break e;case 15:n.mode=16;case 16:if(x=n.length){if(h<x&&(x=h),g<x&&(x=g),0===x)break e;r.arraySet(f,u,d,x,p),h-=x,d+=x,g-=x,p+=x,n.length-=x;break}n.mode=12;break;case 17:for(;m<14;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}if(n.nlen=257+(31&v),v>>>=5,m-=5,n.ndist=1+(31&v),v>>>=5,m-=5,n.ncode=4+(15&v),v>>>=4,m-=4,286<n.nlen||30<n.ndist){e.msg="too many length or distance symbols",n.mode=30;break}n.have=0,n.mode=18;case 18:for(;n.have<n.ncode;){for(;m<3;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}n.lens[F[n.have++]]=7&v,v>>>=3,m-=3}for(;n.have<19;)n.lens[F[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,P={bits:n.lenbits},I=s(0,n.lens,0,19,n.lencode,0,n.work,P),n.lenbits=P.bits,I){e.msg="invalid code lengths set",n.mode=30;break}n.have=0,n.mode=19;case 19:for(;n.have<n.nlen+n.ndist;){for(;S=(B=n.lencode[v&(1<<n.lenbits)-1])>>>16&255,z=65535&B,!((C=B>>>24)<=m);){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}if(z<16)v>>>=C,m-=C,n.lens[n.have++]=z;else{if(16===z){for(T=C+2;m<T;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}if(v>>>=C,m-=C,0===n.have){e.msg="invalid bit length repeat",n.mode=30;break}R=n.lens[n.have-1],x=3+(3&v),v>>>=2,m-=2}else if(17===z){for(T=C+3;m<T;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}m-=C,R=0,x=3+(7&(v>>>=C)),v>>>=3,m-=3}else{for(T=C+7;m<T;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}m-=C,R=0,x=11+(127&(v>>>=C)),v>>>=7,m-=7}if(n.have+x>n.nlen+n.ndist){e.msg="invalid bit length repeat",n.mode=30;break}for(;x--;)n.lens[n.have++]=R}}if(30===n.mode)break;if(0===n.lens[256]){e.msg="invalid code -- missing end-of-block",n.mode=30;break}if(n.lenbits=9,P={bits:n.lenbits},I=s(1,n.lens,0,n.nlen,n.lencode,0,n.work,P),n.lenbits=P.bits,I){e.msg="invalid literal/lengths set",n.mode=30;break}if(n.distbits=6,n.distcode=n.distdyn,P={bits:n.distbits},I=s(2,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,P),n.distbits=P.bits,I){e.msg="invalid distances set",n.mode=30;break}if(n.mode=20,6===t)break e;case 20:n.mode=21;case 21:if(6<=h&&258<=g){e.next_out=p,e.avail_out=g,e.next_in=d,e.avail_in=h,n.hold=v,n.bits=m,a(e,_),p=e.next_out,f=e.output,g=e.avail_out,d=e.next_in,u=e.input,h=e.avail_in,v=n.hold,m=n.bits,12===n.mode&&(n.back=-1);break}for(n.back=0;S=(B=n.lencode[v&(1<<n.lenbits)-1])>>>16&255,z=65535&B,!((C=B>>>24)<=m);){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}if(S&&!(240&S)){for(E=C,O=S,A=z;S=(B=n.lencode[A+((v&(1<<E+O)-1)>>E)])>>>16&255,z=65535&B,!(E+(C=B>>>24)<=m);){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}v>>>=E,m-=E,n.back+=E}if(v>>>=C,m-=C,n.back+=C,n.length=z,0===S){n.mode=26;break}if(32&S){n.back=-1,n.mode=12;break}if(64&S){e.msg="invalid literal/length code",n.mode=30;break}n.extra=15&S,n.mode=22;case 22:if(n.extra){for(T=n.extra;m<T;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}n.length+=v&(1<<n.extra)-1,v>>>=n.extra,m-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=23;case 23:for(;S=(B=n.distcode[v&(1<<n.distbits)-1])>>>16&255,z=65535&B,!((C=B>>>24)<=m);){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}if(!(240&S)){for(E=C,O=S,A=z;S=(B=n.distcode[A+((v&(1<<E+O)-1)>>E)])>>>16&255,z=65535&B,!(E+(C=B>>>24)<=m);){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}v>>>=E,m-=E,n.back+=E}if(v>>>=C,m-=C,n.back+=C,64&S){e.msg="invalid distance code",n.mode=30;break}n.offset=z,n.extra=15&S,n.mode=24;case 24:if(n.extra){for(T=n.extra;m<T;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}n.offset+=v&(1<<n.extra)-1,v>>>=n.extra,m-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){e.msg="invalid distance too far back",n.mode=30;break}n.mode=25;case 25:if(0===g)break e;if(x=_-g,n.offset>x){if((x=n.offset-x)>n.whave&&n.sane){e.msg="invalid distance too far back",n.mode=30;break}k=x>n.wnext?(x-=n.wnext,n.wsize-x):n.wnext-x,x>n.length&&(x=n.length),j=n.window}else j=f,k=p-n.offset,x=n.length;for(g<x&&(x=g),g-=x,n.length-=x;f[p++]=j[k++],--x;);0===n.length&&(n.mode=21);break;case 26:if(0===g)break e;f[p++]=n.length,g--,n.mode=21;break;case 27:if(n.wrap){for(;m<32;){if(0===h)break e;h--,v|=u[d++]<<m,m+=8}if(_-=g,e.total_out+=_,n.total+=_,_&&(e.adler=n.check=n.flags?o(n.check,f,_,p-_):i(n.check,f,_,p-_)),_=g,(n.flags?v:c(v))!==n.check){e.msg="incorrect data check",n.mode=30;break}m=v=0}n.mode=28;case 28:if(n.wrap&&n.flags){for(;m<32;){if(0===h)break e;h--,v+=u[d++]<<m,m+=8}if(v!==(4294967295&n.total)){e.msg="incorrect length check",n.mode=30;break}m=v=0}n.mode=29;case 29:I=1;break e;case 30:I=-3;break e;case 31:return-4;default:return l}return e.next_out=p,e.avail_out=g,e.next_in=d,e.avail_in=h,n.hold=v,n.bits=m,(n.wsize||_!==e.avail_out&&n.mode<30&&(n.mode<27||4!==t))&&y(e,e.output,e.next_out,_-e.avail_out)?(n.mode=31,-4):(w-=e.avail_in,_-=e.avail_out,e.total_in+=w,e.total_out+=_,n.total+=_,n.wrap&&_&&(e.adler=n.check=n.flags?o(n.check,f,_,e.next_out-_):i(n.check,f,_,e.next_out-_)),e.data_type=n.bits+(n.last?64:0)+(12===n.mode?128:0)+(20===n.mode||15===n.mode?256:0),(0==w&&0===_||4===t)&&0===I&&(I=-5),I)},n.inflateEnd=function(e){if(!e||!e.state)return l;var t=e.state;return t.window&&(t.window=null),e.state=null,0},n.inflateGetHeader=function(e,t){var n;return e&&e.state&&2&(n=e.state).wrap?((n.head=t).done=!1,0):l},n.inflateSetDictionary=function(e,t){var n,r=t.length;return e&&e.state?0!==(n=e.state).wrap&&11!==n.mode?l:11===n.mode&&i(1,t,r,0)!==n.check?-3:y(e,t,r,r)?(n.mode=31,-4):(n.havedict=1,0):l},n.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,n){"use strict";var r=e("../utils/common"),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,n,l,c,u,f,d){var p,h,g,v,m,b,y,w,_,x=d.bits,k=0,j=0,C=0,S=0,z=0,E=0,O=0,A=0,R=0,I=0,P=null,T=0,B=new r.Buf16(16),L=new r.Buf16(16),F=null,N=0;for(k=0;k<=15;k++)B[k]=0;for(j=0;j<l;j++)B[t[n+j]]++;for(z=x,S=15;1<=S&&0===B[S];S--);if(S<z&&(z=S),0===S)return c[u++]=20971520,c[u++]=20971520,d.bits=1,0;for(C=1;C<S&&0===B[C];C++);for(z<C&&(z=C),k=A=1;k<=15;k++)if(A<<=1,(A-=B[k])<0)return-1;if(0<A&&(0===e||1!==S))return-1;for(L[1]=0,k=1;k<15;k++)L[k+1]=L[k]+B[k];for(j=0;j<l;j++)0!==t[n+j]&&(f[L[t[n+j]]++]=j);if(b=0===e?(P=F=f,19):1===e?(P=i,T-=257,F=o,N-=257,256):(P=a,F=s,-1),k=C,m=u,O=j=I=0,g=-1,v=(R=1<<(E=z))-1,1===e&&852<R||2===e&&592<R)return 1;for(;;){for(y=k-O,_=f[j]<b?(w=0,f[j]):f[j]>b?(w=F[N+f[j]],P[T+f[j]]):(w=96,0),p=1<<k-O,C=h=1<<E;c[m+(I>>O)+(h-=p)]=y<<24|w<<16|_,0!==h;);for(p=1<<k-1;I&p;)p>>=1;if(0!==p?(I&=p-1,I+=p):I=0,j++,0==--B[k]){if(k===S)break;k=t[n+f[j]]}if(z<k&&(I&v)!==g){for(0===O&&(O=z),m+=C,A=1<<(E=k-O);E+O<S&&!((A-=B[E+O])<=0);)E++,A<<=1;if(R+=1<<E,1===e&&852<R||2===e&&592<R)return 1;c[g=I&v]=z<<24|E<<16|m-u}}return 0!==I&&(c[m+I]=k-O<<24|64<<16),d.bits=z,0}},{"../utils/common":41}],51:[function(e,t,n){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,n){"use strict";var r=e("../utils/common");function i(e){for(var t=e.length;0<=--t;)e[t]=0}var o=256,a=286,s=30,l=15,c=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],u=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],f=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],d=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],p=new Array(576);i(p);var h=new Array(60);i(h);var g=new Array(512);i(g);var v=new Array(256);i(v);var m=new Array(29);i(m);var b,y,w,_=new Array(s);function x(e,t,n,r,i){this.static_tree=e,this.extra_bits=t,this.extra_base=n,this.elems=r,this.max_length=i,this.has_stree=e&&e.length}function k(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function j(e){return e<256?g[e]:g[256+(e>>>7)]}function C(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function S(e,t,n){e.bi_valid>16-n?(e.bi_buf|=t<<e.bi_valid&65535,C(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=n-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=n)}function z(e,t,n){S(e,n[2*t],n[2*t+1])}function E(e,t){for(var n=0;n|=1&e,e>>>=1,n<<=1,0<--t;);return n>>>1}function O(e,t,n){var r,i,o=new Array(16),a=0;for(r=1;r<=l;r++)o[r]=a=a+n[r-1]<<1;for(i=0;i<=t;i++){var s=e[2*i+1];0!==s&&(e[2*i]=E(o[s]++,s))}}function A(e){var t;for(t=0;t<a;t++)e.dyn_ltree[2*t]=0;for(t=0;t<s;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function R(e){8<e.bi_valid?C(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function I(e,t,n,r){var i=2*t,o=2*n;return e[i]<e[o]||e[i]===e[o]&&r[t]<=r[n]}function P(e,t,n){for(var r=e.heap[n],i=n<<1;i<=e.heap_len&&(i<e.heap_len&&I(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!I(t,r,e.heap[i],e.depth));)e.heap[n]=e.heap[i],n=i,i<<=1;e.heap[n]=r}function T(e,t,n){var r,i,a,s,l=0;if(0!==e.last_lit)for(;r=e.pending_buf[e.d_buf+2*l]<<8|e.pending_buf[e.d_buf+2*l+1],i=e.pending_buf[e.l_buf+l],l++,0===r?z(e,i,t):(z(e,(a=v[i])+o+1,t),0!==(s=c[a])&&S(e,i-=m[a],s),z(e,a=j(--r),n),0!==(s=u[a])&&S(e,r-=_[a],s)),l<e.last_lit;);z(e,256,t)}function B(e,t){var n,r,i,o=t.dyn_tree,a=t.stat_desc.static_tree,s=t.stat_desc.has_stree,c=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=573,n=0;n<c;n++)0!==o[2*n]?(e.heap[++e.heap_len]=u=n,e.depth[n]=0):o[2*n+1]=0;for(;e.heap_len<2;)o[2*(i=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[i]=0,e.opt_len--,s&&(e.static_len-=a[2*i+1]);for(t.max_code=u,n=e.heap_len>>1;1<=n;n--)P(e,o,n);for(i=c;n=e.heap[1],e.heap[1]=e.heap[e.heap_len--],P(e,o,1),r=e.heap[1],e.heap[--e.heap_max]=n,e.heap[--e.heap_max]=r,o[2*i]=o[2*n]+o[2*r],e.depth[i]=(e.depth[n]>=e.depth[r]?e.depth[n]:e.depth[r])+1,o[2*n+1]=o[2*r+1]=i,e.heap[1]=i++,P(e,o,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var n,r,i,o,a,s,c=t.dyn_tree,u=t.max_code,f=t.stat_desc.static_tree,d=t.stat_desc.has_stree,p=t.stat_desc.extra_bits,h=t.stat_desc.extra_base,g=t.stat_desc.max_length,v=0;for(o=0;o<=l;o++)e.bl_count[o]=0;for(c[2*e.heap[e.heap_max]+1]=0,n=e.heap_max+1;n<573;n++)g<(o=c[2*c[2*(r=e.heap[n])+1]+1]+1)&&(o=g,v++),c[2*r+1]=o,u<r||(e.bl_count[o]++,a=0,h<=r&&(a=p[r-h]),s=c[2*r],e.opt_len+=s*(o+a),d&&(e.static_len+=s*(f[2*r+1]+a)));if(0!==v){do{for(o=g-1;0===e.bl_count[o];)o--;e.bl_count[o]--,e.bl_count[o+1]+=2,e.bl_count[g]--,v-=2}while(0<v);for(o=g;0!==o;o--)for(r=e.bl_count[o];0!==r;)u<(i=e.heap[--n])||(c[2*i+1]!==o&&(e.opt_len+=(o-c[2*i+1])*c[2*i],c[2*i+1]=o),r--)}}(e,t),O(o,u,e.bl_count)}function L(e,t,n){var r,i,o=-1,a=t[1],s=0,l=7,c=4;for(0===a&&(l=138,c=3),t[2*(n+1)+1]=65535,r=0;r<=n;r++)i=a,a=t[2*(r+1)+1],++s<l&&i===a||(s<c?e.bl_tree[2*i]+=s:0!==i?(i!==o&&e.bl_tree[2*i]++,e.bl_tree[32]++):s<=10?e.bl_tree[34]++:e.bl_tree[36]++,o=i,c=(s=0)===a?(l=138,3):i===a?(l=6,3):(l=7,4))}function F(e,t,n){var r,i,o=-1,a=t[1],s=0,l=7,c=4;for(0===a&&(l=138,c=3),r=0;r<=n;r++)if(i=a,a=t[2*(r+1)+1],!(++s<l&&i===a)){if(s<c)for(;z(e,i,e.bl_tree),0!=--s;);else 0!==i?(i!==o&&(z(e,i,e.bl_tree),s--),z(e,16,e.bl_tree),S(e,s-3,2)):s<=10?(z(e,17,e.bl_tree),S(e,s-3,3)):(z(e,18,e.bl_tree),S(e,s-11,7));o=i,c=(s=0)===a?(l=138,3):i===a?(l=6,3):(l=7,4)}}i(_);var N=!1;function M(e,t,n,i){S(e,0+(i?1:0),3),function(e,t,n){R(e),C(e,n),C(e,~n),r.arraySet(e.pending_buf,e.window,t,n,e.pending),e.pending+=n}(e,t,n)}n._tr_init=function(e){N||(function(){var e,t,n,r,i,o=new Array(16);for(r=n=0;r<28;r++)for(m[r]=n,e=0;e<1<<c[r];e++)v[n++]=r;for(v[n-1]=r,r=i=0;r<16;r++)for(_[r]=i,e=0;e<1<<u[r];e++)g[i++]=r;for(i>>=7;r<s;r++)for(_[r]=i<<7,e=0;e<1<<u[r]-7;e++)g[256+i++]=r;for(t=0;t<=l;t++)o[t]=0;for(e=0;e<=143;)p[2*e+1]=8,e++,o[8]++;for(;e<=255;)p[2*e+1]=9,e++,o[9]++;for(;e<=279;)p[2*e+1]=7,e++,o[7]++;for(;e<=287;)p[2*e+1]=8,e++,o[8]++;for(O(p,287,o),e=0;e<s;e++)h[2*e+1]=5,h[2*e]=E(e,5);b=new x(p,c,257,a,l),y=new x(h,u,0,s,l),w=new x(new Array(0),f,0,19,7)}(),N=!0),e.l_desc=new k(e.dyn_ltree,b),e.d_desc=new k(e.dyn_dtree,y),e.bl_desc=new k(e.bl_tree,w),e.bi_buf=0,e.bi_valid=0,A(e)},n._tr_stored_block=M,n._tr_flush_block=function(e,t,n,r){var i,a,s=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,n=4093624447;for(t=0;t<=31;t++,n>>>=1)if(1&n&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<o;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),B(e,e.l_desc),B(e,e.d_desc),s=function(e){var t;for(L(e,e.dyn_ltree,e.l_desc.max_code),L(e,e.dyn_dtree,e.d_desc.max_code),B(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*d[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(a=e.static_len+3+7>>>3)<=i&&(i=a)):i=a=n+5,n+4<=i&&-1!==t?M(e,t,n,r):4===e.strategy||a===i?(S(e,2+(r?1:0),3),T(e,p,h)):(S(e,4+(r?1:0),3),function(e,t,n,r){var i;for(S(e,t-257,5),S(e,n-1,5),S(e,r-4,4),i=0;i<r;i++)S(e,e.bl_tree[2*d[i]+1],3);F(e,e.dyn_ltree,t-1),F(e,e.dyn_dtree,n-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,s+1),T(e,e.dyn_ltree,e.dyn_dtree)),A(e),r&&R(e)},n._tr_tally=function(e,t,n){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&n,e.last_lit++,0===t?e.dyn_ltree[2*n]++:(e.matches++,t--,e.dyn_ltree[2*(v[n]+o+1)]++,e.dyn_dtree[2*j(t)]++),e.last_lit===e.lit_bufsize-1},n._tr_align=function(e){S(e,2,3),z(e,256,p),function(e){16===e.bi_valid?(C(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},{"../utils/common":41}],53:[function(e,t,n){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){(function(e){!function(e){"use strict";if(!e.setImmediate){var t,n,r,i,o=1,a={},s=!1,l=e.document,c=Object.getPrototypeOf&&Object.getPrototypeOf(e);c=c&&c.setTimeout?c:e,t="[object process]"==={}.toString.call(e.process)?function(e){process.nextTick(function(){f(e)})}:function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?(i="setImmediate$"+Math.random()+"$",e.addEventListener?e.addEventListener("message",d,!1):e.attachEvent("onmessage",d),function(t){e.postMessage(i+t,"*")}):e.MessageChannel?((r=new MessageChannel).port1.onmessage=function(e){f(e.data)},function(e){r.port2.postMessage(e)}):l&&"onreadystatechange"in l.createElement("script")?(n=l.documentElement,function(e){var t=l.createElement("script");t.onreadystatechange=function(){f(e),t.onreadystatechange=null,n.removeChild(t),t=null},n.appendChild(t)}):function(e){setTimeout(f,0,e)},c.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var n=new Array(arguments.length-1),r=0;r<n.length;r++)n[r]=arguments[r+1];var i={callback:e,args:n};return a[o]=i,t(o),o++},c.clearImmediate=u}function u(e){delete a[e]}function f(e){if(s)setTimeout(f,0,e);else{var t=a[e];if(t){s=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(undefined,n)}}(t)}finally{u(e),s=!1}}}}function d(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(i)&&f(+t.data.slice(i.length))}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[10])(10)},833:e=>{e.exports=function(e,t,n,r){var i=n?n.call(r,e,t):void 0;if(void 0!==i)return!!i;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var o=Object.keys(e),a=Object.keys(t);if(o.length!==a.length)return!1;for(var s=Object.prototype.hasOwnProperty.bind(t),l=0;l<o.length;l++){var c=o[l];if(!s(c))return!1;var u=e[c],f=t[c];if(!1===(i=n?n.call(r,u,f,c):void 0)||void 0===i&&u!==f)return!1}return!0}},848:(e,t,n)=>{"use strict";e.exports=n(20)}},r={};function i(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={id:e,loaded:!1,exports:{}};return n[e].call(o.exports,o,o.exports,i),o.loaded=!0,o.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),i.nc=void 0;var o={};return(()=>{"use strict";i.r(o),i.d(o,{ThemeProvider:()=>f,VncViewer:()=>Ir,default:()=>rl,useTheme:()=>u});var e,t,n=i(848),r=i(12),a=i.n(r),s=i(543),l={palette:{text:"#ededf2",darkText:"#000000",placeholderText:"#a6a6bf",success:"#29ac29",warning:"#f9e86d",error:"#802626",background:"#16161d",primary:"#134f53",secondary:"#1d777c",border:{warning:"#ffe100",error:"#772222",info:"#134f53"},progressBar:{background:"#ffe100",color:"#772222"},button:{error:"#9e2e2e",success:"#29ac29",warning:"#ffe100",info:"#134f53",hoverError:"#c63939",hoverSuccess:"#29ac29",hoverWarning:"#ccb400",hoverInfo:"#1d777c"},selectedGradient:"linear-gradient( -45deg, #12494c 0%, #584f42 50%, #909c7b 100%)"},roundness:5,transitionSpeed:200},c=(0,r.createContext)(l),u=function(){var e;return null!==(e=(0,r.useContext)(c))&&void 0!==e?e:l},f=function(e){var t=e.theme,r=e.children;return(0,n.jsx)(c.Provider,{value:(0,s.merge)(l,t),children:r})};(t=e||(e={}))[t.ERROR=0]="ERROR",t[t.ERROR_CRITICAL=1]="ERROR_CRITICAL",t[t.WARNING=2]="WARNING",t[t.INFO=3]="INFO";var d,p=(0,r.createContext)({isOpen:!1,msg:"",type:e.ERROR,error:function(e){},error_critical:function(e){},warning:function(e){},info:function(e){},close:function(){}}),h=function(){return(0,r.useContext)(p)};function g(e,t){document.addEventListener(e,t)}function v(e,t){document.removeEventListener(e,t)}function m(){return m=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},m.apply(null,arguments)}var b,y=function(e){return r.createElement("svg",m({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"currentColor",stroke:"#000",strokeWidth:0},e),d||(d=r.createElement("path",{stroke:"none",d:"M8.2 1a.9.9 0 0 1 .9.9v3.6a.9.9 0 0 1-.9.9H6.4v1.8h4.5v-.9a.9.9 0 0 1 .9-.9h5.4a.9.9 0 0 1 .9.9v3.6a.9.9 0 0 1-.9.9h-5.4a.9.9 0 0 1-.9-.9V10H6.4v5.4h4.5v-.9a.9.9 0 0 1 .9-.9h5.4a.9.9 0 0 1 .9.9v3.6a.9.9 0 0 1-.9.9h-5.4a.9.9 0 0 1-.9-.9v-.9H5.5a.9.9 0 0 1-.9-.9V6.4H2.8a.9.9 0 0 1-.9-.9V1.9a.9.9 0 0 1 .9-.9zm8.1 14.4h-3.6v1.8h3.6zm0-7.2h-3.6V10h3.6zm-9-5.4H3.7v1.8h3.6z"})))};function w(){return w=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},w.apply(null,arguments)}i.p;var _,x=function(e){return r.createElement("svg",w({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"none","aria-hidden":"true"},e),b||(b=r.createElement("path",{stroke:"currentColor",strokeLinecap:"round",strokeWidth:4.5,d:"M9.989 3.25H10M9.989 10H10m-.011 6.75H10"})))};function k(){return k=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},k.apply(null,arguments)}i.p;var j,C=function(e){return r.createElement("svg",k({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"current",viewBox:"0 0 6.4 6.4"},e),_||(_=r.createElement("path",{d:"M5.36 1.94v3.42a.72.72 0 0 1-.72.72H1.76a.72.72 0 0 1-.72-.72V1.04a.72.72 0 0 1 .72-.72h1.98zm-1.08 0a.54.54 0 0 1-.54-.54V.68H1.76a.36.36 0 0 0-.36.36v4.32a.36.36 0 0 0 .36.36h2.88A.36.36 0 0 0 5 5.36V1.94z"})))};function S(){return S=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},S.apply(null,arguments)}i.p;var z,E=function(e){return r.createElement("svg",S({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"none","aria-hidden":"true"},e),j||(j=r.createElement("path",{stroke:"current",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.543,d:"M12.057 5.371H1.771M10 8.971v5.143m-2.572-2.571h5.143m-10.8-8.229v13.371A1.03 1.03 0 0 0 2.8 17.714h14.4a1.03 1.03 0 0 0 1.028-1.029V6.4A1.03 1.03 0 0 0 17.2 5.371h-5.176a1.03 1.03 0 0 1-.79-.37L9.28 2.654a1.03 1.03 0 0 0-.79-.37H2.8A1.03 1.03 0 0 0 1.77 3.314z"})))};function O(){return O=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},O.apply(null,arguments)}i.p;var A,R,I=function(e){return r.createElement("svg",O({xmlns:"http://www.w3.org/2000/svg",width:20,height:20},e),z||(z=r.createElement("path",{d:"M13 13a.75.75 0 0 1-.75.75h-1.5v1.5a.75.75 0 0 1-1.5 0v-1.5h-1.5a.75.75 0 0 1 0-1.5h1.5v-1.5a.75.75 0 0 1 1.5 0v1.5h1.5A.75.75 0 0 1 13 13m4.5-4.136v6.386A3.755 3.755 0 0 1 13.75 19h-7.5a3.755 3.755 0 0 1-3.75-3.75V4.75A3.755 3.755 0 0 1 6.25 1h3.386a5.22 5.22 0 0 1 3.713 1.538l2.613 2.614A5.21 5.21 0 0 1 17.5 8.864zm-5.212-5.266a3.8 3.8 0 0 0-.788-.585V6.25a.75.75 0 0 0 .75.75h3.237a3.7 3.7 0 0 0-.586-.787zM16 8.864c0-.124-.024-.242-.035-.364H12.25A2.25 2.25 0 0 1 10 6.25V2.535c-.121-.01-.24-.035-.364-.035H6.25A2.25 2.25 0 0 0 4 4.75v10.5a2.25 2.25 0 0 0 2.25 2.25h7.5A2.25 2.25 0 0 0 16 15.25z"})))};function P(){return P=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},P.apply(null,arguments)}function T(){return T=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},T.apply(null,arguments)}i.p,i.p;var B,L=function(e){return r.createElement("svg",T({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"current"},e),R||(R=r.createElement("path",{d:"M11.455 1H5.5a2.25 2.25 0 0 0-2.25 2.25v13.5A2.25 2.25 0 0 0 5.5 19h9a2.25 2.25 0 0 0 2.25-2.25V6.295a1.13 1.13 0 0 0-.33-.795l-4.17-4.17a1.13 1.13 0 0 0-.795-.33m.233 3.937v-2.25l3.375 3.375h-2.25a1.125 1.125 0 0 1-1.125-1.125m-3.21 4.664a.563.563 0 1 1 .796.797L7.42 12.25 9.274 14.1a.563.563 0 0 1-.797.797l-2.25-2.25a.563.563 0 0 1 0-.797zm3.046 0 2.25 2.25a.563.563 0 0 1 0 .797l-2.25 2.25a.563.563 0 0 1-.797-.797l1.853-1.852-1.853-1.851a.563.563 0 1 1 .797-.797"})))};function F(){return F=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},F.apply(null,arguments)}i.p;var N,M=function(e){return r.createElement("svg",F({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"none"},e),B||(B=r.createElement("path",{stroke:"current",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"m5.875 1.75 8.25 8.25-8.25 8.25"})))};function D(){return D=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},D.apply(null,arguments)}i.p;var W,U,$,H,Z=function(e){return r.createElement("svg",D({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"current"},e),N||(N=r.createElement("path",{fillRule:"evenodd",d:"M1 3.5a2 2 0 0 1 2-2h5.532a2 2 0 0 1 1.536.72l1.9 2.28H1zm0 3v10a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-10z",clipRule:"evenodd"})))};function G(){return G=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},G.apply(null,arguments)}function V(){return V=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},V.apply(null,arguments)}i.p,i.p;var q,K=function(e){return r.createElement("svg",V({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,viewBox:"0 0 0.938 0.938"},e),U||(U=r.createElement("path",{fill:"current",d:"M.785.187H.676a.176.176 0 0 0-.172-.14h-.07a.176.176 0 0 0-.173.14H.152a.035.035 0 0 0 0 .07h.035v.458A.176.176 0 0 0 .363.89h.211A.176.176 0 0 0 .75.715V.258h.035a.035.035 0 0 0 0-.07M.434.117h.07a.11.11 0 0 1 .1.07h-.27a.11.11 0 0 1 .1-.07M.68.715A.105.105 0 0 1 .574.82h-.21A.105.105 0 0 1 .257.715V.258H.68z"})),$||($=r.createElement("path",{fill:"current",d:"M.398.68A.035.035 0 0 0 .434.645V.434a.035.035 0 0 0-.07 0v.21A.035.035 0 0 0 .397.68"})),H||(H=r.createElement("path",{d:"M.54.68A.035.035 0 0 0 .573.645V.434a.035.035 0 0 0-.07 0v.21A.035.035 0 0 0 .539.68"})))};function Y(){return Y=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Y.apply(null,arguments)}i.p;var X,J=function(e){return r.createElement("svg",Y({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"none","aria-hidden":"true"},e),q||(q=r.createElement("path",{stroke:"current",strokeLinecap:"round",strokeWidth:1.525,d:"m4.509 4.509 10.983 10.983M18.237 10a8.237 8.237 0 1 1-16.475 0 8.237 8.237 0 0 1 16.475 0z"})))};function Q(){return Q=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Q.apply(null,arguments)}i.p;var ee,te,ne=function(e){return r.createElement("svg",Q({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"current"},e),X||(X=r.createElement("path",{fillRule:"evenodd",d:"M2.126 13.937a.56.56 0 0 0 .562.562h13.266l-3.54 3.54a.563.563 0 0 0 .796.796l4.5-4.5a.56.56 0 0 0 0-.796l-4.5-4.5a.563.563 0 0 0-.796.797l3.54 3.539H2.688a.56.56 0 0 0-.562.562m15.749-7.874a.56.56 0 0 1-.563.562H4.046l3.54 3.54a.563.563 0 1 1-.796.796l-4.5-4.5a.56.56 0 0 1 0-.796l4.5-4.5a.563.563 0 1 1 .796.796l-3.54 3.54h13.266a.56.56 0 0 1 .563.562"})))};function re(){return re=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},re.apply(null,arguments)}function ie(){return ie=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ie.apply(null,arguments)}i.p,i.p;var oe,ae=function(e){return r.createElement("svg",ie({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"none"},e),te||(te=r.createElement("path",{stroke:"current",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M18.25 5.875 10 14.125l-8.25-8.25"})))};function se(){return se=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},se.apply(null,arguments)}i.p;var le,ce=function(e){return r.createElement("svg",se({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"current"},e),oe||(oe=r.createElement("path",{fillRule:"evenodd",d:"M2.895 2.421A1.895 1.895 0 0 0 1 4.316v11.368a1.9 1.9 0 0 0 .082.555l2.82-7.52a.95.95 0 0 1 .887-.614h11.368v-.948a1.895 1.895 0 0 0-1.894-1.894H9.969l-1.8-2.16a1.9 1.9 0 0 0-1.455-.682zM5.446 10h-.183l-2.842 7.579h13.737L19 10z",clipRule:"evenodd"})))};function ue(){return ue=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ue.apply(null,arguments)}i.p;var fe,de=function(e){return r.createElement("svg",ue({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"none","aria-hidden":"true"},e),le||(le=r.createElement("path",{stroke:"current",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M15.651 5.65A7.131 7.131 0 0 0 2.971 8.8M16.001 2v4h-4m-7.652 8.35a7.13 7.13 0 0 0 12.68-3.15M4 18v-4h4"})))};function pe(){return pe=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},pe.apply(null,arguments)}i.p;var he,ge=function(e){return r.createElement("svg",pe({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"none","aria-hidden":"true"},e),fe||(fe=r.createElement("path",{stroke:"current",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.504,d:"m8.536 16.035-6.64 2.213 2.214-6.64m4.426 4.427 8.652-8.94a3.131 3.131 0 0 0-2.213-5.343 3.13 3.13 0 0 0-2.214.916l-8.651 8.94m4.426 4.427L4.11 11.609m2.214 2.213 6.427-6.728m-2.175-2.168 4.396 4.386"})))};function ve(){return ve=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ve.apply(null,arguments)}i.p;var me,be,ye,we,_e,xe=function(e){return r.createElement("svg",ve({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,viewBox:"0 0 0.938 0.938"},e),he||(he=r.createElement("path",{d:"M.748.241.626.12A.25.25 0 0 0 .452.047H.293a.176.176 0 0 0-.176.176v.492c0 .097.079.176.176.176h.352A.176.176 0 0 0 .82.715v-.3A.25.25 0 0 0 .748.241m-.05.05q.018.017.029.037H.574A.035.035 0 0 1 .54.293V.14A.2.2 0 0 1 .576.17zM.75.715A.106.106 0 0 1 .645.82H.293A.106.106 0 0 1 .187.715V.223c0-.059.048-.106.106-.106h.159l.017.001v.175c0 .058.047.105.105.105H.75L.75.415zM.6.556a.035.035 0 1 1-.05.05L.503.56v.155a.035.035 0 0 1-.07 0V.56L.388.606a.035.035 0 1 1-.05-.05L.395.499C.435.46.502.46.542.5z"})))};function ke(){return ke=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ke.apply(null,arguments)}i.p,i.p;var je=function(){return je=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},je.apply(this,arguments)};function Ce(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var Se=i(833),ze=i.n(Se),Ee="-ms-",Oe="-moz-",Ae="-webkit-",Re="comm",Ie="rule",Pe="decl",Te="@keyframes",Be=Math.abs,Le=String.fromCharCode,Fe=Object.assign;function Ne(e){return e.trim()}function Me(e,t){return(e=t.exec(e))?e[0]:e}function De(e,t,n){return e.replace(t,n)}function We(e,t,n){return e.indexOf(t,n)}function Ue(e,t){return 0|e.charCodeAt(t)}function $e(e,t,n){return e.slice(t,n)}function He(e){return e.length}function Ze(e){return e.length}function Ge(e,t){return t.push(e),e}function Ve(e,t){return e.filter(function(e){return!Me(e,t)})}var qe=1,Ke=1,Ye=0,Xe=0,Je=0,Qe="";function et(e,t,n,r,i,o,a,s){return{value:e,root:t,parent:n,type:r,props:i,children:o,line:qe,column:Ke,length:a,return:"",siblings:s}}function tt(e,t){return Fe(et("",null,null,"",null,null,0,e.siblings),e,{length:-e.length},t)}function nt(e){for(;e.root;)e=tt(e.root,{children:[e]});Ge(e,e.siblings)}function rt(){return Je=Xe>0?Ue(Qe,--Xe):0,Ke--,10===Je&&(Ke=1,qe--),Je}function it(){return Je=Xe<Ye?Ue(Qe,Xe++):0,Ke++,10===Je&&(Ke=1,qe++),Je}function ot(){return Ue(Qe,Xe)}function at(){return Xe}function st(e,t){return $e(Qe,e,t)}function lt(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function ct(e){return Ne(st(Xe-1,dt(91===e?e+2:40===e?e+1:e)))}function ut(e){for(;(Je=ot())&&Je<33;)it();return lt(e)>2||lt(Je)>3?"":" "}function ft(e,t){for(;--t&&it()&&!(Je<48||Je>102||Je>57&&Je<65||Je>70&&Je<97););return st(e,at()+(t<6&&32==ot()&&32==it()))}function dt(e){for(;it();)switch(Je){case e:return Xe;case 34:case 39:34!==e&&39!==e&&dt(Je);break;case 40:41===e&&dt(e);break;case 92:it()}return Xe}function pt(e,t){for(;it()&&e+Je!==57&&(e+Je!==84||47!==ot()););return"/*"+st(t,Xe-1)+"*"+Le(47===e?e:it())}function ht(e){for(;!lt(ot());)it();return st(e,Xe)}function gt(e,t){for(var n="",r=0;r<e.length;r++)n+=t(e[r],r,e,t)||"";return n}function vt(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case Pe:return e.return=e.return||e.value;case Re:return"";case Te:return e.return=e.value+"{"+gt(e.children,r)+"}";case Ie:if(!He(e.value=e.props.join(",")))return""}return He(n=gt(e.children,r))?e.return=e.value+"{"+n+"}":""}function mt(e,t,n){switch(function(e,t){return 45^Ue(e,0)?(((t<<2^Ue(e,0))<<2^Ue(e,1))<<2^Ue(e,2))<<2^Ue(e,3):0}(e,t)){case 5103:return Ae+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return Ae+e+e;case 4789:return Oe+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return Ae+e+Oe+e+Ee+e+e;case 5936:switch(Ue(e,t+11)){case 114:return Ae+e+Ee+De(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return Ae+e+Ee+De(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return Ae+e+Ee+De(e,/[svh]\w+-[tblr]{2}/,"lr")+e}case 6828:case 4268:case 2903:return Ae+e+Ee+e+e;case 6165:return Ae+e+Ee+"flex-"+e+e;case 5187:return Ae+e+De(e,/(\w+).+(:[^]+)/,Ae+"box-$1$2"+Ee+"flex-$1$2")+e;case 5443:return Ae+e+Ee+"flex-item-"+De(e,/flex-|-self/g,"")+(Me(e,/flex-|baseline/)?"":Ee+"grid-row-"+De(e,/flex-|-self/g,""))+e;case 4675:return Ae+e+Ee+"flex-line-pack"+De(e,/align-content|flex-|-self/g,"")+e;case 5548:return Ae+e+Ee+De(e,"shrink","negative")+e;case 5292:return Ae+e+Ee+De(e,"basis","preferred-size")+e;case 6060:return Ae+"box-"+De(e,"-grow","")+Ae+e+Ee+De(e,"grow","positive")+e;case 4554:return Ae+De(e,/([^-])(transform)/g,"$1"+Ae+"$2")+e;case 6187:return De(De(De(e,/(zoom-|grab)/,Ae+"$1"),/(image-set)/,Ae+"$1"),e,"")+e;case 5495:case 3959:return De(e,/(image-set\([^]*)/,Ae+"$1$`$1");case 4968:return De(De(e,/(.+:)(flex-)?(.*)/,Ae+"box-pack:$3"+Ee+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+Ae+e+e;case 4200:if(!Me(e,/flex-|baseline/))return Ee+"grid-column-align"+$e(e,t)+e;break;case 2592:case 3360:return Ee+De(e,"template-","")+e;case 4384:case 3616:return n&&n.some(function(e,n){return t=n,Me(e.props,/grid-\w+-end/)})?~We(e+(n=n[t].value),"span",0)?e:Ee+De(e,"-start","")+e+Ee+"grid-row-span:"+(~We(n,"span",0)?Me(n,/\d+/):+Me(n,/\d+/)-+Me(e,/\d+/))+";":Ee+De(e,"-start","")+e;case 4896:case 4128:return n&&n.some(function(e){return Me(e.props,/grid-\w+-start/)})?e:Ee+De(De(e,"-end","-span"),"span ","")+e;case 4095:case 3583:case 4068:case 2532:return De(e,/(.+)-inline(.+)/,Ae+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(He(e)-1-t>6)switch(Ue(e,t+1)){case 109:if(45!==Ue(e,t+4))break;case 102:return De(e,/(.+:)(.+)-([^]+)/,"$1"+Ae+"$2-$3$1"+Oe+(108==Ue(e,t+3)?"$3":"$2-$3"))+e;case 115:return~We(e,"stretch",0)?mt(De(e,"stretch","fill-available"),t,n)+e:e}break;case 5152:case 5920:return De(e,/(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/,function(t,n,r,i,o,a,s){return Ee+n+":"+r+s+(i?Ee+n+"-span:"+(o?a:+a-+r)+s:"")+e});case 4949:if(121===Ue(e,t+6))return De(e,":",":"+Ae)+e;break;case 6444:switch(Ue(e,45===Ue(e,14)?18:11)){case 120:return De(e,/(.+:)([^;\s!]+)(;|(\s+)?!.+)?/,"$1"+Ae+(45===Ue(e,14)?"inline-":"")+"box$3$1"+Ae+"$2$3$1"+Ee+"$2box$3")+e;case 100:return De(e,":",":"+Ee)+e}break;case 5719:case 2647:case 2135:case 3927:case 2391:return De(e,"scroll-","scroll-snap-")+e}return e}function bt(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case Pe:return void(e.return=mt(e.value,e.length,n));case Te:return gt([tt(e,{value:De(e.value,"@","@"+Ae)})],r);case Ie:if(e.length)return function(e,t){return e.map(t).join("")}(n=e.props,function(t){switch(Me(t,r=/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":nt(tt(e,{props:[De(t,/:(read-\w+)/,":-moz-$1")]})),nt(tt(e,{props:[t]})),Fe(e,{props:Ve(n,r)});break;case"::placeholder":nt(tt(e,{props:[De(t,/:(plac\w+)/,":"+Ae+"input-$1")]})),nt(tt(e,{props:[De(t,/:(plac\w+)/,":-moz-$1")]})),nt(tt(e,{props:[De(t,/:(plac\w+)/,Ee+"input-$1")]})),nt(tt(e,{props:[t]})),Fe(e,{props:Ve(n,r)})}return""})}}function yt(e){return function(e){return Qe="",e}(wt("",null,null,null,[""],e=function(e){return qe=Ke=1,Ye=He(Qe=e),Xe=0,[]}(e),0,[0],e))}function wt(e,t,n,r,i,o,a,s,l){for(var c=0,u=0,f=a,d=0,p=0,h=0,g=1,v=1,m=1,b=0,y="",w=i,_=o,x=r,k=y;v;)switch(h=b,b=it()){case 40:if(108!=h&&58==Ue(k,f-1)){-1!=We(k+=De(ct(b),"&","&\f"),"&\f",Be(c?s[c-1]:0))&&(m=-1);break}case 34:case 39:case 91:k+=ct(b);break;case 9:case 10:case 13:case 32:k+=ut(h);break;case 92:k+=ft(at()-1,7);continue;case 47:switch(ot()){case 42:case 47:Ge(xt(pt(it(),at()),t,n,l),l);break;default:k+="/"}break;case 123*g:s[c++]=He(k)*m;case 125*g:case 59:case 0:switch(b){case 0:case 125:v=0;case 59+u:-1==m&&(k=De(k,/\f/g,"")),p>0&&He(k)-f&&Ge(p>32?kt(k+";",r,n,f-1,l):kt(De(k," ","")+";",r,n,f-2,l),l);break;case 59:k+=";";default:if(Ge(x=_t(k,t,n,c,u,i,s,y,w=[],_=[],f,o),o),123===b)if(0===u)wt(k,t,x,x,w,o,f,s,_);else switch(99===d&&110===Ue(k,3)?100:d){case 100:case 108:case 109:case 115:wt(e,x,x,r&&Ge(_t(e,x,x,0,0,i,s,y,i,w=[],f,_),_),i,_,f,s,r?w:_);break;default:wt(k,x,x,x,[""],_,0,s,_)}}c=u=p=0,g=m=1,y=k="",f=a;break;case 58:f=1+He(k),p=h;default:if(g<1)if(123==b)--g;else if(125==b&&0==g++&&125==rt())continue;switch(k+=Le(b),b*g){case 38:m=u>0?1:(k+="\f",-1);break;case 44:s[c++]=(He(k)-1)*m,m=1;break;case 64:45===ot()&&(k+=ct(it())),d=ot(),u=f=He(y=k+=ht(at())),b++;break;case 45:45===h&&2==He(k)&&(g=0)}}return o}function _t(e,t,n,r,i,o,a,s,l,c,u,f){for(var d=i-1,p=0===i?o:[""],h=Ze(p),g=0,v=0,m=0;g<r;++g)for(var b=0,y=$e(e,d+1,d=Be(v=a[g])),w=e;b<h;++b)(w=Ne(v>0?p[b]+" "+y:De(y,/&\f/g,p[b])))&&(l[m++]=w);return et(e,t,n,0===i?Ie:s,l,c,u,f)}function xt(e,t,n,r){return et(e,t,n,Re,Le(Je),$e(e,2,-2),0,r)}function kt(e,t,n,r,i){return et(e,t,n,Pe,$e(e,0,r),$e(e,r+1,-1),r,i)}var jt={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},Ct="undefined"!=typeof process&&void 0!==process.env&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",St="active",zt="data-styled-version",Et="6.1.19",Ot="/*!sc*/\n",At="undefined"!=typeof window&&"undefined"!=typeof document,Rt=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY),It=(new Set,Object.freeze([])),Pt=Object.freeze({});var Tt=new Set(["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","track","u","ul","use","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"]),Bt=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,Lt=/(^-|-$)/g;function Ft(e){return e.replace(Bt,"-").replace(Lt,"")}var Nt=/(a)(d)/gi,Mt=function(e){return String.fromCharCode(e+(e>25?39:97))};function Dt(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=Mt(t%52)+n;return(Mt(t%52)+n).replace(Nt,"$1-$2")}var Wt,Ut=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},$t=function(e){return Ut(5381,e)};function Ht(e){return"string"==typeof e&&!0}var Zt="function"==typeof Symbol&&Symbol.for,Gt=Zt?Symbol.for("react.memo"):60115,Vt=Zt?Symbol.for("react.forward_ref"):60112,qt={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},Kt={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Yt={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},Xt=((Wt={})[Vt]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},Wt[Gt]=Yt,Wt);function Jt(e){return("type"in(t=e)&&t.type.$$typeof)===Gt?Yt:"$$typeof"in e?Xt[e.$$typeof]:qt;var t}var Qt=Object.defineProperty,en=Object.getOwnPropertyNames,tn=Object.getOwnPropertySymbols,nn=Object.getOwnPropertyDescriptor,rn=Object.getPrototypeOf,on=Object.prototype;function an(e,t,n){if("string"!=typeof t){if(on){var r=rn(t);r&&r!==on&&an(e,r,n)}var i=en(t);tn&&(i=i.concat(tn(t)));for(var o=Jt(e),a=Jt(t),s=0;s<i.length;++s){var l=i[s];if(!(l in Kt||n&&n[l]||a&&l in a||o&&l in o)){var c=nn(t,l);try{Qt(e,l,c)}catch(e){}}}}return e}function sn(e){return"function"==typeof e}function ln(e){return"object"==typeof e&&"styledComponentId"in e}function cn(e,t){return e&&t?"".concat(e," ").concat(t):e||t||""}function un(e,t){if(0===e.length)return"";for(var n=e[0],r=1;r<e.length;r++)n+=t?t+e[r]:e[r];return n}function fn(e){return null!==e&&"object"==typeof e&&e.constructor.name===Object.name&&!("props"in e&&e.$$typeof)}function dn(e,t,n){if(void 0===n&&(n=!1),!n&&!fn(e)&&!Array.isArray(e))return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)e[r]=dn(e[r],t[r]);else if(fn(t))for(var r in t)e[r]=dn(e[r],t[r]);return e}function pn(e,t){Object.defineProperty(e,"toString",{value:t})}function hn(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#".concat(e," for more information.").concat(t.length>0?" Args: ".concat(t.join(", ")):""))}var gn=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}return e.prototype.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},e.prototype.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,i=r;e>=i;)if((i<<=1)<0)throw hn(16,"".concat(e));this.groupSizes=new Uint32Array(i),this.groupSizes.set(n),this.length=i;for(var o=r;o<i;o++)this.groupSizes[o]=0}for(var a=this.indexOfGroup(e+1),s=(o=0,t.length);o<s;o++)this.tag.insertRule(a,t[o])&&(this.groupSizes[e]++,a++)},e.prototype.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var i=n;i<r;i++)this.tag.deleteRule(n)}},e.prototype.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),i=r+n,o=r;o<i;o++)t+="".concat(this.tag.getRule(o)).concat(Ot);return t},e}(),vn=new Map,mn=new Map,bn=1,yn=function(e){if(vn.has(e))return vn.get(e);for(;mn.has(bn);)bn++;var t=bn++;return vn.set(e,t),mn.set(t,e),t},wn=function(e,t){bn=t+1,vn.set(e,t),mn.set(t,e)},_n="style[".concat(Ct,"][").concat(zt,'="').concat(Et,'"]'),xn=new RegExp("^".concat(Ct,'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)')),kn=function(e,t,n){for(var r,i=n.split(","),o=0,a=i.length;o<a;o++)(r=i[o])&&e.registerName(t,r)},jn=function(e,t){for(var n,r=(null!==(n=t.textContent)&&void 0!==n?n:"").split(Ot),i=[],o=0,a=r.length;o<a;o++){var s=r[o].trim();if(s){var l=s.match(xn);if(l){var c=0|parseInt(l[1],10),u=l[2];0!==c&&(wn(u,c),kn(e,u,l[3]),e.getTag().insertRules(c,i)),i.length=0}else i.push(s)}}},Cn=function(e){for(var t=document.querySelectorAll(_n),n=0,r=t.length;n<r;n++){var i=t[n];i&&i.getAttribute(Ct)!==St&&(jn(e,i),i.parentNode&&i.parentNode.removeChild(i))}};function Sn(){return i.nc}var zn=function(e){var t=document.head,n=e||t,r=document.createElement("style"),i=function(e){var t=Array.from(e.querySelectorAll("style[".concat(Ct,"]")));return t[t.length-1]}(n),o=void 0!==i?i.nextSibling:null;r.setAttribute(Ct,St),r.setAttribute(zt,Et);var a=Sn();return a&&r.setAttribute("nonce",a),n.insertBefore(r,o),r},En=function(){function e(e){this.element=zn(e),this.element.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var i=t[n];if(i.ownerNode===e)return i}throw hn(17)}(this.element),this.length=0}return e.prototype.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},e.prototype.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},e.prototype.getRule=function(e){var t=this.sheet.cssRules[e];return t&&t.cssText?t.cssText:""},e}(),On=function(){function e(e){this.element=zn(e),this.nodes=this.element.childNodes,this.length=0}return e.prototype.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t);return this.element.insertBefore(n,this.nodes[e]||null),this.length++,!0}return!1},e.prototype.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},e.prototype.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),An=function(){function e(e){this.rules=[],this.length=0}return e.prototype.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},e.prototype.deleteRule=function(e){this.rules.splice(e,1),this.length--},e.prototype.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),Rn=At,In={isServer:!At,useCSSOMInjection:!Rt},Pn=function(){function e(e,t,n){void 0===e&&(e=Pt),void 0===t&&(t={});var r=this;this.options=je(je({},In),e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&At&&Rn&&(Rn=!1,Cn(this)),pn(this,function(){return function(e){for(var t=e.getTag(),n=t.length,r="",i=function(n){var i=function(e){return mn.get(e)}(n);if(void 0===i)return"continue";var o=e.names.get(i),a=t.getGroup(n);if(void 0===o||!o.size||0===a.length)return"continue";var s="".concat(Ct,".g").concat(n,'[id="').concat(i,'"]'),l="";void 0!==o&&o.forEach(function(e){e.length>0&&(l+="".concat(e,","))}),r+="".concat(a).concat(s,'{content:"').concat(l,'"}').concat(Ot)},o=0;o<n;o++)i(o);return r}(r)})}return e.registerId=function(e){return yn(e)},e.prototype.rehydrate=function(){!this.server&&At&&Cn(this)},e.prototype.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(je(je({},this.options),t),this.gs,n&&this.names||void 0)},e.prototype.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},e.prototype.getTag=function(){return this.tag||(this.tag=(e=function(e){var t=e.useCSSOMInjection,n=e.target;return e.isServer?new An(n):t?new En(n):new On(n)}(this.options),new gn(e)));var e},e.prototype.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},e.prototype.registerName=function(e,t){if(yn(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},e.prototype.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(yn(e),n)},e.prototype.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},e.prototype.clearRules=function(e){this.getTag().clearGroup(yn(e)),this.clearNames(e)},e.prototype.clearTag=function(){this.tag=void 0},e}(),Tn=/&/g,Bn=/^\s*\/\/.*$/gm;function Ln(e,t){return e.map(function(e){return"rule"===e.type&&(e.value="".concat(t," ").concat(e.value),e.value=e.value.replaceAll(",",",".concat(t," ")),e.props=e.props.map(function(e){return"".concat(t," ").concat(e)})),Array.isArray(e.children)&&"@keyframes"!==e.type&&(e.children=Ln(e.children,t)),e})}function Fn(e){var t,n,r,i=void 0===e?Pt:e,o=i.options,a=void 0===o?Pt:o,s=i.plugins,l=void 0===s?It:s,c=function(e,r,i){return i.startsWith(n)&&i.endsWith(n)&&i.replaceAll(n,"").length>0?".".concat(t):e},u=l.slice();u.push(function(e){e.type===Ie&&e.value.includes("&")&&(e.props[0]=e.props[0].replace(Tn,n).replace(r,c))}),a.prefix&&u.push(bt),u.push(vt);var f=function(e,i,o,s){void 0===i&&(i=""),void 0===o&&(o=""),void 0===s&&(s="&"),t=s,n=i,r=new RegExp("\\".concat(n,"\\b"),"g");var l=e.replace(Bn,""),c=yt(o||i?"".concat(o," ").concat(i," { ").concat(l," }"):l);a.namespace&&(c=Ln(c,a.namespace));var f,d,p,h=[];return gt(c,(f=u.concat((p=function(e){return h.push(e)},function(e){e.root||(e=e.return)&&p(e)})),d=Ze(f),function(e,t,n,r){for(var i="",o=0;o<d;o++)i+=f[o](e,t,n,r)||"";return i})),h};return f.hash=l.length?l.reduce(function(e,t){return t.name||hn(15),Ut(e,t.name)},5381).toString():"",f}var Nn=new Pn,Mn=Fn(),Dn=a().createContext({shouldForwardProp:void 0,styleSheet:Nn,stylis:Mn}),Wn=(Dn.Consumer,a().createContext(void 0));function Un(){return(0,r.useContext)(Dn)}function $n(e){var t=(0,r.useState)(e.stylisPlugins),n=t[0],i=t[1],o=Un().styleSheet,s=(0,r.useMemo)(function(){var t=o;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t},[e.disableCSSOMInjection,e.sheet,e.target,o]),l=(0,r.useMemo)(function(){return Fn({options:{namespace:e.namespace,prefix:e.enableVendorPrefixes},plugins:n})},[e.enableVendorPrefixes,e.namespace,n]);(0,r.useEffect)(function(){ze()(n,e.stylisPlugins)||i(e.stylisPlugins)},[e.stylisPlugins]);var c=(0,r.useMemo)(function(){return{shouldForwardProp:e.shouldForwardProp,styleSheet:s,stylis:l}},[e.shouldForwardProp,s,l]);return a().createElement(Dn.Provider,{value:c},a().createElement(Wn.Provider,{value:l},e.children))}var Hn=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=Mn);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.name=e,this.id="sc-keyframes-".concat(e),this.rules=t,pn(this,function(){throw hn(12,String(n.name))})}return e.prototype.getName=function(e){return void 0===e&&(e=Mn),this.name+e.hash},e}(),Zn=function(e){return e>="A"&&e<="Z"};function Gn(e){for(var t="",n=0;n<e.length;n++){var r=e[n];if(1===n&&"-"===r&&"-"===e[0])return e;Zn(r)?t+="-"+r.toLowerCase():t+=r}return t.startsWith("ms-")?"-"+t:t}var Vn=function(e){return null==e||!1===e||""===e},qn=function(e){var t,n,r=[];for(var i in e){var o=e[i];e.hasOwnProperty(i)&&!Vn(o)&&(Array.isArray(o)&&o.isCss||sn(o)?r.push("".concat(Gn(i),":"),o,";"):fn(o)?r.push.apply(r,Ce(Ce(["".concat(i," {")],qn(o),!1),["}"],!1)):r.push("".concat(Gn(i),": ").concat((t=i,null==(n=o)||"boolean"==typeof n||""===n?"":"number"!=typeof n||0===n||t in jt||t.startsWith("--")?String(n).trim():"".concat(n,"px")),";")))}return r};function Kn(e,t,n,r){return Vn(e)?[]:ln(e)?[".".concat(e.styledComponentId)]:sn(e)?!sn(i=e)||i.prototype&&i.prototype.isReactComponent||!t?[e]:Kn(e(t),t,n,r):e instanceof Hn?n?(e.inject(n,r),[e.getName(r)]):[e]:fn(e)?qn(e):Array.isArray(e)?Array.prototype.concat.apply(It,e.map(function(e){return Kn(e,t,n,r)})):[e.toString()];var i}function Yn(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(sn(n)&&!ln(n))return!1}return!0}var Xn=$t(Et),Jn=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&Yn(e),this.componentId=t,this.baseHash=Ut(Xn,t),this.baseStyle=n,Pn.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.baseStyle?this.baseStyle.generateAndInjectStyles(e,t,n):"";if(this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(this.componentId,this.staticRulesId))r=cn(r,this.staticRulesId);else{var i=un(Kn(this.rules,e,t,n)),o=Dt(Ut(this.baseHash,i)>>>0);if(!t.hasNameForId(this.componentId,o)){var a=n(i,".".concat(o),void 0,this.componentId);t.insertRules(this.componentId,o,a)}r=cn(r,o),this.staticRulesId=o}else{for(var s=Ut(this.baseHash,n.hash),l="",c=0;c<this.rules.length;c++){var u=this.rules[c];if("string"==typeof u)l+=u;else if(u){var f=un(Kn(u,e,t,n));s=Ut(s,f+c),l+=f}}if(l){var d=Dt(s>>>0);t.hasNameForId(this.componentId,d)||t.insertRules(this.componentId,d,n(l,".".concat(d),void 0,this.componentId)),r=cn(r,d)}}return r},e}(),Qn=a().createContext(void 0);Qn.Consumer;var er={};function tr(e,t,n){var i=ln(e),o=e,s=!Ht(e),l=t.attrs,c=void 0===l?It:l,u=t.componentId,f=void 0===u?function(e,t){var n="string"!=typeof e?"sc":Ft(e);er[n]=(er[n]||0)+1;var r="".concat(n,"-").concat(function(e){return Dt($t(e)>>>0)}(Et+n+er[n]));return t?"".concat(t,"-").concat(r):r}(t.displayName,t.parentComponentId):u,d=t.displayName,p=void 0===d?function(e){return Ht(e)?"styled.".concat(e):"Styled(".concat(function(e){return e.displayName||e.name||"Component"}(e),")")}(e):d,h=t.displayName&&t.componentId?"".concat(Ft(t.displayName),"-").concat(t.componentId):t.componentId||f,g=i&&o.attrs?o.attrs.concat(c).filter(Boolean):c,v=t.shouldForwardProp;if(i&&o.shouldForwardProp){var m=o.shouldForwardProp;if(t.shouldForwardProp){var b=t.shouldForwardProp;v=function(e,t){return m(e,t)&&b(e,t)}}else v=m}var y=new Jn(n,h,i?o.componentStyle:void 0);function w(e,t){return function(e,t,n){var i=e.attrs,o=e.componentStyle,s=e.defaultProps,l=e.foldedComponentIds,c=e.styledComponentId,u=e.target,f=a().useContext(Qn),d=Un(),p=e.shouldForwardProp||d.shouldForwardProp,h=function(e,t,n){return void 0===n&&(n=Pt),e.theme!==n.theme&&e.theme||t||n.theme}(t,f,s)||Pt,g=function(e,t,n){for(var r,i=je(je({},t),{className:void 0,theme:n}),o=0;o<e.length;o+=1){var a=sn(r=e[o])?r(i):r;for(var s in a)i[s]="className"===s?cn(i[s],a[s]):"style"===s?je(je({},i[s]),a[s]):a[s]}return t.className&&(i.className=cn(i.className,t.className)),i}(i,t,h),v=g.as||u,m={};for(var b in g)void 0===g[b]||"$"===b[0]||"as"===b||"theme"===b&&g.theme===h||("forwardedAs"===b?m.as=g.forwardedAs:p&&!p(b,v)||(m[b]=g[b]));var y=function(e,t){var n=Un();return e.generateAndInjectStyles(t,n.styleSheet,n.stylis)}(o,g),w=cn(l,c);return y&&(w+=" "+y),g.className&&(w+=" "+g.className),m[Ht(v)&&!Tt.has(v)?"class":"className"]=w,n&&(m.ref=n),(0,r.createElement)(v,m)}(_,e,t)}w.displayName=p;var _=a().forwardRef(w);return _.attrs=g,_.componentStyle=y,_.displayName=p,_.shouldForwardProp=v,_.foldedComponentIds=i?cn(o.foldedComponentIds,o.styledComponentId):"",_.styledComponentId=h,_.target=i?o.target:e,Object.defineProperty(_,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=i?function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=0,i=t;r<i.length;r++)dn(e,i[r],!0);return e}({},o.defaultProps,e):e}}),pn(_,function(){return".".concat(_.styledComponentId)}),s&&an(_,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0}),_}function nr(e,t){for(var n=[e[0]],r=0,i=t.length;r<i;r+=1)n.push(t[r],e[r+1]);return n}new Set;var rr=function(e){return Object.assign(e,{isCss:!0})};function ir(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(sn(e)||fn(e))return rr(Kn(nr(It,Ce([e],t,!0))));var r=e;return 0===t.length&&1===r.length&&"string"==typeof r[0]?Kn(r):rr(Kn(nr(r,t)))}function or(e,t,n){if(void 0===n&&(n=Pt),!t)throw hn(1,t);var r=function(r){for(var i=[],o=1;o<arguments.length;o++)i[o-1]=arguments[o];return e(t,n,ir.apply(void 0,Ce([r],i,!1)))};return r.attrs=function(r){return or(e,t,je(je({},n),{attrs:Array.prototype.concat(n.attrs,r).filter(Boolean)}))},r.withConfig=function(r){return or(e,t,je(je({},n),r))},r}var ar=function(e){return or(tr,e)},sr=ar;Tt.forEach(function(e){sr[e]=ar(e)}),function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=Yn(e),Pn.registerId(this.componentId+1)}e.prototype.createStyles=function(e,t,n,r){var i=r(un(Kn(this.rules,t,n,r)),""),o=this.componentId+e;n.insertRules(o,o,i)},e.prototype.removeStyles=function(e,t){t.clearRules(this.componentId+e)},e.prototype.renderStyles=function(e,t,n,r){e>2&&Pn.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)}}(),function(){function e(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=Sn(),r=un([n&&'nonce="'.concat(n,'"'),"".concat(Ct,'="true"'),"".concat(zt,'="').concat(Et,'"')].filter(Boolean)," ");return"<style ".concat(r,">").concat(t,"</style>")},this.getStyleTags=function(){if(e.sealed)throw hn(2);return e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)throw hn(2);var n=e.instance.toString();if(!n)return[];var r=((t={})[Ct]="",t[zt]=Et,t.dangerouslySetInnerHTML={__html:n},t),i=Sn();return i&&(r.nonce=i),[a().createElement("style",je({},r,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new Pn({isServer:!0}),this.sealed=!1}e.prototype.collectStyles=function(e){if(this.sealed)throw hn(2);return a().createElement($n,{sheet:this.instance},e)},e.prototype.interleaveWithNodeStream=function(e){throw hn(3)}}(),"__sc-".concat(Ct,"__");var lr,cr,ur,fr,dr,pr,hr=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},gr="#666",vr=sr.div(lr||(lr=hr(["\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  background-color: ",";\n"],["\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  background-color: ",";\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:gr}),mr=sr.div(cr||(cr=hr(["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  flex-grow: 1;\n  z-index: 3;\n  background-color: ",";\n"],["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  flex-grow: 1;\n  z-index: 3;\n  background-color: ",";\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:gr}),br=sr.div(ur||(ur=hr(["\n  position: relative;\n  height: 100%;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 3;\n  background-color: ",";\n"],["\n  position: relative;\n  height: 100%;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 3;\n  background-color: ",";\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:gr}),yr=sr.div(fr||(fr=hr(["\n  align-items: center;\n  display: flex;\n  height: 32px;\n  justify-content: space-between;\n  max-height: 32px;\n  width: 100%;\n  z-index: 5;\n  padding-left: 10px;\n  padding-right: 5px;\n  background-color: ",";\n"],["\n  align-items: center;\n  display: flex;\n  height: 32px;\n  justify-content: space-between;\n  max-height: 32px;\n  width: 100%;\n  z-index: 5;\n  padding-left: 10px;\n  padding-right: 5px;\n  background-color: ",";\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:gr}),wr=sr(function(e){return r.createElement("svg",re({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,preserveAspectRatio:"xMidYMid",viewBox:"0 0 200 200"},e),ee||(ee=r.createElement("g",{fill:"current"},r.createElement("path",{d:"M67.475 131.28c-9.212-.99-16.82-8.667-17.708-17.879-.784-7.813 2.696-15.046 9.28-19.311 3.003-1.945 5.63-2.73 9.793-2.934 6.38-.307 10.747 1.364 15.183 5.834 4.23 4.23 5.97 8.427 5.97 14.193 0 12.25-10.27 21.393-22.518 20.097m6.312-5.255c7.472-1.945 12.454-9.655 11.157-17.23-2.047-12.044-16.48-17.06-25.384-8.87-7.745 7.062-6.347 19.31 2.797 24.667 3.207 1.843 7.609 2.423 11.43 1.433"}),r.createElement("path",{d:"M72.866 139.161c-8.154-1.297-15.08-4.879-20.642-10.68-4.572-4.776-7.2-9.484-9.042-16.172-.614-2.183-.716-3.65-.75-8.29-.034-4.845.068-6.04.785-8.667 1.705-6.517 4.299-11.19 8.87-15.967 7.473-7.814 16.924-11.635 27.466-11.09 9.076.479 17.026 4.027 23.44 10.441 4.163 4.163 6.824 8.394 8.632 13.853 6.517 19.413-4.981 40.567-24.873 45.719-3.82.99-10.44 1.399-13.886.853m10.645-5.152c11.157-2.013 20.676-10.713 23.883-21.802 1.058-3.65 1.297-10.475.512-14.364-1.876-9.315-7.95-17.298-16.377-21.53-4.674-2.353-11.498-3.616-16.582-3.036-4.299.478-6.892 1.229-10.713 3.105-12.658 6.107-19.448 20.267-16.343 34.119.614 2.798 1.842 6.141 2.218 6.141.17 0 .307.205.307.444 0 .819 1.979 4.538 3.514 6.55 1.57 2.082 4.299 4.334 7.063 5.87a46 46 0 0 1 2.9 1.671c2.047 1.228 7.335 2.832 10.508 3.173 3.003.307 6.108.205 9.11-.341M39.156 188.292c0-1.57.069-1.706.82-1.706.477 0 1.296-.375 1.808-.818l.955-.82.102-8.938.137-8.906 2.081.103 2.115.102.103 8.7c.068 7.302 0 8.94-.444 10.134-.955 2.456-3.275 3.855-6.38 3.855h-1.297zM53.623 184.949c-1.536-.956-2.49-2.491-2.934-4.64-.956-4.538 1.706-8.735 5.527-8.735 1.194 0 3.582 1.126 3.855 1.774.103.24.205-1.126.205-3.036l.034-3.515h4.436v18.425h-2.218c-2.013 0-2.218-.069-2.218-.717 0-.682 0-.682-1.092.068-1.5 1.092-4.196 1.263-5.595.376m5.834-3.31c.75-.716.853-1.126.853-3.07s-.102-2.355-.853-3.071c-1.058-1.092-2.252-1.092-3.48-.034-.853.75-.955 1.023-.955 3.036 0 1.877.136 2.354.819 3.105 1.091 1.16 2.524 1.16 3.616.034M71.672 185.017c-4.402-1.638-5.63-7.984-2.184-11.43 2.798-2.832 8.189-2.661 10.714.341.989 1.194 1.603 3.003 1.603 4.743v1.092h-4.947c-5.46 0-5.698.102-4.129 1.944.751.853 1.024.956 3.003.922 1.399 0 2.695-.273 3.787-.751l1.604-.717v1.638c0 1.57-.034 1.638-1.263 2.047-2.15.683-6.55.785-8.188.17m5.698-8.462c0-.273-.273-.818-.649-1.262-.92-1.16-2.934-1.092-3.992.17-.443.512-.818 1.058-.818 1.263 0 .17 1.228.307 2.73.307 2.115 0 2.729-.102 2.729-.478M107.565 185.051c-4.435-1.57-5.732-8.018-2.252-11.464 3.65-3.65 10.986-2.115 12.283 2.593 1.74 6.312-3.685 11.123-10.031 8.871m4.981-3.446c.683-.75.82-1.228.82-3.037s-.137-2.286-.82-3.036c-.546-.58-1.194-.887-1.91-.887s-1.365.307-1.911.887c-.682.75-.819 1.228-.819 3.036s.137 2.286.819 3.037c.546.58 1.194.887 1.91.887s1.365-.307 1.911-.887M127.013 185.017c-.546-.273-1.297-.785-1.604-1.058-.58-.512-.614-.477-.614.341 0 .888-.068.922-2.047.922H120.7v-18.425h4.094v6.858l1.262-.955c1.638-1.228 4.607-1.365 6.142-.239 3.855 2.866 3.48 10.475-.58 12.59-1.263.648-3.31.648-4.606-.034m2.593-3.412c.682-.75.819-1.228.819-3.105 0-2.013-.103-2.286-.956-3.036-1.774-1.536-3.787-.717-4.333 1.74-.887 3.89 2.15 6.892 4.47 4.401M141.343 185.051c-4.436-1.57-5.732-8.018-2.252-11.464 3.65-3.65 10.986-2.115 12.283 2.593 1.74 6.312-3.685 11.123-10.031 8.871m4.981-3.446c.683-.75.819-1.228.819-3.037s-.136-2.286-.819-3.036c-.546-.58-1.194-.887-1.91-.887s-1.365.307-1.911.887c-.683.75-.819 1.228-.819 3.036s.136 2.286.819 3.037c.546.58 1.194.887 1.91.887s1.365-.307 1.911-.887M85.558 176.35v-8.87h4.538c6.21.034 8.018.75 8.837 3.48.546 1.808-.068 3.719-1.57 4.947l-1.16.921.82.649c.682.546 4.23 6.892 4.23 7.574 0 .102-1.024.17-2.286.102l-2.32-.102-1.433-2.73c-1.604-3.104-2.457-3.923-4.06-3.923h-1.126l-.103 3.344-.102 3.31-2.115.101-2.15.103zm8.36-1.705c.306-.24.511-.99.511-1.74 0-1.57-.614-2.013-2.866-2.013h-1.57v4.538l1.707-.171c.92-.102 1.91-.375 2.217-.614M156.867 184.778c-1.501-.75-2.047-2.388-2.047-6.278v-3.514h-1.024c-.99 0-1.023-.068-1.023-1.535s.034-1.536 1.023-1.536c1.024 0 1.024-.034 1.024-1.876v-1.877h4.435v3.753h4.095v3.071h-4.129l.102 3.514.103 3.48 1.808.103 1.774.102v3.037h-2.627c-1.467 0-3.036-.205-3.514-.444"}),r.createElement("path",{d:"M84.193 148.475c-6.585-.648-13.75-2.695-19.789-5.63-2.354-1.16-4.47-2.115-4.708-2.183-.614-.136-4.572-3.343-7.847-6.448-3.242-3.037-7.507-8.223-10.27-12.454-2.56-3.923-5.732-10.201-5.937-11.805-.102-.75-.512-2.866-.955-4.742-.717-3.037-.82-4.231-.785-10.748 0-6.721.068-7.643.887-11.089 3.378-14.09 11.02-25.145 22.996-33.231 13.136-8.871 29.957-11.772 45.652-7.882 17.741 4.367 32.208 17.025 38.588 33.744 2.32 6.107 3.276 11.532 3.276 18.629.034 13.613-4.845 25.93-14.194 35.995-9.246 9.997-21.563 16.139-35.484 17.742-2.9.307-8.768.375-11.43.102m11.09-5.05c7.54-.613 16.376-3.855 23.541-8.597 4.3-2.866 10.475-9.008 13.238-13.102 3.685-5.561 6.176-11.464 7.609-18.049.478-2.252.648-4.333.614-9.212 0-5.595-.102-6.755-.887-10.1-2.32-9.86-6.892-17.775-14.262-24.804-15.66-14.876-39.578-18.356-59.026-8.598-13.784 6.927-23.405 19.278-26.68 34.222-1.058 4.81-1.058 13.818 0 18.731 2.115 9.724 7.369 19.414 13.92 25.726 4.81 4.606 12.863 9.246 19.891 11.532 7.268 2.354 13.238 2.968 22.041 2.252"}),r.createElement("path",{d:"M94.6 158.37c-11.942-.785-25.317-5.357-35.586-12.18-17.913-11.908-29.445-30.128-32.72-51.725-.785-5.357-.785-15.49 0-20.744 2.524-16.207 9.587-30.434 20.71-41.694C58.16 20.768 71.535 13.74 87.434 10.805c5.392-.99 18.903-1.091 24.055-.17 16.752 2.934 30.98 10.406 42.273 22.245 19.039 19.994 25.419 48.415 16.684 74.72-7.301 22.11-24.531 39.477-46.504 46.88-9.724 3.276-19.38 4.538-29.342 3.89m16.752-5.664c11.737-2.217 21.598-6.482 30.468-13.136 3.515-2.66 9.486-8.461 12.283-11.975 13.034-16.377 18.015-37.088 13.853-57.423-8.018-39.27-47.596-63.495-86.492-52.952-16.514 4.47-31.39 15.66-40.67 30.57-5.05 8.12-8.564 18.254-9.792 28.25-.546 4.163-.444 12.659.136 17.129 1.229 9.28 4.265 18.22 8.837 25.998 10.816 18.356 29.001 30.537 50.428 33.812 4.197.648 17.025.478 20.95-.273"}))))})(dr||(dr=hr(["\n  fill: ",";\n  width: 33vh;\n  height: 100%;\n"],["\n  fill: ",";\n  width: 33vh;\n  height: 100%;\n"])),function(e){var t;return null!==(t=e.color)&&void 0!==t?t:gr});sr(function(e){return r.createElement("svg",ke({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,preserveAspectRatio:"xMidYMid",viewBox:"0 0 200 200"},e),me||(me=r.createElement("path",{fill:"#0bbd0b",d:"M67.475 131.28c-9.212-.99-16.82-8.667-17.708-17.879-.784-7.813 2.696-15.046 9.28-19.311 3.003-1.945 5.63-2.73 9.793-2.934 6.38-.307 10.747 1.364 15.183 5.834 4.23 4.23 5.97 8.427 5.97 14.193 0 12.25-10.27 21.393-22.518 20.097m6.312-5.255c7.472-1.945 12.454-9.655 11.157-17.23-2.047-12.044-16.48-17.06-25.384-8.87-7.745 7.062-6.347 19.31 2.797 24.667 3.207 1.843 7.609 2.423 11.43 1.433"})),be||(be=r.createElement("path",{fill:"#0891f8",d:"M72.866 139.161c-8.154-1.297-15.08-4.879-20.642-10.68-4.572-4.776-7.2-9.484-9.042-16.172-.614-2.183-.716-3.65-.75-8.29-.034-4.845.068-6.04.785-8.667 1.705-6.517 4.299-11.19 8.87-15.967 7.473-7.814 16.924-11.635 27.466-11.09 9.076.479 17.026 4.027 23.44 10.441 4.163 4.163 6.824 8.394 8.632 13.853 6.517 19.413-4.981 40.567-24.873 45.719-3.82.99-10.44 1.399-13.886.853m10.645-5.152c11.157-2.013 20.676-10.713 23.883-21.802 1.058-3.65 1.297-10.475.512-14.364-1.876-9.315-7.95-17.298-16.377-21.53-4.674-2.353-11.498-3.616-16.582-3.036-4.299.478-6.892 1.229-10.713 3.105-12.658 6.107-19.448 20.267-16.343 34.119.614 2.798 1.842 6.141 2.218 6.141.17 0 .307.205.307.444 0 .819 1.979 4.538 3.514 6.55 1.57 2.082 4.299 4.334 7.063 5.87a46 46 0 0 1 2.9 1.671c2.047 1.228 7.335 2.832 10.508 3.173 3.003.307 6.108.205 9.11-.341"})),ye||(ye=r.createElement("g",{fill:"#082693"},r.createElement("path",{d:"M39.156 188.292c0-1.57.069-1.706.82-1.706.477 0 1.296-.375 1.808-.818l.955-.82.102-8.938.137-8.906 2.081.103 2.115.102.103 8.7c.068 7.302 0 8.94-.444 10.134-.955 2.456-3.275 3.855-6.38 3.855h-1.297zM53.623 184.949c-1.536-.956-2.49-2.491-2.934-4.64-.956-4.538 1.706-8.735 5.527-8.735 1.194 0 3.582 1.126 3.855 1.774.103.24.205-1.126.205-3.036l.034-3.515h4.436v18.425h-2.218c-2.013 0-2.218-.069-2.218-.717 0-.682 0-.682-1.092.068-1.5 1.092-4.196 1.263-5.595.376m5.834-3.31c.75-.716.853-1.126.853-3.07s-.102-2.355-.853-3.071c-1.058-1.092-2.252-1.092-3.48-.034-.853.75-.955 1.023-.955 3.036 0 1.877.136 2.354.819 3.105 1.091 1.16 2.524 1.16 3.616.034M71.672 185.017c-4.402-1.638-5.63-7.984-2.184-11.43 2.798-2.832 8.189-2.661 10.714.341.989 1.194 1.603 3.003 1.603 4.743v1.092h-4.947c-5.46 0-5.698.102-4.129 1.944.751.853 1.024.956 3.003.922 1.399 0 2.695-.273 3.787-.751l1.604-.717v1.638c0 1.57-.034 1.638-1.263 2.047-2.15.683-6.55.785-8.188.17m5.698-8.462c0-.273-.273-.818-.649-1.262-.92-1.16-2.934-1.092-3.992.17-.443.512-.818 1.058-.818 1.263 0 .17 1.228.307 2.73.307 2.115 0 2.729-.102 2.729-.478M107.565 185.051c-4.435-1.57-5.732-8.018-2.252-11.464 3.65-3.65 10.986-2.115 12.283 2.593 1.74 6.312-3.685 11.123-10.031 8.871m4.981-3.446c.683-.75.82-1.228.82-3.037s-.137-2.286-.82-3.036c-.546-.58-1.194-.887-1.91-.887s-1.365.307-1.911.887c-.682.75-.819 1.228-.819 3.036s.137 2.286.819 3.037c.546.58 1.194.887 1.91.887s1.365-.307 1.911-.887M127.013 185.017c-.546-.273-1.297-.785-1.604-1.058-.58-.512-.614-.477-.614.341 0 .888-.068.922-2.047.922H120.7v-18.425h4.094v6.858l1.262-.955c1.638-1.228 4.607-1.365 6.142-.239 3.855 2.866 3.48 10.475-.58 12.59-1.263.648-3.31.648-4.606-.034m2.593-3.412c.682-.75.819-1.228.819-3.105 0-2.013-.103-2.286-.956-3.036-1.774-1.536-3.787-.717-4.333 1.74-.887 3.89 2.15 6.892 4.47 4.401M141.343 185.051c-4.436-1.57-5.732-8.018-2.252-11.464 3.65-3.65 10.986-2.115 12.283 2.593 1.74 6.312-3.685 11.123-10.031 8.871m4.981-3.446c.683-.75.819-1.228.819-3.037s-.136-2.286-.819-3.036c-.546-.58-1.194-.887-1.91-.887s-1.365.307-1.911.887c-.683.75-.819 1.228-.819 3.036s.136 2.286.819 3.037c.546.58 1.194.887 1.91.887s1.365-.307 1.911-.887M85.558 176.35v-8.87h4.538c6.21.034 8.018.75 8.837 3.48.546 1.808-.068 3.719-1.57 4.947l-1.16.921.82.649c.682.546 4.23 6.892 4.23 7.574 0 .102-1.024.17-2.286.102l-2.32-.102-1.433-2.73c-1.604-3.104-2.457-3.923-4.06-3.923h-1.126l-.103 3.344-.102 3.31-2.115.101-2.15.103zm8.36-1.705c.306-.24.511-.99.511-1.74 0-1.57-.614-2.013-2.866-2.013h-1.57v4.538l1.707-.171c.92-.102 1.91-.375 2.217-.614M156.867 184.778c-1.501-.75-2.047-2.388-2.047-6.278v-3.514h-1.024c-.99 0-1.023-.068-1.023-1.535s.034-1.536 1.023-1.536c1.024 0 1.024-.034 1.024-1.876v-1.877h4.435v3.753h4.095v3.071h-4.129l.102 3.514.103 3.48 1.808.103 1.774.102v3.037h-2.627c-1.467 0-3.036-.205-3.514-.444"}))),we||(we=r.createElement("path",{fill:"orange",d:"M84.193 148.475c-6.585-.648-13.75-2.695-19.789-5.63-2.354-1.16-4.47-2.115-4.708-2.183-.614-.136-4.572-3.343-7.847-6.448-3.242-3.037-7.507-8.223-10.27-12.454-2.56-3.923-5.732-10.201-5.937-11.805-.102-.75-.512-2.866-.955-4.742-.717-3.037-.82-4.231-.785-10.748 0-6.721.068-7.643.887-11.089 3.378-14.09 11.02-25.145 22.996-33.231 13.136-8.871 29.957-11.772 45.652-7.882 17.741 4.367 32.208 17.025 38.588 33.744 2.32 6.107 3.276 11.532 3.276 18.629.034 13.613-4.845 25.93-14.194 35.995-9.246 9.997-21.563 16.139-35.484 17.742-2.9.307-8.768.375-11.43.102m11.09-5.05c7.54-.613 16.376-3.855 23.541-8.597 4.3-2.866 10.475-9.008 13.238-13.102 3.685-5.561 6.176-11.464 7.609-18.049.478-2.252.648-4.333.614-9.212 0-5.595-.102-6.755-.887-10.1-2.32-9.86-6.892-17.775-14.262-24.804-15.66-14.876-39.578-18.356-59.026-8.598-13.784 6.927-23.405 19.278-26.68 34.222-1.058 4.81-1.058 13.818 0 18.731 2.115 9.724 7.369 19.414 13.92 25.726 4.81 4.606 12.863 9.246 19.891 11.532 7.268 2.354 13.238 2.968 22.041 2.252"})),_e||(_e=r.createElement("path",{fill:"red",d:"M94.6 158.37c-11.942-.785-25.317-5.357-35.586-12.18-17.913-11.908-29.445-30.128-32.72-51.725-.785-5.357-.785-15.49 0-20.744 2.524-16.207 9.587-30.434 20.71-41.694C58.16 20.768 71.535 13.74 87.434 10.805c5.392-.99 18.903-1.091 24.055-.17 16.752 2.934 30.98 10.406 42.273 22.245 19.039 19.994 25.419 48.415 16.684 74.72-7.301 22.11-24.531 39.477-46.504 46.88-9.724 3.276-19.38 4.538-29.342 3.89m16.752-5.664c11.737-2.217 21.598-6.482 30.468-13.136 3.515-2.66 9.486-8.461 12.283-11.975 13.034-16.377 18.015-37.088 13.853-57.423-8.018-39.27-47.596-63.495-86.492-52.952-16.514 4.47-31.39 15.66-40.67 30.57-5.05 8.12-8.564 18.254-9.792 28.25-.546 4.163-.444 12.659.136 17.129 1.229 9.28 4.265 18.22 8.837 25.998 10.816 18.356 29.001 30.537 50.428 33.812 4.197.648 17.025.478 20.95-.273"})))})(pr||(pr=hr(["\n  fill: ",";\n  width: 33vh;\n  height: 100%;\n"],["\n  fill: ",";\n  width: 33vh;\n  height: 100%;\n"])),function(e){var t;return null!==(t=e.color)&&void 0!==t?t:gr});var _r,xr,kr,jr=function(e){var t,i=e.viewers,o=e.splashIcon,a=(e.options,(0,r.useState)(Array(i.length).fill(!1))),s=a[0],l=a[1],c=u();return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(yr,{bgColor:null===(t=c.palette)||void 0===t?void 0:t.primary,children:(0,n.jsx)(Js,{children:i.map(function(e,t){return(0,n.jsx)(Ri,{active:s[t],variant:"tab",iconType:"fill",title:"Toggle ".concat(e.name),id:"".concat(e.name,"-toggle"),onClick:function(){return function(e){l(s.map(function(t,n){return e===n?!t:t}))}(t)},children:e.icon})})})}),(0,n.jsx)(Co,{state:s,splashIcon:o,children:i.map(function(e){return e.component})})]})},Cr=i(198),Sr=i.n(Cr),zr=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Er=sr.div(_r||(_r=zr(["\n  height: 100%;\n  width: 100%;\n  background-color: ",";\n"],["\n  height: 100%;\n  width: 100%;\n  background-color: ",";\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:"#007bff"}),Or=sr.div(xr||(xr=zr(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n"],["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n"]))),Ar=sr.iframe(kr||(kr=zr(['\n  width: "100%",\n  height: "100%",\n  border: 0,\n'],['\n  width: "100%",\n  height: "100%",\n  border: 0,\n']))),Rr=function(e){return"visualization_ready"===e||"application_running"===e||"paused"===e};const Ir=function(e){var t=e.commsManager,i=e.port,o=u(),a=(0,r.useState)(null==t?void 0:t.getState()),s=a[0],l=a[1],c=function(e){l(e.detail.state)};return(0,r.useEffect)(function(){return g("CommsManagerStateChange",c),function(){v("CommsManagerStateChange",function(){})}},[]),(0,n.jsx)(Er,{bgColor:o.palette.background,children:Rr(s)?(0,n.jsx)(Ar,{title:"VNC viewer",id:"vnc-viewer",src:"http://127.0.0.1:".concat(i,"/vnc.html?resize=remote&autoconnect=true&reconnect=true")}):(0,n.jsx)(Or,{children:(0,n.jsx)(Sr(),{color:o.palette.primary,size:80,speedMultiplier:.7})})})};var Pr,Tr,Br,Lr=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Fr="#666",Nr=sr.div(Pr||(Pr=Lr(["\n  height: 24px;\n  width: 100%;\n  background-color: ",";\n  display: flex;\n  flex-direction: row;\n"],["\n  height: 24px;\n  width: 100%;\n  background-color: ",";\n  display: flex;\n  flex-direction: row;\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:Fr}),Mr=sr.div(Tr||(Tr=Lr(["\n  margin: 0 0 0 0;\n  padding: 0 10px 0 10px;\n  height: 24px;\n  min-width: 100px;\n  width: fit-content;\n  border: none;\n  background-color: transparent;\n\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n\n  opacity: 50%;\n\n  &:hover {\n    opacity: 100%;\n  }\n\n  & label {\n    height: 20px;\n    padding-left: 10px;\n    padding-right: 10px;\n    font-size: 14px;\n    color: ",";\n    display: flex;\n    align-items: center;\n  }\n"],["\n  margin: 0 0 0 0;\n  padding: 0 10px 0 10px;\n  height: 24px;\n  min-width: 100px;\n  width: fit-content;\n  border: none;\n  background-color: transparent;\n\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n\n  opacity: 50%;\n\n  &:hover {\n    opacity: 100%;\n  }\n\n  & label {\n    height: 20px;\n    padding-left: 10px;\n    padding-right: 10px;\n    font-size: 14px;\n    color: ",";\n    display: flex;\n    align-items: center;\n  }\n"])),function(e){var t;return null!==(t=e.text)&&void 0!==t?t:Fr}),Dr=sr.div(Br||(Br=Lr(["\n  margin: 0 0 0 0;\n  padding: 0 10px 0 10px;\n  height: 24px;\n  min-width: 100px;\n  width: fit-content;\n  border: none;\n  background-color: ",";\n\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n\n  &:hover {\n    background-color: ",";\n  }\n\n  & label {\n    height: 20px;\n    padding-left: 10px;\n    padding-right: 10px;\n    font-size: 18px;\n    color: ",";\n    display: flex;\n    align-items: center;\n  }\n\n  & svg {\n    height: 24px;\n    margin: 0 0 0 0;\n  }\n"],["\n  margin: 0 0 0 0;\n  padding: 0 10px 0 10px;\n  height: 24px;\n  min-width: 100px;\n  width: fit-content;\n  border: none;\n  background-color: ",";\n\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n\n  &:hover {\n    background-color: ",";\n  }\n\n  & label {\n    height: 20px;\n    padding-left: 10px;\n    padding-right: 10px;\n    font-size: 18px;\n    color: ",";\n    display: flex;\n    align-items: center;\n  }\n\n  & svg {\n    height: 24px;\n    margin: 0 0 0 0;\n  }\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:"transparent"},function(e){var t;return null!==(t=e.hoverColor)&&void 0!==t?t:Fr},function(e){var t;return null!==(t=e.text)&&void 0!==t?t:Fr});const Wr=function(e){e.project;var t=e.commsManager,i=e.resetManager,o=u(),a=(0,r.useState)(null==t?void 0:t.getHostData()),s=a[0],l=a[1],c=(0,r.useState)(null==t?void 0:t.getState()),f=c[0],d=c[1],p=function(){return e=void 0,n=void 0,i=function(){var e;return function(e,t){var n,r,i,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=s(0),a.throw=s(1),a.return=s(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,function(n){return(e=null==t?void 0:t.getHostData())?(l(e),[2]):(setTimeout(p,1e3),[2])})},new((r=void 0)||(r=Promise))(function(t,o){function a(e){try{l(i.next(e))}catch(e){o(e)}}function s(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?t(e.value):(n=e.value,n instanceof r?n:new r(function(e){e(n)})).then(a,s)}l((i=i.apply(e,n||[])).next())});var e,n,r,i};void 0===s&&p();var h=function(e){d(e.detail.state)};return(0,r.useEffect)(function(){return g("CommsManagerStateChange",h),function(){v("CommsManagerStateChange",function(){})}},[]),(0,n.jsxs)(Nr,{bgColor:o.palette.primary,children:[s?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(Mr,{text:o.palette.text,title:"ROS 2 version",children:(0,n.jsx)("label",{children:"ROS 2: ".concat(s.ros_version)})}),(0,n.jsx)(Mr,{text:o.palette.text,title:"GPU status",children:(0,n.jsx)("label",{children:"GPU: ".concat(s.gpu_avaliable)})}),(0,n.jsx)(Mr,{text:o.palette.text,title:"Robotics Backend version",children:(0,n.jsx)("label",{children:"Robotics Backend: ".concat(s.robotics_backend_version)})})]}):(0,n.jsxs)(Dr,{text:o.palette.darkText,bgColor:o.palette.warning,hoverColor:o.palette.button.hoverWarning,id:"reset-connection",onClick:function(){i()},title:"Reconnect with Robotics Backend",children:[(0,n.jsx)(de,{viewBox:"0 0 20 20",stroke:o.palette.darkText}),(0,n.jsx)("label",{children:"Reconnect"})]}),(0,n.jsx)(Mr,{text:o.palette.text,title:"Robotics Backend state",children:(0,n.jsx)("label",{children:f})})]})};var Ur=i(710),$r=i.n(Ur);const Hr=function(e){var t=e.is_dir,r=e.is_collapsed,i=(e.name,e.group),o=u(),a=(0,n.jsx)(n.Fragment,{children:(0,n.jsx)(L,{viewBox:"0 0 20 20",fill:o.palette.text})});return t?r?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(M,{viewBox:"0 0 20 20",stroke:o.palette.text}),(0,n.jsx)(Z,{viewBox:"0 0 20 20",fill:o.palette.text})]}):(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(ae,{viewBox:"0 0 20 20",stroke:o.palette.text}),(0,n.jsx)(ce,{viewBox:"0 0 20 20",fill:o.palette.text})]}):("Action"===i&&(a=(0,n.jsx)(n.Fragment,{children:(0,n.jsx)(y,{viewBox:"0 0 20 20",fill:o.palette.text})})),a)};var Zr,Gr,Vr,qr,Kr,Yr,Xr=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Jr="#666",Qr=(sr.div(Zr||(Zr=Xr(["\n  overflow-y: auto;\n"],["\n  overflow-y: auto;\n"]))),sr.div(Gr||(Gr=Xr(["\n  height: fit-content;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  gap: 4px;\n"],["\n  height: fit-content;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  gap: 4px;\n"]))),sr.div(Vr||(Vr=Xr(["\n  padding-left: 5px;\n  padding-right: 5px;\n\n  &:hover {\n    background-color: ",";\n    & #explorer-action-button {\n      visibility: visible;\n    }\n  }\n\n  ","\n"],["\n  padding-left: 5px;\n  padding-right: 5px;\n\n  &:hover {\n    background-color: ",";\n    & #explorer-action-button {\n      visibility: visible;\n    }\n  }\n\n  ","\n"])),function(e){var t;return null!==(t=e.hoverColor)&&void 0!==t?t:Jr},function(e){var t;if(e.active)return"\n      background-color: ".concat(null!==(t=e.bgColor)&&void 0!==t?t:Jr,";\n    ")})),ei=sr.div(qr||(qr=Xr(["\n  list-style-type: none;\n  padding: 0px;\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  height: 20px;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n  padding-left: ","px;\n\n  & label {\n    cursor: pointer;\n    list-style-type: none;\n    padding: 3px;\n    font-size: 0.9em;\n    color: ",";\n  }\n\n  & svg {\n    height: 16px;\n    width: 16px;\n    min-width: 16px;\n    min-height: 16px;\n  }\n"],["\n  list-style-type: none;\n  padding: 0px;\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  height: 20px;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n  padding-left: ","px;\n\n  & label {\n    cursor: pointer;\n    list-style-type: none;\n    padding: 3px;\n    font-size: 0.9em;\n    color: ",";\n  }\n\n  & svg {\n    height: 16px;\n    width: 16px;\n    min-width: 16px;\n    min-height: 16px;\n  }\n"])),function(e){return 20*e.depth},function(e){var t;return null!==(t=e.color)&&void 0!==t?t:Jr}),ti=sr(x)(Kr||(Kr=Xr(["\n  margin-left: auto;\n  visibility: hidden;\n  stroke: ",";\n"],["\n  margin-left: auto;\n  visibility: hidden;\n  stroke: ",";\n"])),function(e){var t;return null!==(t=e.color)&&void 0!==t?t:Jr});sr(x)(Yr||(Yr=Xr(["\n  position: relative;\n  z-index: 10;\n  width: 5px;\n  height: 100%;\n  background-color: ",";\n"],["\n  position: relative;\n  z-index: 10;\n  width: 5px;\n  height: 100%;\n  background-color: ",";\n"])),function(e){var t;return null!==(t=e.color)&&void 0!==t?t:Jr});const ni=function e(t){var i=t.node,o=t.depth,a=t.currentFile,s=t.handleFileClick,l=t.handleFolderClick,c=t.menuProps,f=u(),d=(0,r.useState)(!1),p=d[0],h=d[1],m=(0,r.useState)(!1),b=m[0],y=m[1],w=(0,r.useState)(void 0),_=(w[0],w[1]),x=function(e){if(void 0===e.detail)return _(void 0),void y(!0);e.detail.name===i.name&&(_(e.detail.color),y(!0))};return(0,r.useEffect)(function(){return g("updateAccentColor",x),function(){v("updateAccentColor",function(){})}},[]),(0,r.useEffect)(function(){b&&y(!1)},[b]),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(Qr,{active:a&&a.path===i.path,bgColor:f.palette.primary,hoverColor:f.palette.primary,onClick:function(){i.is_dir?(h(!p),l(i)):s(i)},children:(0,n.jsxs)(ei,{color:f.palette.text,depth:o,children:[(0,n.jsx)(Hr,{is_dir:i.is_dir,is_collapsed:p,name:i.name,group:i.group}),(0,n.jsx)("label",{children:i.name}),(0,n.jsx)(ti,{stroke:f.palette.text,id:"explorer-action-button",title:"More",viewBox:"0 0 20 20",onClick:function(e){c.showMoreActionsMenu(e,i)}})]})}),!p&&i.files.map(function(t){return(0,n.jsx)(e,{node:t,depth:o+1,currentFile:a,handleFileClick:s,handleFolderClick:l,menuProps:c})})]})};var ri,ii,oi,ai,si=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},li="#666",ci=sr.div(ri||(ri=si(["\n  ","\n"],["\n  ","\n"])),function(e){return e.active?"\n      inline-block\n    ":"\n      none\n    "}),ui=sr.div(ii||(ii=si(["\n  position: absolute;\n  width: auto;\n  z-index: 100;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: flex-start;\n\n  border: 2px solid ",";\n  border-radius: ","px;\n  box-shadow: hsl(0 0% 0% / 10%) 0 0 0.5rem 0.25rem;\n  background-color: ",";\n  top: ",";\n  left: ",";\n"],["\n  position: absolute;\n  width: auto;\n  z-index: 100;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: flex-start;\n\n  border: 2px solid ",";\n  border-radius: ","px;\n  box-shadow: hsl(0 0% 0% / 10%) 0 0 0.5rem 0.25rem;\n  background-color: ",";\n  top: ",";\n  left: ",";\n"])),function(e){var t;return null!==(t=e.borderColor)&&void 0!==t?t:li},function(e){var t;return null!==(t=e.roundness)&&void 0!==t?t:1},function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:li},function(e){return e.top},function(e){return e.left}),fi=sr.div(oi||(oi=si(["\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-top: 0.2rem;\n  padding-bottom: 0.2rem;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: flex-start;\n\n  &:first-of-type {\n    margin-top: 0.4rem;\n  }\n\n  &:last-of-type {\n    margin-bottom: 0.4rem;\n  }\n\n  &:hover {\n    background-color: ",";\n  }\n"],["\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-top: 0.2rem;\n  padding-bottom: 0.2rem;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: flex-start;\n\n  &:first-of-type {\n    margin-top: 0.4rem;\n  }\n\n  &:last-of-type {\n    margin-bottom: 0.4rem;\n  }\n\n  &:hover {\n    background-color: ",";\n  }\n"])),function(e){var t;return null!==(t=e.hoverColor)&&void 0!==t?t:li}),di=sr.div(ai||(ai=si(["\n  height: 2px;\n  margin-top: 0.4rem;\n  margin-bottom: 0.4rem;\n  width: 100%;\n  background-color: ",";\n"],["\n  height: 2px;\n  margin-top: 0.4rem;\n  margin-bottom: 0.4rem;\n  width: 100%;\n  background-color: ",";\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:li});const pi=function(e){var t,i,o,a=e.menuProps,s=e.onDelete,l=e.onCreateFile,c=e.onCreateFolder,f=e.onUpload,d=e.onDownload,p=e.onRename,h=(0,r.useRef)(null),g=u();(0,r.useEffect)(function(){a.isShown?document.addEventListener("mousedown",v):document.removeEventListener("mousedown",v)},[a.isShown]);var v=function(e){h.current&&!h.current.contains(e.target)&&a.showCallback(!1)},m=function(){a.showCallback(!1)};return(0,n.jsx)(ci,{active:a.isShown,ref:h,children:(0,n.jsxs)(ui,{bgColor:g.palette.background,borderColor:g.palette.secondary,roundness:g.roundness,top:a.position.y,left:a.position.x,children:["Trees"!==(null===(t=a.file)||void 0===t?void 0:t.group)&&(0,n.jsx)(fi,{hoverColor:g.palette.secondary,onClick:function(){p(a.file),m()},children:(0,n.jsx)("label",{children:"Rename"})}),(0,n.jsx)(fi,{hoverColor:g.palette.secondary,onClick:function(){d(a.file),m()},children:(0,n.jsx)("label",{children:"Download"})}),(0,n.jsx)(fi,{hoverColor:g.palette.secondary,onClick:function(){s(a.file.path,a.file.is_dir),m()},children:(0,n.jsx)("label",{children:"Delete"})}),!a.file.is_dir&&"Action"===(null===(i=a.file)||void 0===i?void 0:i.group)&&!1,"Trees"!==(null===(o=a.file)||void 0===o?void 0:o.group)&&(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(di,{bgColor:g.palette.secondary}),(0,n.jsx)(fi,{hoverColor:g.palette.secondary,onClick:function(){l(a.file),m()},children:(0,n.jsx)("label",{children:"New File"})}),(0,n.jsx)(fi,{hoverColor:g.palette.secondary,onClick:function(){c(a.file),m()},children:(0,n.jsx)("label",{children:"New Folder"})}),(0,n.jsx)(fi,{hoverColor:g.palette.secondary,onClick:function(){f(a.file),m()},children:(0,n.jsx)("label",{children:"Upload"})})]})]})})};var hi,gi,vi,mi=function(){function e(e,t,n,r,i,o){this.isShown=e,this.showCallback=t,this.position=n,this.setPositionCallback=r,this.file=i,this.setFile=o}return e.prototype.showMoreActionsMenu=function(e,t){e.preventDefault(),e.stopPropagation(),this.showCallback(!1);var n={x:220,y:e.pageY};this.setPositionCallback(n),this.showCallback(!0),this.setFile(t)},e}(),bi=sr.div(hi||(gi=["\n  overflow-y: auto;\n"],vi=["\n  overflow-y: auto;\n"],Object.defineProperty?Object.defineProperty(gi,"raw",{value:vi}):gi.raw=vi,hi=gi));const yi=function(e){var t=e.setCurrentFile,i=e.currentFile,o=e.currentProjectname,s=e.setSelectedEntry,l=e.fileList,c=e.fetchFileList,u=e.onDelete,f=e.onCreateFile,d=e.onCreateFolder,p=e.onUpload,h=e.onDownload,g=e.onRename,v=(0,r.useState)(!1),m=v[0],b=v[1],y=(0,r.useState)(void 0),w=y[0],_=y[1],x=a().useState({x:0,y:0}),k=x[0],j=x[1],C=new mi(m,b,k,j,w,_);(0,r.useEffect)(function(){c(),t(void 0),s(void 0),console.log("The file list is: ",l),Array.isArray(l)&&console.log("Yes it is an array")},[o]);var S=function(e){t(e),s(e)},z=function(e){s(e)};return Array.isArray(l)?(0,n.jsxs)(bi,{children:[l.map(function(e){return(0,n.jsx)(ni,{node:e,depth:0,currentFile:i,handleFileClick:S,handleFolderClick:z,menuProps:C})}),m&&(0,n.jsx)(pi,{menuProps:C,onDelete:u,onCreateFile:f,onCreateFolder:d,onUpload:p,onDownload:h,onRename:g})]}):(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("p",{children:"Create or select a project to start"})})};var wi,_i,xi,ki,ji=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Ci=sr.div(wi||(wi=ji(["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 1px;\n"],["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 1px;\n"]))),Si=sr.div(_i||(_i=ji(["\n  height: fit-content;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  gap: 4px;\n"],["\n  height: fit-content;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  gap: 4px;\n"]))),zi=sr.div(xi||(xi=ji(["\n  display: flex;\n  align-items: center;\n  height: 32px;\n  padding: 0 10px 0 10px;\n  gap: 5px;\n  background-color: ",";\n"],["\n  display: flex;\n  align-items: center;\n  height: 32px;\n  padding: 0 10px 0 10px;\n  gap: 5px;\n  background-color: ",";\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:"#666"}),Ei="#666",Oi=sr.button(ki||(ki=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 24px;\n  height: 24px;\n  border: 0;\n  padding: 0 0 0 0;\n  border-radius: ","px;\n\n  &:hover {\n    background-color: "," !important;\n\n    & svg {\n      opacity: 100%;\n    }\n  }\n\n  ","\n  ","\n  ","\n\n  & svg {\n    width: 20px;\n    height: 20px;\n    opacity: 100%;\n  }\n"],["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 24px;\n  height: 24px;\n  border: 0;\n  padding: 0 0 0 0;\n  border-radius: ","px;\n\n  &:hover {\n    background-color: "," !important;\n\n    & svg {\n      opacity: 100%;\n    }\n  }\n\n  ","\n  ","\n  ","\n\n  & svg {\n    width: 20px;\n    height: 20px;\n    opacity: 100%;\n  }\n"])),function(e){var t;return null!==(t=e.roundness)&&void 0!==t?t:1},function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:Ei},function(e){var t;switch(e.variant){case"standard":return"\n        background-color: transparent;\n      ";case"colored":return"\n        background-color: ".concat(null!==(t=e.bgColor)&&void 0!==t?t:Ei,";\n      ");case"tab":return"\n        background-color: transparent;\n        width: 48px;\n      "}},function(e){var t;if(e.active)return"\n      background-color: ".concat(null!==(t=e.bgColor)&&void 0!==t?t:Ei,";\n      & svg {\n        opacity: 100% !important;\n      }\n    ")},function(e){var t,n;switch(e.iconType){case"fill":return"\n        & svg {\n          fill: ".concat(null!==(t=e.color)&&void 0!==t?t:Ei,";\n        }\n      ");case"stroke":return"\n        & svg {\n          stroke: ".concat(null!==(n=e.color)&&void 0!==n?n:Ei,";\n        }\n      ")}}),Ai=function(e){var t,r,i=e.active,o=void 0!==i&&i,a=e.variant,s=void 0===a?"standard":a,l=e.iconType,c=e.title,f=e.id,d=e.onClick,p=e.children,h=u();return(0,n.jsx)(Oi,{bgColor:null===(t=h.palette)||void 0===t?void 0:t.secondary,color:null===(r=h.palette)||void 0===r?void 0:r.text,roundness:h.roundness,variant:s,iconType:l,title:c,id:f,active:o,onClick:function(){return d()},children:p})};const Ri=Ai;var Ii=function(e){var t=e.title,r=e.id,i=e.onClick,o=e.children;return(0,n.jsx)(Ai,{active:!1,variant:"standard",iconType:"fill",title:t,id:r,onClick:function(){return i()},children:o})},Pi=function(e){var t=e.title,r=e.id,i=e.onClick,o=e.children;return(0,n.jsx)(Ai,{active:!1,variant:"standard",iconType:"stroke",title:t,id:r,onClick:function(){return i()},children:o})},Ti=function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}l((r=r.apply(e,t||[])).next())})},Bi=function(e,t){var n,r,i,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=s(0),a.throw=s(1),a.return=s(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};function Li(e){if(e.is_dir)return e.path;var t=e.path.split("/");return t.slice(0,t.length-1).join("/")}const Fi=function(e){var t=e.setCurrentFile,i=e.currentFile,o=e.project,a=e.api,s=h(),l=s.warning,c=s.error,f=u(),d=(0,r.useState)([]),p=d[0],g=d[1],v=(0,r.useState)(void 0),m=v[0],b=v[1],y=(0,r.useState)(void 0),w=y[0],_=y[1],x=(0,r.useState)(void 0),k=x[0],j=x[1],C=(0,r.useState)(""),S=C[0],z=C[1],O=(0,r.useState)(!1),A=O[0],R=O[1],P=(0,r.useState)(!1),T=P[0],B=P[1],L=(0,r.useState)(!1),F=L[0],N=L[1],M=(0,r.useState)(!1),D=M[0],W=M[1],U=(0,r.useState)(!1),$=U[0],H=U[1],Z=(0,r.useState)(!1),G=Z[0],V=Z[1];(0,r.useEffect)(function(){q(void 0)},[k]);var q=function(e){z(e?Li(e):k?Li(k):"")},Y=function(){return Ti(void 0,void 0,void 0,function(){var e,t,n;return Bi(this,function(r){switch(r.label){case 0:if(console.log("Fecthing file list, the project name is:",o),""===o)return[3,4];r.label=1;case 1:return r.trys.push([1,3,,4]),[4,a.list(o)];case 2:return e=r.sent(),t=JSON.parse(e),g(t),[3,4];case 3:return(n=r.sent())instanceof Error&&(console.error("Error fetching files:",n),c("Error fetching files: "+n.message)),[3,4];case 4:return[2]}})})},X=function(e){q(e),R(!0)},J=function(){R(!1);var e=document.getElementById("fileName");e&&(e.value="")},Q=function(e,t){e?(b(e),V(t),W(!0)):l("No file is currently selected.")},ee=function(){W(!1),b(void 0),V(!1)},te=function(e){q(e),B(!0)},ne=function(e){e?(_(e),N(!0)):l("No file is currently selected.")},re=function(){N(!1)},ie=function(){H(!1),Y()},oe=function(e,t,n){return Ti(void 0,void 0,void 0,function(){var r;return Bi(this,function(i){switch(i.label){case 0:return[4,a.file.get(o,t)];case 1:return r=i.sent(),e.file(n,r),[2]}})})},ae=function(e,t){return Ti(void 0,void 0,void 0,function(){var n,r,i;return Bi(this,function(o){switch(o.label){case 0:if(null===(n=e.folder(t.name)))return[2];r=0,o.label=1;case 1:return r<t.files.length?(i=t.files[r]).is_dir?[4,ae(n,i)]:[3,3]:[3,6];case 2:return o.sent(),[3,5];case 3:return[4,oe(n,i.path,i.name)];case 4:o.sent(),o.label=5;case 5:return r++,[3,1];case 6:return[2]}})})};return(0,n.jsxs)(Ci,{id:a.name,children:[(0,n.jsxs)(Si,{children:[(0,n.jsxs)(zi,{bgColor:f.palette.primary,children:[(0,n.jsx)(Ii,{id:"new-file-button",onClick:function(){return X(void 0)},title:"Create a new file",children:(0,n.jsx)(I,{viewBox:"0 0 20 20"})}),(0,n.jsx)(Pi,{id:"new-folder-button",onClick:function(){return te(void 0)},title:"Create a new folder",children:(0,n.jsx)(E,{viewBox:"0 0 20 20"})}),(0,n.jsx)(Pi,{id:"refresh-explorer-button",onClick:function(){return Y()},title:"Refresh View",children:(0,n.jsx)(de,{viewBox:"0 0 20 20"})}),(0,n.jsx)("div",{style:{marginLeft:"auto"}}),i&&(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(Pi,{id:"rename-file-button",onClick:function(){return Ti(void 0,void 0,void 0,function(){return Bi(this,function(e){return i?ne(i):l("No file is currently selected."),[2]})})},title:"Rename file",children:(0,n.jsx)(ge,{viewBox:"0 0 20 20"})}),(0,n.jsx)(Ii,{id:"delete-file-button",onClick:function(){i?Q(i,!1):l("No file is currently selected.")},title:"Delete file",children:(0,n.jsx)(K,{viewBox:"0 0 .9375 .9375"})})]})]}),(0,n.jsx)(yi,{setCurrentFile:t,currentFile:i,currentProjectname:o,setSelectedEntry:j,fileList:p,fetchFileList:Y,onDelete:Q,onCreateFile:X,onCreateFolder:te,onUpload:function(e){q(e),H(!0)},onDownload:function(e){return Ti(void 0,void 0,void 0,function(){var t,n;return Bi(this,function(r){switch(r.label){case 0:if(!e)return[3,7];r.label=1;case 1:return r.trys.push([1,6,,7]),t=new($r()),e.is_dir?[4,ae(t,e)]:[3,3];case 2:return r.sent(),[3,5];case 3:return[4,oe(t,e.path,e.name)];case 4:r.sent(),r.label=5;case 5:return t.generateAsync({type:"blob"}).then(function(t){var n=window.URL.createObjectURL(t),r=document.createElement("a");r.style.display="none",r.href=n,r.download="".concat(e.name.split(".")[0],".zip"),document.body.appendChild(r),r.click(),window.URL.revokeObjectURL(n)}),[3,7];case 6:return(n=r.sent())instanceof Error&&(console.error("Error downloading file: "+n),c("Error downloading file: "+n.message)),[3,7];case 7:return[2]}})})},onRename:ne})]}),(0,n.jsx)(Rs,{isOpen:A,onSubmit:function(e,t){return Ti(void 0,void 0,void 0,function(){var n;return Bi(this,function(r){switch(r.label){case 0:if(J(),""===t.fileName)return[3,4];r.label=1;case 1:return r.trys.push([1,3,,4]),[4,a.file.create(o,e,t)];case 2:return r.sent(),Y(),[3,4];case 3:return(n=r.sent())instanceof Error&&(console.error("Error creating file:",n),c("Error creating file"+n.message)),[3,4];case 4:return[2]}})})},onClose:J,fileList:p,location:S}),(0,n.jsx)(Ns,{isOpen:T,onSubmit:function(e,t){return Ti(void 0,void 0,void 0,function(){var n;return Bi(this,function(r){switch(r.label){case 0:if(""===t)return[3,4];r.label=1;case 1:return r.trys.push([1,3,,4]),[4,a.folder.create(o,t,e)];case 2:return r.sent(),Y(),[3,4];case 3:return(n=r.sent())instanceof Error&&(console.error("Error creating folder:",n.message),c("Error creating folder: "+n.message)),[3,4];case 4:return[2]}})})},onClose:function(){B(!1);var e=document.getElementById("folderName");e&&(e.value="")},fileList:p,location:S}),w&&(0,n.jsx)(Ws,{isOpen:F,onSubmit:function(e){return Ti(void 0,void 0,void 0,function(){var n;return Bi(this,function(r){switch(r.label){case 0:if(!w)return[3,8];r.label=1;case 1:return r.trys.push([1,6,,7]),console.log(w),w.is_dir?[4,a.folder.rename(o,w.path,e)]:[3,3];case 2:return r.sent(),[3,5];case 3:return[4,a.file.rename(o,w.path,e)];case 4:r.sent(),r.label=5;case 5:return Y(),i&&i.path===w.path&&(i.path=e,t(i)),[3,7];case 6:return(n=r.sent())instanceof Error&&(console.error("Error deleting file:",n),c("Error deleting file: "+n.message)),[3,7];case 7:return[3,9];case 8:l("No file is currently selected."),r.label=9;case 9:return re(),[2]}})})},onClose:re,fileList:p,selectedEntry:w}),(0,n.jsx)(Vs,{isOpen:$,onSubmit:ie,onClose:ie,location:S,currentProject:o}),m&&(0,n.jsx)(bs,{isOpen:D,onSubmit:function(){return Ti(void 0,void 0,void 0,function(){var e;return Bi(this,function(n){switch(n.label){case 0:if(!m)return[3,8];n.label=1;case 1:return n.trys.push([1,6,,7]),G?[4,a.folder.delete(o,m.path)]:[3,3];case 2:return n.sent(),[3,5];case 3:return[4,a.file.delete(o,m.path)];case 4:n.sent(),n.label=5;case 5:return Y(),i===m&&t(void 0),k&&k.path===m.path&&j(void 0),[3,7];case 6:return(e=n.sent())instanceof Error&&(console.error("Error deleting file:",e),c("Error deleting file"+e.message)),[3,7];case 7:return[3,9];case 8:l("No file is currently selected."),n.label=9;case 9:return ee(),[2]}})})},onClose:ee,selectedEntry:m})]})};var Ni,Mi,Di,Wi,Ui,$i,Hi,Zi=i(33),Gi=function(){return Gi=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},Gi.apply(this,arguments)},Vi={width:"100%",height:"10px",top:"0px",left:"0px",cursor:"row-resize"},qi={width:"10px",height:"100%",top:"0px",left:"0px",cursor:"col-resize"},Ki={width:"20px",height:"20px",position:"absolute",zIndex:1},Yi={top:Gi(Gi({},Vi),{top:"-5px"}),right:Gi(Gi({},qi),{left:void 0,right:"-5px"}),bottom:Gi(Gi({},Vi),{top:void 0,bottom:"-5px"}),left:Gi(Gi({},qi),{left:"-5px"}),topRight:Gi(Gi({},Ki),{right:"-10px",top:"-10px",cursor:"ne-resize"}),bottomRight:Gi(Gi({},Ki),{right:"-10px",bottom:"-10px",cursor:"se-resize"}),bottomLeft:Gi(Gi({},Ki),{left:"-10px",bottom:"-10px",cursor:"sw-resize"}),topLeft:Gi(Gi({},Ki),{left:"-10px",top:"-10px",cursor:"nw-resize"})},Xi=(0,r.memo)(function(e){var t=e.onResizeStart,i=e.direction,o=e.children,a=e.replaceStyles,s=e.className,l=(0,r.useCallback)(function(e){t(e,i)},[t,i]),c=(0,r.useCallback)(function(e){t(e,i)},[t,i]),u=(0,r.useMemo)(function(){return Gi(Gi({position:"absolute",userSelect:"none"},Yi[i]),null!=a?a:{})},[a,i]);return(0,n.jsx)("div",{className:s||void 0,style:u,onMouseDown:l,onTouchStart:c,children:o})}),Ji=(Hi=function(e,t){return Hi=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},Hi(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Hi(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),Qi=function(){return Qi=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},Qi.apply(this,arguments)},eo={width:"auto",height:"auto"},to=function(e,t,n){return Math.max(Math.min(e,n),t)},no=function(e,t,n){var r=Math.round(e/t);return r*t+n*(r-1)},ro=function(e,t){return new RegExp(e,"i").test(t)},io=function(e){return Boolean(e.touches&&e.touches.length)},oo=function(e,t,n){void 0===n&&(n=0);var r=t.reduce(function(n,r,i){return Math.abs(r-e)<Math.abs(t[n]-e)?i:n},0),i=Math.abs(t[r]-e);return 0===n||i<n?t[r]:e},ao=function(e){return"auto"===(e=e.toString())||e.endsWith("px")||e.endsWith("%")||e.endsWith("vh")||e.endsWith("vw")||e.endsWith("vmax")||e.endsWith("vmin")?e:"".concat(e,"px")},so=function(e,t,n,r){if(e&&"string"==typeof e){if(e.endsWith("px"))return Number(e.replace("px",""));if(e.endsWith("%"))return t*(Number(e.replace("%",""))/100);if(e.endsWith("vw"))return n*(Number(e.replace("vw",""))/100);if(e.endsWith("vh"))return r*(Number(e.replace("vh",""))/100)}return e},lo=["as","ref","style","className","grid","gridGap","snap","bounds","boundsByDirection","size","defaultSize","minWidth","minHeight","maxWidth","maxHeight","lockAspectRatio","lockAspectRatioExtraWidth","lockAspectRatioExtraHeight","enable","handleStyles","handleClasses","handleWrapperStyle","handleWrapperClass","children","onResizeStart","onResize","onResizeStop","handleComponent","scale","resizeRatio","snapGap"],co="__resizable_base__",uo=function(e){function t(t){var n,r,i,o,a=e.call(this,t)||this;return a.ratio=1,a.resizable=null,a.parentLeft=0,a.parentTop=0,a.resizableLeft=0,a.resizableRight=0,a.resizableTop=0,a.resizableBottom=0,a.targetLeft=0,a.targetTop=0,a.delta={width:0,height:0},a.appendBase=function(){if(!a.resizable||!a.window)return null;var e=a.parentNode;if(!e)return null;var t=a.window.document.createElement("div");return t.style.width="100%",t.style.height="100%",t.style.position="absolute",t.style.transform="scale(0, 0)",t.style.left="0",t.style.flex="0 0 100%",t.classList?t.classList.add(co):t.className+=co,e.appendChild(t),t},a.removeBase=function(e){var t=a.parentNode;t&&t.removeChild(e)},a.state={isResizing:!1,width:null!==(r=null===(n=a.propsSize)||void 0===n?void 0:n.width)&&void 0!==r?r:"auto",height:null!==(o=null===(i=a.propsSize)||void 0===i?void 0:i.height)&&void 0!==o?o:"auto",direction:"right",original:{x:0,y:0,width:0,height:0},backgroundStyle:{height:"100%",width:"100%",backgroundColor:"rgba(0,0,0,0)",cursor:"auto",opacity:0,position:"fixed",zIndex:9999,top:"0",left:"0",bottom:"0",right:"0"},flexBasis:void 0},a.onResizeStart=a.onResizeStart.bind(a),a.onMouseMove=a.onMouseMove.bind(a),a.onMouseUp=a.onMouseUp.bind(a),a}return Ji(t,e),Object.defineProperty(t.prototype,"parentNode",{get:function(){return this.resizable?this.resizable.parentNode:null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"window",{get:function(){return this.resizable&&this.resizable.ownerDocument?this.resizable.ownerDocument.defaultView:null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"propsSize",{get:function(){return this.props.size||this.props.defaultSize||eo},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){var e=0,t=0;if(this.resizable&&this.window){var n=this.resizable.offsetWidth,r=this.resizable.offsetHeight,i=this.resizable.style.position;"relative"!==i&&(this.resizable.style.position="relative"),e="auto"!==this.resizable.style.width?this.resizable.offsetWidth:n,t="auto"!==this.resizable.style.height?this.resizable.offsetHeight:r,this.resizable.style.position=i}return{width:e,height:t}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sizeStyle",{get:function(){var e=this,t=this.props.size,n=function(t){var n;if(void 0===e.state[t]||"auto"===e.state[t])return"auto";if(e.propsSize&&e.propsSize[t]&&(null===(n=e.propsSize[t])||void 0===n?void 0:n.toString().endsWith("%"))){if(e.state[t].toString().endsWith("%"))return e.state[t].toString();var r=e.getParentSize(),i=Number(e.state[t].toString().replace("px",""))/r[t]*100;return"".concat(i,"%")}return ao(e.state[t])};return{width:t&&void 0!==t.width&&!this.state.isResizing?ao(t.width):n("width"),height:t&&void 0!==t.height&&!this.state.isResizing?ao(t.height):n("height")}},enumerable:!1,configurable:!0}),t.prototype.getParentSize=function(){if(!this.parentNode)return this.window?{width:this.window.innerWidth,height:this.window.innerHeight}:{width:0,height:0};var e=this.appendBase();if(!e)return{width:0,height:0};var t=!1,n=this.parentNode.style.flexWrap;"wrap"!==n&&(t=!0,this.parentNode.style.flexWrap="wrap"),e.style.position="relative",e.style.minWidth="100%",e.style.minHeight="100%";var r={width:e.offsetWidth,height:e.offsetHeight};return t&&(this.parentNode.style.flexWrap=n),this.removeBase(e),r},t.prototype.bindEvents=function(){this.window&&(this.window.addEventListener("mouseup",this.onMouseUp),this.window.addEventListener("mousemove",this.onMouseMove),this.window.addEventListener("mouseleave",this.onMouseUp),this.window.addEventListener("touchmove",this.onMouseMove,{capture:!0,passive:!1}),this.window.addEventListener("touchend",this.onMouseUp))},t.prototype.unbindEvents=function(){this.window&&(this.window.removeEventListener("mouseup",this.onMouseUp),this.window.removeEventListener("mousemove",this.onMouseMove),this.window.removeEventListener("mouseleave",this.onMouseUp),this.window.removeEventListener("touchmove",this.onMouseMove,!0),this.window.removeEventListener("touchend",this.onMouseUp))},t.prototype.componentDidMount=function(){if(this.resizable&&this.window){var e=this.window.getComputedStyle(this.resizable);this.setState({width:this.state.width||this.size.width,height:this.state.height||this.size.height,flexBasis:"auto"!==e.flexBasis?e.flexBasis:void 0})}},t.prototype.componentWillUnmount=function(){this.window&&this.unbindEvents()},t.prototype.createSizeForCssProperty=function(e,t){var n=this.propsSize&&this.propsSize[t];return"auto"!==this.state[t]||this.state.original[t]!==e||void 0!==n&&"auto"!==n?e:"auto"},t.prototype.calculateNewMaxFromBoundary=function(e,t){var n,r,i=this.props.boundsByDirection,o=this.state.direction,a=i&&ro("left",o),s=i&&ro("top",o);if("parent"===this.props.bounds){var l=this.parentNode;l&&(n=a?this.resizableRight-this.parentLeft:l.offsetWidth+(this.parentLeft-this.resizableLeft),r=s?this.resizableBottom-this.parentTop:l.offsetHeight+(this.parentTop-this.resizableTop))}else"window"===this.props.bounds?this.window&&(n=a?this.resizableRight:this.window.innerWidth-this.resizableLeft,r=s?this.resizableBottom:this.window.innerHeight-this.resizableTop):this.props.bounds&&(n=a?this.resizableRight-this.targetLeft:this.props.bounds.offsetWidth+(this.targetLeft-this.resizableLeft),r=s?this.resizableBottom-this.targetTop:this.props.bounds.offsetHeight+(this.targetTop-this.resizableTop));return n&&Number.isFinite(n)&&(e=e&&e<n?e:n),r&&Number.isFinite(r)&&(t=t&&t<r?t:r),{maxWidth:e,maxHeight:t}},t.prototype.calculateNewSizeFromDirection=function(e,t){var n,r=this.props.scale||1,i=(n=this.props.resizeRatio||1,Array.isArray(n)?n:[n,n]),o=i[0],a=i[1],s=this.state,l=s.direction,c=s.original,u=this.props,f=u.lockAspectRatio,d=u.lockAspectRatioExtraHeight,p=u.lockAspectRatioExtraWidth,h=c.width,g=c.height,v=d||0,m=p||0;return ro("right",l)&&(h=c.width+(e-c.x)*o/r,f&&(g=(h-m)/this.ratio+v)),ro("left",l)&&(h=c.width-(e-c.x)*o/r,f&&(g=(h-m)/this.ratio+v)),ro("bottom",l)&&(g=c.height+(t-c.y)*a/r,f&&(h=(g-v)*this.ratio+m)),ro("top",l)&&(g=c.height-(t-c.y)*a/r,f&&(h=(g-v)*this.ratio+m)),{newWidth:h,newHeight:g}},t.prototype.calculateNewSizeFromAspectRatio=function(e,t,n,r){var i=this.props,o=i.lockAspectRatio,a=i.lockAspectRatioExtraHeight,s=i.lockAspectRatioExtraWidth,l=void 0===r.width?10:r.width,c=void 0===n.width||n.width<0?e:n.width,u=void 0===r.height?10:r.height,f=void 0===n.height||n.height<0?t:n.height,d=a||0,p=s||0;if(o){var h=(u-d)*this.ratio+p,g=(f-d)*this.ratio+p,v=(l-p)/this.ratio+d,m=(c-p)/this.ratio+d,b=Math.max(l,h),y=Math.min(c,g),w=Math.max(u,v),_=Math.min(f,m);e=to(e,b,y),t=to(t,w,_)}else e=to(e,l,c),t=to(t,u,f);return{newWidth:e,newHeight:t}},t.prototype.setBoundingClientRect=function(){var e=1/(this.props.scale||1);if("parent"===this.props.bounds){var t=this.parentNode;if(t){var n=t.getBoundingClientRect();this.parentLeft=n.left*e,this.parentTop=n.top*e}}if(this.props.bounds&&"string"!=typeof this.props.bounds){var r=this.props.bounds.getBoundingClientRect();this.targetLeft=r.left*e,this.targetTop=r.top*e}if(this.resizable){var i=this.resizable.getBoundingClientRect(),o=i.left,a=i.top,s=i.right,l=i.bottom;this.resizableLeft=o*e,this.resizableRight=s*e,this.resizableTop=a*e,this.resizableBottom=l*e}},t.prototype.onResizeStart=function(e,t){if(this.resizable&&this.window){var n,r=0,i=0;if(e.nativeEvent&&function(e){return Boolean((e.clientX||0===e.clientX)&&(e.clientY||0===e.clientY))}(e.nativeEvent)?(r=e.nativeEvent.clientX,i=e.nativeEvent.clientY):e.nativeEvent&&io(e.nativeEvent)&&(r=e.nativeEvent.touches[0].clientX,i=e.nativeEvent.touches[0].clientY),this.props.onResizeStart&&this.resizable&&!1===this.props.onResizeStart(e,t,this.resizable))return;this.props.size&&(void 0!==this.props.size.height&&this.props.size.height!==this.state.height&&this.setState({height:this.props.size.height}),void 0!==this.props.size.width&&this.props.size.width!==this.state.width&&this.setState({width:this.props.size.width})),this.ratio="number"==typeof this.props.lockAspectRatio?this.props.lockAspectRatio:this.size.width/this.size.height;var o=this.window.getComputedStyle(this.resizable);if("auto"!==o.flexBasis){var a=this.parentNode;if(a){var s=this.window.getComputedStyle(a).flexDirection;this.flexDir=s.startsWith("row")?"row":"column",n=o.flexBasis}}this.setBoundingClientRect(),this.bindEvents();var l={original:{x:r,y:i,width:this.size.width,height:this.size.height},isResizing:!0,backgroundStyle:Qi(Qi({},this.state.backgroundStyle),{cursor:this.window.getComputedStyle(e.target).cursor||"auto"}),direction:t,flexBasis:n};this.setState(l)}},t.prototype.onMouseMove=function(e){var t=this;if(this.state.isResizing&&this.resizable&&this.window){if(this.window.TouchEvent&&io(e))try{e.preventDefault(),e.stopPropagation()}catch(e){}var n=this.props,r=n.maxWidth,i=n.maxHeight,o=n.minWidth,a=n.minHeight,s=io(e)?e.touches[0].clientX:e.clientX,l=io(e)?e.touches[0].clientY:e.clientY,c=this.state,u=c.direction,f=c.original,d=c.width,p=c.height,h=this.getParentSize(),g=function(e,t,n,r,i,o,a){return r=so(r,e.width,t,n),i=so(i,e.height,t,n),o=so(o,e.width,t,n),a=so(a,e.height,t,n),{maxWidth:void 0===r?void 0:Number(r),maxHeight:void 0===i?void 0:Number(i),minWidth:void 0===o?void 0:Number(o),minHeight:void 0===a?void 0:Number(a)}}(h,this.window.innerWidth,this.window.innerHeight,r,i,o,a);r=g.maxWidth,i=g.maxHeight,o=g.minWidth,a=g.minHeight;var v=this.calculateNewSizeFromDirection(s,l),m=v.newHeight,b=v.newWidth,y=this.calculateNewMaxFromBoundary(r,i);this.props.snap&&this.props.snap.x&&(b=oo(b,this.props.snap.x,this.props.snapGap)),this.props.snap&&this.props.snap.y&&(m=oo(m,this.props.snap.y,this.props.snapGap));var w=this.calculateNewSizeFromAspectRatio(b,m,{width:y.maxWidth,height:y.maxHeight},{width:o,height:a});if(b=w.newWidth,m=w.newHeight,this.props.grid){var _=no(b,this.props.grid[0],this.props.gridGap?this.props.gridGap[0]:0),x=no(m,this.props.grid[1],this.props.gridGap?this.props.gridGap[1]:0),k=this.props.snapGap||0;b=0===k||Math.abs(_-b)<=k?_:b,m=0===k||Math.abs(x-m)<=k?x:m}var j={width:b-f.width,height:m-f.height};if(this.delta=j,d&&"string"==typeof d)if(d.endsWith("%")){var C=b/h.width*100;b="".concat(C,"%")}else if(d.endsWith("vw")){var S=b/this.window.innerWidth*100;b="".concat(S,"vw")}else if(d.endsWith("vh")){var z=b/this.window.innerHeight*100;b="".concat(z,"vh")}p&&"string"==typeof p&&(p.endsWith("%")?(C=m/h.height*100,m="".concat(C,"%")):p.endsWith("vw")?(S=m/this.window.innerWidth*100,m="".concat(S,"vw")):p.endsWith("vh")&&(z=m/this.window.innerHeight*100,m="".concat(z,"vh")));var E={width:this.createSizeForCssProperty(b,"width"),height:this.createSizeForCssProperty(m,"height")};"row"===this.flexDir?E.flexBasis=E.width:"column"===this.flexDir&&(E.flexBasis=E.height);var O=this.state.width!==E.width,A=this.state.height!==E.height,R=this.state.flexBasis!==E.flexBasis,I=O||A||R;I&&(0,Zi.flushSync)(function(){t.setState(E)}),this.props.onResize&&I&&this.props.onResize(e,u,this.resizable,j)}},t.prototype.onMouseUp=function(e){var t,n,r=this.state,i=r.isResizing,o=r.direction;r.original,i&&this.resizable&&(this.props.onResizeStop&&this.props.onResizeStop(e,o,this.resizable,this.delta),this.props.size&&this.setState({width:null!==(t=this.props.size.width)&&void 0!==t?t:"auto",height:null!==(n=this.props.size.height)&&void 0!==n?n:"auto"}),this.unbindEvents(),this.setState({isResizing:!1,backgroundStyle:Qi(Qi({},this.state.backgroundStyle),{cursor:"auto"})}))},t.prototype.updateSize=function(e){var t,n;this.setState({width:null!==(t=e.width)&&void 0!==t?t:"auto",height:null!==(n=e.height)&&void 0!==n?n:"auto"})},t.prototype.renderResizer=function(){var e=this,t=this.props,r=t.enable,i=t.handleStyles,o=t.handleClasses,a=t.handleWrapperStyle,s=t.handleWrapperClass,l=t.handleComponent;if(!r)return null;var c=Object.keys(r).map(function(t){return!1!==r[t]?(0,n.jsx)(Xi,{direction:t,onResizeStart:e.onResizeStart,replaceStyles:i&&i[t],className:o&&o[t],children:l&&l[t]?l[t]:null},t):null});return(0,n.jsx)("div",{className:s,style:a,children:c})},t.prototype.render=function(){var e=this,t=Object.keys(this.props).reduce(function(t,n){return-1!==lo.indexOf(n)||(t[n]=e.props[n]),t},{}),r=Qi(Qi(Qi({position:"relative",userSelect:this.state.isResizing?"none":"auto"},this.props.style),this.sizeStyle),{maxWidth:this.props.maxWidth,maxHeight:this.props.maxHeight,minWidth:this.props.minWidth,minHeight:this.props.minHeight,boxSizing:"border-box",flexShrink:0});this.state.flexBasis&&(r.flexBasis=this.state.flexBasis);var i=this.props.as||"div";return(0,n.jsxs)(i,Qi({style:r,className:this.props.className},t,{ref:function(t){t&&(e.resizable=t)},children:[this.state.isResizing&&(0,n.jsx)("div",{style:this.state.backgroundStyle}),this.props.children,this.renderResizer()]}))},t.defaultProps={as:"div",onResizeStart:function(){},onResize:function(){},onResizeStop:function(){},enable:{top:!0,right:!0,bottom:!0,left:!0,topRight:!0,bottomRight:!0,bottomLeft:!0,topLeft:!0},style:{},grid:[1,1],gridGap:[0,0],lockAspectRatio:!1,lockAspectRatioExtraWidth:0,lockAspectRatioExtraHeight:0,scale:1,resizeRatio:1,snapGap:0},t}(r.PureComponent),fo=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},po="#007bff",ho=sr(uo)(Ni||(Ni=fo(["\n  .hresize-handle {\n    position: absolute;\n    width: 5px !important;\n    height: 100% !important;\n    top: 0 !important;\n    right: -2.5px !important;\n    cursor: ew-resize !important;\n    user-select: none;\n    z-index: 99;\n    &:hover,\n    :active {\n      background-color: ",";\n    }\n    background-color: ",";\n  }\n"],["\n  .hresize-handle {\n    position: absolute;\n    width: 5px !important;\n    height: 100% !important;\n    top: 0 !important;\n    right: -2.5px !important;\n    cursor: ew-resize !important;\n    user-select: none;\n    z-index: 99;\n    &:hover,\n    :active {\n      background-color: ",";\n    }\n    background-color: ",";\n  }\n"])),function(e){var t;return null!==(t=e.hover)&&void 0!==t?t:po},function(e){var t;return null!==(t=e.color)&&void 0!==t?t:po}),go=sr(uo)(Mi||(Mi=fo(["\n  .vresize-handle {\n    position: absolute;\n    height: 5px !important;\n    width: 100% !important;\n    right: 0 !important;\n    cursor: ns-resize !important;\n    user-select: none;\n    z-index: 99;\n    &:hover,\n    :active {\n      background-color: ",";\n    }\n    background-color: ",";\n  }\n"],["\n  .vresize-handle {\n    position: absolute;\n    height: 5px !important;\n    width: 100% !important;\n    right: 0 !important;\n    cursor: ns-resize !important;\n    user-select: none;\n    z-index: 99;\n    &:hover,\n    :active {\n      background-color: ",";\n    }\n    background-color: ",";\n  }\n"])),function(e){var t;return null!==(t=e.hover)&&void 0!==t?t:po},function(e){var t;return null!==(t=e.color)&&void 0!==t?t:po}),vo=sr.div(Di||(Di=fo(["\n  flex-grow: 1;\n  display: flex;\n  flex-direction: row;\n  overflow: hidden;\n  background-color: ",";\n"],["\n  flex-grow: 1;\n  display: flex;\n  flex-direction: row;\n  overflow: hidden;\n  background-color: ",";\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:po}),mo=sr.div(Wi||(Wi=fo(["\n  position: relative;\n  user-select: auto;\n  height: auto;\n  max-width: 100%;\n  min-width: 0%;\n  box-sizing: border-box;\n  flex-shrink: 0;\n  flex-grow: 1;\n  z-index: 1;\n  background-color: ",";\n"],["\n  position: relative;\n  user-select: auto;\n  height: auto;\n  max-width: 100%;\n  min-width: 0%;\n  box-sizing: border-box;\n  flex-shrink: 0;\n  flex-grow: 1;\n  z-index: 1;\n  background-color: ",";\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:po}),bo=sr.div(Ui||(Ui=fo(["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  flex-grow: 1;\n  z-index: 3;\n  background-color: ",";\n"],["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  flex-grow: 1;\n  z-index: 3;\n  background-color: ",";\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:po}),yo=sr.div($i||($i=fo(["\n  position: relative;\n  user-select: auto;\n  width: auto;\n  max-height: 100%;\n  min-height: 0%;\n  box-sizing: border-box;\n  flex-shrink: 0;\n  flex-grow: 1;\n  z-index: 1;\n  background-color: ",";\n"],["\n  position: relative;\n  user-select: auto;\n  width: auto;\n  max-height: 100%;\n  min-height: 0%;\n  box-sizing: border-box;\n  flex-shrink: 0;\n  flex-grow: 1;\n  z-index: 1;\n  background-color: ",";\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:po}),wo=function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))},_o=function(e){var t,r,i=e.width,o=e.min,a=e.max,s=e.snap,l=e.children,c=u();return(0,n.jsx)(ho,{color:null===(t=c.palette)||void 0===t?void 0:t.primary,hover:null===(r=c.palette)||void 0===r?void 0:r.secondary,defaultSize:{width:"".concat(i,"%")},enable:{top:!1,right:!0,bottom:!1,left:!1,topRight:!1,bottomRight:!1,bottomLeft:!1,topLeft:!1},bounds:"parent",handleClasses:{right:"hresize-handle"},maxWidth:"".concat(a,"%"),minWidth:"".concat(o,"%"),snap:{x:s},snapGap:100,children:l})};_o.defaultProps={min:0,max:100,snap:[]};var xo=function(e){var t,r,i=e.height,o=e.min,a=e.max,s=e.snap,l=e.children,c=u();return(0,n.jsx)(go,{color:null===(t=c.palette)||void 0===t?void 0:t.primary,hover:null===(r=c.palette)||void 0===r?void 0:r.secondary,defaultSize:{height:"".concat(i,"%")},enable:{top:!1,right:!1,bottom:!0,left:!1,topRight:!1,bottomRight:!1,bottomLeft:!1,topLeft:!1},bounds:"parent",handleClasses:{bottom:"vresize-handle"},maxHeight:"".concat(a,"%"),minHeight:"".concat(o,"%"),snap:{y:s},snapGap:100,children:l})};xo.defaultProps={min:0,max:100,snap:[]};var ko=function(e){var t,r,i,o,a=e.children,s=u();return 1===a.length?(0,n.jsx)(bo,{bgColor:null===(t=s.palette)||void 0===t?void 0:t.background,children:a[0]}):2===a.length?(0,n.jsxs)(bo,{bgColor:null===(r=s.palette)||void 0===r?void 0:r.background,children:[(0,n.jsx)(xo,{height:100/a.length,max:100,snap:[0],children:a[0]}),(0,n.jsx)(yo,{bgColor:null===(i=s.palette)||void 0===i?void 0:i.background,children:a[1]})]}):(0,n.jsx)(bo,{bgColor:null===(o=s.palette)||void 0===o?void 0:o.background})},jo=function(e){var t,r,i,o=e.baseWidth,a=e.maxWidth,s=e.showExplorer,l=e.layout,c=e.splashIcon,f=e.children,d=u();return"only-editor"===l&&(f.pop(),o.pop(),a.pop()),"only-viewers"===l&&(f.splice(1,1),o.splice(1,1),a.splice(1,1)),s||(f=wo(wo([],f.slice(0,0),!0),f.slice(1),!0),o.shift(),a.shift()),0===f.length?(0,n.jsx)(n.Fragment,{children:c}):1===f.length?(0,n.jsx)(vo,{bgColor:null===(t=d.palette)||void 0===t?void 0:t.primary,children:f[0]}):(0,n.jsxs)(vo,{id:"styled-horiz-container",bgColor:null===(r=d.palette)||void 0===r?void 0:r.primary,children:[f.slice(0,f.length-1).map(function(e,t){return(0,n.jsx)(_o,{width:o[t],max:a[t],snap:[0],children:e})}),(0,n.jsx)(mo,{bgColor:null===(i=d.palette)||void 0===i?void 0:i.primary,children:f[f.length-1]})]})},Co=function(e){for(var t,r,i,o=e.state,a=e.splashIcon,s=e.children,l=u(),c=o.length-1;c>=0;c--)o[c]||s.splice(c,1);return 0===s.length?(0,n.jsx)(n.Fragment,{children:a}):1===s.length?(0,n.jsx)(bo,{bgColor:null===(t=l.palette)||void 0===t?void 0:t.background,children:s[0]}):(0,n.jsxs)(bo,{bgColor:null===(r=l.palette)||void 0===r?void 0:r.background,children:[s.slice(0,s.length-1).map(function(e,t){return(0,n.jsx)(xo,{height:100/s.length,max:100,snap:[0],children:e})}),(0,n.jsx)(yo,{bgColor:null===(i=l.palette)||void 0===i?void 0:i.background,children:s[s.length-1]})]})};function So(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function zo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function Eo(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?zo(Object(n),!0).forEach(function(t){So(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):zo(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function Oo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ao(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ro(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function Io(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ro(Object(n),!0).forEach(function(t){Ao(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ro(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function Po(e){return function t(){for(var n=this,r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return i.length>=e.length?e.apply(this,i):function(){for(var e=arguments.length,r=new Array(e),o=0;o<e;o++)r[o]=arguments[o];return t.apply(n,[].concat(i,r))}}}function To(e){return{}.toString.call(e).includes("Object")}function Bo(e){return"function"==typeof e}var Lo=Po(function(e,t){throw new Error(e[t]||e.default)})({initialIsRequired:"initial state is required",initialType:"initial state should be an object",initialContent:"initial state shouldn't be an empty object",handlerType:"handler should be an object or a function",handlersType:"all handlers should be a functions",selectorType:"selector should be a function",changeType:"provided value of changes should be an object",changeField:'it seams you want to change a field in the state which is not specified in the "initial" state',default:"an unknown error accured in `state-local` package"}),Fo=function(e,t){return To(t)||Lo("changeType"),Object.keys(t).some(function(t){return n=e,r=t,!Object.prototype.hasOwnProperty.call(n,r);var n,r})&&Lo("changeField"),t},No=function(e){Bo(e)||Lo("selectorType")},Mo=function(e){Bo(e)||To(e)||Lo("handlerType"),To(e)&&Object.values(e).some(function(e){return!Bo(e)})&&Lo("handlersType")},Do=function(e){var t;e||Lo("initialIsRequired"),To(e)||Lo("initialType"),t=e,Object.keys(t).length||Lo("initialContent")};function Wo(e,t){return Bo(t)?t(e.current):t}function Uo(e,t){return e.current=Io(Io({},e.current),t),t}function $o(e,t,n){return Bo(t)?t(e.current):Object.keys(n).forEach(function(n){var r;return null===(r=t[n])||void 0===r?void 0:r.call(t,e.current[n])}),n}var Ho={create:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Do(e),Mo(t);var n={current:e},r=Po($o)(n,t),i=Po(Uo)(n),o=Po(Fo)(e),a=Po(Wo)(n);return[function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(e){return e};return No(e),e(n.current)},function(e){!function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.reduceRight(function(e,t){return t(e)},e)}}(r,i,o,a)(e)}]}};const Zo=Ho;var Go,Vo={configIsRequired:"the configuration object is required",configType:"the configuration object should be an object",default:"an unknown error accured in `@monaco-editor/loader` package",deprecation:"Deprecation warning!\n    You are using deprecated way of configuration.\n\n    Instead of using\n      monaco.config({ urls: { monacoBase: '...' } })\n    use\n      monaco.config({ paths: { vs: '...' } })\n\n    For more please check the link https://github.com/suren-atoyan/monaco-loader#config\n  "},qo=(Go=function(e,t){throw new Error(e[t]||e.default)},function e(){for(var t=this,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return r.length>=Go.length?Go.apply(this,r):function(){for(var n=arguments.length,i=new Array(n),o=0;o<n;o++)i[o]=arguments[o];return e.apply(t,[].concat(r,i))}})(Vo);const Ko={config:function(e){return e||qo("configIsRequired"),t=e,{}.toString.call(t).includes("Object")||qo("configType"),e.urls?(console.warn(Vo.deprecation),{paths:{vs:e.urls.monacoBase}}):e;var t}},Yo=function e(t,n){return Object.keys(n).forEach(function(r){n[r]instanceof Object&&t[r]&&Object.assign(n[r],e(t[r],n[r]))}),Eo(Eo({},t),n)};var Xo={type:"cancelation",msg:"operation is manually canceled"};const Jo=function(e){var t=!1,n=new Promise(function(n,r){e.then(function(e){return t?r(Xo):n(e)}),e.catch(r)});return n.cancel=function(){return t=!0},n};var Qo,ea=function(e){if(Array.isArray(e))return e}(Qo=Zo.create({config:{paths:{vs:"https://cdn.jsdelivr.net/npm/monaco-editor@0.52.2/min/vs"}},isInitialized:!1,resolve:null,reject:null,monaco:null}))||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],n=!0,r=!1,i=void 0;try{for(var o,a=e[Symbol.iterator]();!(n=(o=a.next()).done)&&(t.push(o.value),2!==t.length);n=!0);}catch(e){r=!0,i=e}finally{try{n||null==a.return||a.return()}finally{if(r)throw i}}return t}}(Qo)||function(e){if(e){if("string"==typeof e)return Oo(e,2);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Oo(e,2):void 0}}(Qo)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),ta=ea[0],na=ea[1];function ra(e){return document.body.appendChild(e)}function ia(e){var t=ta(function(e){return{config:e.config,reject:e.reject}}),n=function(e){var t=document.createElement("script");return e&&(t.src=e),t}("".concat(t.config.paths.vs,"/loader.js"));return n.onload=function(){return e()},n.onerror=t.reject,n}function oa(){var e=ta(function(e){return{config:e.config,resolve:e.resolve,reject:e.reject}}),t=window.require;t.config(e.config),t(["vs/editor/editor.main"],function(t){aa(t),e.resolve(t)},function(t){e.reject(t)})}function aa(e){ta().monaco||na({monaco:e})}var sa=new Promise(function(e,t){return na({resolve:e,reject:t})}),la={config:function(e){var t=Ko.config(e),n=t.monaco,r=function(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}(t,["monaco"]);na(function(e){return{config:Yo(e.config,r),monaco:n}})},init:function(){var e=ta(function(e){return{monaco:e.monaco,isInitialized:e.isInitialized,resolve:e.resolve}});if(!e.isInitialized){if(na({isInitialized:!0}),e.monaco)return e.resolve(e.monaco),Jo(sa);if(window.monaco&&window.monaco.editor)return aa(window.monaco),e.resolve(window.monaco),Jo(sa);!function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.reduceRight(function(e,t){return t(e)},e)}}(ra,ia)(oa)}return Jo(sa)},__getMonacoInstance:function(){return ta(function(e){return e.monaco})}};const ca=la;var ua={display:"flex",position:"relative",textAlign:"initial"},fa={width:"100%"},da={display:"none"},pa={container:{display:"flex",height:"100%",width:"100%",justifyContent:"center",alignItems:"center"}},ha=function({children:e}){return r.createElement("div",{style:pa.container},e)},ga=(0,r.memo)(function({width:e,height:t,isEditorReady:n,loading:i,_ref:o,className:a,wrapperProps:s}){return r.createElement("section",{style:{...ua,width:e,height:t},...s},!n&&r.createElement(ha,null,i),r.createElement("div",{ref:o,style:{...fa,...!n&&da},className:a}))}),va=function(e){(0,r.useEffect)(e,[])},ma=function(e,t,n=!0){let i=(0,r.useRef)(!0);(0,r.useEffect)(i.current||!n?()=>{i.current=!1}:e,t)};function ba(){}function ya(e,t,n,r){return function(e,t){return e.editor.getModel(wa(e,t))}(e,r)||function(e,t,n,r){return e.editor.createModel(t,n,r?wa(e,r):void 0)}(e,t,n,r)}function wa(e,t){return e.Uri.parse(t)}(0,r.memo)(function({original:e,modified:t,language:n,originalLanguage:i,modifiedLanguage:o,originalModelPath:a,modifiedModelPath:s,keepCurrentOriginalModel:l=!1,keepCurrentModifiedModel:c=!1,theme:u="light",loading:f="Loading...",options:d={},height:p="100%",width:h="100%",className:g,wrapperProps:v={},beforeMount:m=ba,onMount:b=ba}){let[y,w]=(0,r.useState)(!1),[_,x]=(0,r.useState)(!0),k=(0,r.useRef)(null),j=(0,r.useRef)(null),C=(0,r.useRef)(null),S=(0,r.useRef)(b),z=(0,r.useRef)(m),E=(0,r.useRef)(!1);va(()=>{let e=ca.init();return e.then(e=>(j.current=e)&&x(!1)).catch(e=>"cancelation"!==e?.type&&console.error("Monaco initialization: error:",e)),()=>k.current?function(){let e=k.current?.getModel();l||e?.original?.dispose(),c||e?.modified?.dispose(),k.current?.dispose()}():e.cancel()}),ma(()=>{if(k.current&&j.current){let t=k.current.getOriginalEditor(),r=ya(j.current,e||"",i||n||"text",a||"");r!==t.getModel()&&t.setModel(r)}},[a],y),ma(()=>{if(k.current&&j.current){let e=k.current.getModifiedEditor(),r=ya(j.current,t||"",o||n||"text",s||"");r!==e.getModel()&&e.setModel(r)}},[s],y),ma(()=>{let e=k.current.getModifiedEditor();e.getOption(j.current.editor.EditorOption.readOnly)?e.setValue(t||""):t!==e.getValue()&&(e.executeEdits("",[{range:e.getModel().getFullModelRange(),text:t||"",forceMoveMarkers:!0}]),e.pushUndoStop())},[t],y),ma(()=>{k.current?.getModel()?.original.setValue(e||"")},[e],y),ma(()=>{let{original:e,modified:t}=k.current.getModel();j.current.editor.setModelLanguage(e,i||n||"text"),j.current.editor.setModelLanguage(t,o||n||"text")},[n,i,o],y),ma(()=>{j.current?.editor.setTheme(u)},[u],y),ma(()=>{k.current?.updateOptions(d)},[d],y);let O=(0,r.useCallback)(()=>{if(!j.current)return;z.current(j.current);let r=ya(j.current,e||"",i||n||"text",a||""),l=ya(j.current,t||"",o||n||"text",s||"");k.current?.setModel({original:r,modified:l})},[n,t,o,e,i,a,s]),A=(0,r.useCallback)(()=>{!E.current&&C.current&&(k.current=j.current.editor.createDiffEditor(C.current,{automaticLayout:!0,...d}),O(),j.current?.editor.setTheme(u),w(!0),E.current=!0)},[d,u,O]);return(0,r.useEffect)(()=>{y&&S.current(k.current,j.current)},[y]),(0,r.useEffect)(()=>{!_&&!y&&A()},[_,y,A]),r.createElement(ga,{width:h,height:p,isEditorReady:y,loading:f,_ref:C,className:g,wrapperProps:v})});var _a=new Map,xa=(0,r.memo)(function({defaultValue:e,defaultLanguage:t,defaultPath:n,value:i,language:o,path:a,theme:s="light",line:l,loading:c="Loading...",options:u={},overrideServices:f={},saveViewState:d=!0,keepCurrentModel:p=!1,width:h="100%",height:g="100%",className:v,wrapperProps:m={},beforeMount:b=ba,onMount:y=ba,onChange:w,onValidate:_=ba}){let[x,k]=(0,r.useState)(!1),[j,C]=(0,r.useState)(!0),S=(0,r.useRef)(null),z=(0,r.useRef)(null),E=(0,r.useRef)(null),O=(0,r.useRef)(y),A=(0,r.useRef)(b),R=(0,r.useRef)(),I=(0,r.useRef)(i),P=function(e){let t=(0,r.useRef)();return(0,r.useEffect)(()=>{t.current=e},[e]),t.current}(a),T=(0,r.useRef)(!1),B=(0,r.useRef)(!1);va(()=>{let e=ca.init();return e.then(e=>(S.current=e)&&C(!1)).catch(e=>"cancelation"!==e?.type&&console.error("Monaco initialization: error:",e)),()=>z.current?(R.current?.dispose(),p?d&&_a.set(a,z.current.saveViewState()):z.current.getModel()?.dispose(),void z.current.dispose()):e.cancel()}),ma(()=>{let r=ya(S.current,e||i||"",t||o||"",a||n||"");r!==z.current?.getModel()&&(d&&_a.set(P,z.current?.saveViewState()),z.current?.setModel(r),d&&z.current?.restoreViewState(_a.get(a)))},[a],x),ma(()=>{z.current?.updateOptions(u)},[u],x),ma(()=>{!z.current||void 0===i||(z.current.getOption(S.current.editor.EditorOption.readOnly)?z.current.setValue(i):i!==z.current.getValue()&&(B.current=!0,z.current.executeEdits("",[{range:z.current.getModel().getFullModelRange(),text:i,forceMoveMarkers:!0}]),z.current.pushUndoStop(),B.current=!1))},[i],x),ma(()=>{let e=z.current?.getModel();e&&o&&S.current?.editor.setModelLanguage(e,o)},[o],x),ma(()=>{void 0!==l&&z.current?.revealLine(l)},[l],x),ma(()=>{S.current?.editor.setTheme(s)},[s],x);let L=(0,r.useCallback)(()=>{if(E.current&&S.current&&!T.current){A.current(S.current);let r=a||n,c=ya(S.current,i||e||"",t||o||"",r||"");z.current=S.current?.editor.create(E.current,{model:c,automaticLayout:!0,...u},f),d&&z.current.restoreViewState(_a.get(r)),S.current.editor.setTheme(s),void 0!==l&&z.current.revealLine(l),k(!0),T.current=!0}},[e,t,n,i,o,a,u,f,d,s,l]);return(0,r.useEffect)(()=>{x&&O.current(z.current,S.current)},[x]),(0,r.useEffect)(()=>{!j&&!x&&L()},[j,x,L]),I.current=i,(0,r.useEffect)(()=>{x&&w&&(R.current?.dispose(),R.current=z.current?.onDidChangeModelContent(e=>{B.current||w(z.current.getValue(),e)}))},[x,w]),(0,r.useEffect)(()=>{if(x){let e=S.current.editor.onDidChangeMarkers(e=>{let t=z.current.getModel()?.uri;if(t&&e.find(e=>e.path===t.path)){let e=S.current.editor.getModelMarkers({resource:t});_?.(e)}});return()=>{e?.dispose()}}return()=>{}},[x,_]),r.createElement(ga,{width:h,height:g,isEditorReady:x,loading:c,_ref:E,className:v,wrapperProps:m})}),ka=[{type:"snippet",label:"import numpy as np",code:"import numpy as np",docstring:"import numpy as np"},{type:"snippet",label:"import numpy",code:"import numpy",docstring:"import numpy"},{type:"snippet",label:"import math",code:"import math",docstring:"import math"},{type:"snippet",label:"import cv2",code:"import cv2",docstring:"import cv2"},{type:"snippet",label:"RA: Template-01",code:"import GUI\nimport HAL\n# Enter sequential code!\n\nwhile True:\n    # Enter iterative code!",docstring:"import GUI\nimport HAL\n# Enter sequential code!\n\nwhile True:\n    # Enter iterative code!"},{type:"snippet",label:"def",code:"def ${1:function_name}(${2:args}):\n\t${3:pass}",docstring:"def ${1:function_name}(${2:args}):\n\t${3:pass}"},{type:"snippet",label:"if",code:"if ${1:condition}:\n\t${2:# code}",docstring:"if ${1:condition}:\n\t${2:# code}"},{type:"snippet",label:"ifelif",code:"elif ${1:condition}:\n\t${2:# code}",docstring:"if ${1:condition}:\n\t${2:# code}\nelif ${3:condition}:\n\t${4:# code}"},{type:"snippet",label:"ifelse",code:"else:\n\t${1:# code}",docstring:"if ${1:condition}:\n\t${2:# code}\nelse:\n\t${3:# code}"},{type:"snippet",label:"for",detail:"For Item",code:"for ${1:item} in ${2:iterable}:\n\t${3:# code}",docstring:"for ${1:item} in ${2:iterable}:\n\t${3:# code}"},{type:"snippet",label:"while",code:"while ${1:condition}:\n\t${2:# code}",docstring:"while ${1:condition}:\n\t${2:# code}"},{type:"snippet",label:"tryexcept",code:"try:\n\t# comment:\nexcept Exception as e:\n\traise e\n# end try",docstring:"try:\n\t# comment:\nexcept Exception as e:\n\traise e\n# end try"},{type:"snippet",label:"all",code:"all(iterable)",docstring:"all(iterable)"},{type:"snippet",label:"any",code:"any(iterable)",docstring:"any(iterable)"},{type:"snippet",label:"ascii",code:"ascii(object)",docstring:"ascii(object)"},{type:"snippet",label:"bin",code:"bin(x)",docstring:"bin(x)"},{type:"snippet",label:"bool",code:"bool(object)",docstring:"bool(object)"},{type:"snippet",label:"bytearray",code:"bytearray([source[, encoding[, errors]]])",docstring:"bytearray([source[, encoding[, errors]]])"},{type:"snippet",label:"bytes",code:"bytes(x, encoding, error)",docstring:"bytes(x, encoding, error)"},{type:"snippet",label:"callable",code:"callable(object)",docstring:"callable(object)"},{type:"snippet",label:"chr",code:"chr(i)",docstring:"chr(i)"},{type:"snippet",label:"classmethod",code:"classmethod(function)",docstring:"classmethod(function)"},{type:"snippet",label:"compile",code:"compile(source, filename, mode, flag, dont_inherit, optimize)",docstring:"compile(source, filename, mode, flag, dont_inherit, optimize)"},{type:"snippet",label:"complex",code:"complex(real, imaginary)",docstring:"complex(real, imaginary)"},{type:"snippet",label:"delattr",code:"delattr(object, attribute)",docstring:"delattr(object, attribute)"},{type:"snippet",label:"dict",code:"dict(keyword arguments)",docstring:"dict(keyword arguments)"},{type:"snippet",label:"dir",code:"dir(object)",docstring:"dir(object)"},{type:"snippet",label:"divmod",code:"divmod(divident, divisor)",docstring:"divmod(divident, divisor)"},{type:"snippet",label:"enumerate",code:"enumerate(iterable, start)",docstring:"enumerate(iterable, start)"},{type:"snippet",label:"eval",code:"eval(expression, globals, locals)",docstring:"eval(expression, globals, locals)"},{type:"snippet",label:"exec",code:"exec(object, globals, locals)",docstring:"exec(object, globals, locals)"},{type:"snippet",label:"filter",code:"filter(function, iterable)",docstring:"filter(function, iterable)"},{type:"snippet",label:"float",code:"float(value)",docstring:"float(value)"},{type:"snippet",label:"format",code:"format(value, format)",docstring:"format(value, format)"},{type:"snippet",label:"frozenset",code:"frozenset(iterable)",docstring:"frozenset(iterable)"},{type:"snippet",label:"getattr",code:"getattr(object, attribute, default)",docstring:"getattr(object, attribute, default)"},{type:"snippet",label:"globals",code:"globals()",docstring:"globals()"},{type:"snippet",label:"hasattr",code:"hasattr(object, attribute)",docstring:"hasattr(object, attribute)"},{type:"snippet",label:"hash",code:"hash(object)",docstring:"hash(object)"},{type:"snippet",label:"help",code:"help(object)",docstring:"help(object)"},{type:"snippet",label:"hex",code:"hex(number)",docstring:"hex(number)"},{type:"snippet",label:"int",code:"int(value, base)",docstring:"int(value, base)"},{type:"snippet",label:"id",code:"id(object)",docstring:"id(object)"},{type:"snippet",label:"input",code:"input(prompt)",docstring:"input(prompt)"},{type:"snippet",label:"isinstance",code:"isinstance(object, type)",docstring:"isinstance(object, type)"},{type:"snippet",label:"issubclass",code:"issubclass(object, subclass)",docstring:"issubclass(object, subclass)"},{type:"snippet",label:"iter",code:"iter(object, subclass)",docstring:"iter(object, subclass)"},{type:"snippet",label:"len",code:"len(s)",docstring:"len(s)"},{type:"snippet",label:"list",code:"list([iterable])",docstring:"list([iterable])"},{type:"snippet",label:"locals",code:"locals()",docstring:"locals()"},{type:"snippet",label:"map",code:"map(function, iterables)",docstring:"map(function, iterables)"},{type:"snippet",label:"max",code:"max(iterable)",docstring:"max(iterable)"},{type:"snippet",label:"memoryview",code:"memoryview(obj)",docstring:"memoryview(obj)"},{type:"snippet",label:"min",code:"min(iterable)",docstring:"min(iterable)"},{type:"snippet",label:"next",code:"next(iterable, default)",docstring:"next(iterable, default)"},{type:"snippet",label:"object",code:"object()",docstring:"object()"},{type:"snippet",label:"oct",code:"oct(x)",docstring:"oct(x)"},{type:"snippet",label:"open",code:"open(file, mode)",docstring:"open(file, mode)"},{type:"snippet",label:"ord",code:"ord(c)",docstring:"ord(c)"},{type:"snippet",label:"pow",code:"pow(x, y)",docstring:"pow(x, y)"},{type:"snippet",label:"print",code:"print(object(s), separator=separator, end=end, file=file, flush=flush)",docstring:"print(object(s), separator=separator, end=end, file=file, flush=flush)"},{type:"snippet",label:"property",code:"property(fget=None, fset=None, fdel=None, doc=None)",docstring:"property(fget=None, fset=None, fdel=None, doc=None)"},{type:"snippet",label:"range",code:"range(start, stop, step)",docstring:"range(start, stop, step)"},{type:"snippet",label:"repr",code:"repr(object)",docstring:"repr(object)"},{type:"snippet",label:"reversed",code:"reversed(seq)",docstring:"reversed(seq)"},{type:"snippet",label:"round",code:"round(number[, ndigits])",docstring:"round(number[, ndigits])"},{type:"snippet",label:"set",code:"set(iterable)",docstring:"set(iterable)"},{type:"snippet",label:"setattr",code:"setattr(object, name, value)",docstring:"setattr(object, name, value)"},{type:"snippet",label:"slice",code:"slice(start, end, step)",docstring:"slice(start, end, step)"},{type:"snippet",label:"sorted",code:"sorted(iterable, key=key, reverse=reverse)",docstring:"sorted(iterable, key=key, reverse=reverse)"},{type:"snippet",label:"staticmethod",code:"staticmethod(function)",docstring:"staticmethod(function)"},{type:"snippet",label:"str",code:"str(object, encoding=encoding, errors=errors)",docstring:"str(object, encoding=encoding, errors=errors)"},{type:"snippet",label:"sum",code:"sum(iterable, start)",docstring:"sum(iterable, start)"},{type:"snippet",label:"super",code:"super(type[, object-or-type])",docstring:"super(type[, object-or-type])"},{type:"snippet",label:"tuple",code:"tuple(iterable)",docstring:"tuple(iterable)"},{type:"snippet",label:"type",code:"type(object, bases, dict)",docstring:"type(object, bases, dict)"},{type:"snippet",label:"unichr",code:"unichr(i)",docstring:"unichr(i)"},{type:"snippet",label:"vars",code:"vars(object)",docstring:"vars(object)"},{type:"snippet",label:"zip",code:"zip(iterator1, iterqator2, iterator3 ...)",docstring:"zip(iterator1, iterqator2, iterator3 ...)"},{type:"snippet",label:"if",code:"if condition:\n  pass",docstring:"if condition:\n  pass"},{type:"snippet",label:"ifelif",code:"if condition:\n  pass\nelif condition:\n  pass",docstring:"if condition:\n  pass\nelif condition:\n  pass"},{type:"snippet",label:"ifelifelse",code:"if condition:\n  pass\nelif condition:\n  pass\nelse:\n  pass",docstring:"if condition:\n  pass\nelif condition:\n  pass\nelse:\n  pass"},{type:"snippet",label:"ifel",code:"if condition:\n  pass\nelse:\n  pass",docstring:"if condition:\n  pass\nelse:\n  pass"},{type:"snippet",label:"elif",code:"else:\n  pass",docstring:"else:\n  pass"},{type:"snippet",label:"ifshort",code:"print('A') if a > b else print('A')",docstring:"print('A') if a > b else print('A')"},{type:"snippet",label:"lambda",code:"lambda arguments : expression",docstring:"lambda arguments : expression"},{type:"snippet",label:"for",code:"for item in range:\n ",docstring:"for item in range:\n "},{type:"snippet",label:"for=>range_function_1",code:"for x in range(6):\n print(x)",docstring:"for x in range(6):\n print(x)"},{type:"snippet",label:"for=>for_else",code:"for x in range(2, 6):\n print(x)\nelse:\n print('Finally finished!')",docstring:"for x in range(2, 6):\n print(x)\nelse:\n print('Finally finished!')"},{type:"snippet",label:"while",code:"while expression:\n  pass",docstring:"while expression:\n  pass"},{type:"snippet",label:"while_else",code:"while expression:\n  pass\nelse:\n  pass",docstring:"while expression:\n  pass\nelse:\n  pass"},{type:"snippet",label:"while=>",code:"i = 1\nwhile i < 6:\n  print(i)\n  i += 1",docstring:"i = 1\nwhile i < 6:\n  print(i)\n  i += 1"},{type:"snippet",label:"while=>break_statement",code:"i = 1\nwhile i < 6:\n print(i)\n  if i == 3:\n    break\n  i += 1",docstring:"i = 1\nwhile i < 6:\n print(i)\n  if i == 3:\n    break\n  i += 1"},{type:"snippet",label:"while=>continue_statement",code:"i = 1\nwhile i < 6:\n  i += 1\n  print(i)\n  if i == 3:\n    continue\n  print(i)",docstring:"i = 1\nwhile i < 6:\n  i += 1\n  print(i)\n  if i == 3:\n    continue\n  print(i)"},{type:"snippet",label:"function",code:"def name(args):\n pass",docstring:"def name(args):\n pass"},{type:"snippet",label:"def",code:"def name(args):\n pass",docstring:"def name(args):\n pass"},{type:"snippet",label:"capitalize",code:".capitalize()",docstring:".capitalize()"},{type:"snippet",label:"casefold",code:".casefold()",docstring:".casefold()"},{type:"snippet",label:"center",code:".center()",docstring:".center()"},{type:"snippet",label:"string.count",code:".count()",docstring:".count()"},{type:"snippet",label:"encode",code:".encode()",docstring:".encode()"},{type:"snippet",label:"endswith",code:".endswith()",docstring:".endswith()"},{type:"snippet",label:"expandtabs",code:".expandtabs()",docstring:".expandtabs()"},{type:"snippet",label:"find",code:".find()",docstring:".find()"},{type:"snippet",label:"format",code:".format()",docstring:".format()"},{type:"snippet",label:"format_map",code:".format_map()",docstring:".format_map()"},{type:"snippet",label:"index",code:".index()",docstring:".index()"},{type:"snippet",label:"isalnum",code:".isalnum()",docstring:".isalnum()"},{type:"snippet",label:"isalpha",code:".isalpha()",docstring:".isalpha()"},{type:"snippet",label:"isdecimal",code:".isdecimal()",docstring:".isdecimal()"},{type:"snippet",label:"isdigit",code:".isdigit()",docstring:".isdigit()"},{type:"snippet",label:"isidentifier",code:".isidentifier()",docstring:".isidentifier()"},{type:"snippet",label:"islower",code:".islower()",docstring:".islower()"},{type:"snippet",label:"isnumeric",code:".isnumeric()",docstring:".isnumeric()"},{type:"snippet",label:"isprintable",code:".isprintable()",docstring:".isprintable()"},{type:"snippet",label:"isspace",code:".isspace()",docstring:".isspace()"},{type:"snippet",label:"istitle",code:".istitle()",docstring:".istitle()"},{type:"snippet",label:"isupper",code:".isupper()",docstring:".isupper()"},{type:"snippet",label:"join",code:".join()",docstring:".join()"},{type:"snippet",label:"ljust",code:".ljust()",docstring:".ljust()"},{type:"snippet",label:"lower",code:".lower()",docstring:".lower()"},{type:"snippet",label:"lstrip",code:".lstrip()",docstring:".lstrip()"},{type:"snippet",label:"maketrans",code:".maketrans()",docstring:".maketrans()"},{type:"snippet",label:"partition",code:".partition()",docstring:".partition()"},{type:"snippet",label:"replace",code:".replace(x, y)",docstring:".replace(x, y)"},{type:"snippet",label:"rfind",code:".rfind()",docstring:".rfind()"},{type:"snippet",label:"rindex",code:".rindex()",docstring:".rindex()"},{type:"snippet",label:"rpartition",code:".rpartition()",docstring:".rpartition()"},{type:"snippet",label:"rsplit",code:".rsplit()",docstring:".rsplit()"},{type:"snippet",label:"split",code:".split()",docstring:".split()"},{type:"snippet",label:"splitlines",code:".splitlines()",docstring:".splitlines()"},{type:"snippet",label:"string.splitlines=>",code:"txt = 'Thank you for the music\nWelcome to the jungle'\nx = txt.splitlines()\nprint(x)",docstring:"txt = 'Thank you for the music\nWelcome to the jungle'\nx = txt.splitlines()\nprint(x)"},{type:"snippet",label:"string.splitlines=>",code:"txt = 'Thank you for the music\nWelcome to the jungle'\nx = txt.splitlines(True)\nprint(x)",docstring:"txt = 'Thank you for the music\nWelcome to the jungle'\nx = txt.splitlines(True)\nprint(x)"},{type:"snippet",label:"startswith",code:".startswith()",docstring:".startswith()"},{type:"snippet",label:"swapcase",code:".swapcase()",docstring:".swapcase()"},{type:"snippet",label:"title",code:".title()",docstring:".title()"},{type:"snippet",label:"translate",code:".translate()",docstring:".translate()"},{type:"snippet",label:"upper",code:".upper()",docstring:".upper()"},{type:"snippet",label:"string.upper=>",code:"txt = 'Hello my friends'\nx = txt.upper()\nprint(x)",docstring:"txt = 'Hello my friends'\nx = txt.upper()\nprint(x)"},{type:"snippet",label:"zfill",code:".zfill()",docstring:".zfill()"},{type:"snippet",label:"append",code:".append()",docstring:".append()"},{type:"snippet",label:"clear",code:".clear()",docstring:".clear()"},{type:"snippet",label:"copy",code:".copy()",docstring:".copy()"},{type:"snippet",label:"list.count",code:".count",docstring:".count"},{type:"snippet",label:"extend",code:".extend()",docstring:".extend()"},{type:"snippet",label:"index",code:".index()",docstring:".index()"},{type:"snippet",label:"insert",code:".insert()",docstring:".insert()"},{type:"snippet",label:"pop",code:".pop()",docstring:".pop()"},{type:"snippet",label:"remove",code:".remove()",docstring:".remove()"},{type:"snippet",label:"reverse",code:".reverse()",docstring:".reverse()"},{type:"snippet",label:"sort",code:".sort()",docstring:".sort()"},{type:"snippet",label:"comprehensions",code:"[ expression for item in list if conditional ]",docstring:"[ expression for item in list if conditional ]"},{type:"snippet",label:"clear",code:".clear()",docstring:".clear()"},{type:"snippet",label:"copy",code:".copy()",docstring:".copy()"},{type:"snippet",label:"fromkeys",code:".fromkeys(x, y)",docstring:".fromkeys(x, y)"},{type:"snippet",label:"get",code:".get()",docstring:".get()"},{type:"snippet",label:"items",code:".items()",docstring:".items()"},{type:"snippet",label:"keys",code:".keys()",docstring:".keys()"},{type:"snippet",label:"pop",code:".pop()",docstring:".pop()"},{type:"snippet",label:"popitem",code:".popitem()",docstring:".popitem()"},{type:"snippet",label:"setdefault",code:".setdefault()",docstring:".setdefault()"},{type:"snippet",label:"update",code:".update()",docstring:".update()"},{type:"snippet",label:"values",code:".values()",docstring:".values()"},{type:"snippet",label:"tuple.count",code:".count(value)",docstring:".count(value)"},{type:"snippet",label:"index",code:".index(value)",docstring:".index(value)"},{type:"snippet",label:"add",code:".add()",docstring:".add()"},{type:"snippet",label:"clear",code:".clear()",docstring:".clear()"},{type:"snippet",label:"copy",code:".copy()",docstring:".copy()"},{type:"snippet",label:"difference",code:"x.difference(y)",docstring:"x.difference(y)"},{type:"snippet",label:"difference_update",code:"x.difference_update(y)",docstring:"x.difference_update(y)"},{type:"snippet",label:"discard",code:".discard()",docstring:".discard()"},{type:"snippet",label:"intersection",code:"x.intersection(y)",docstring:"x.intersection(y)"},{type:"snippet",label:"intersection_update",code:"x.intersection_update(y)",docstring:"x.intersection_update(y)"},{type:"snippet",label:"isdisjoint",code:"x.isdisjoint(y)",docstring:"x.isdisjoint(y)"},{type:"snippet",label:"issubset",code:"x.issubset(y)",docstring:"x.issubset(y)"},{type:"snippet",label:"issuperset",code:"x.issuperset(y)",docstring:"x.issuperset(y)"},{type:"snippet",label:"symmetric_difference",code:"x.symmetric_difference(y)",docstring:"x.symmetric_difference(y)"},{type:"snippet",label:"symmetric_difference_update",code:"x.symmetric_difference_update(y)",docstring:"x.symmetric_difference_update(y)"},{type:"snippet",label:"class",code:"class MyClass:\n  pass",docstring:"class MyClass:\n  pass"},{type:"snippet",label:"__init__",code:"def __init__(self, name, age):\n  self.name = name\n  self.age = age",docstring:"def __init__(self, name, age):\n  self.name = name\n  self.age = age"},{type:"snippet",label:"__iter__",code:"def __iter__(self):\n  self.a = 1\n  return self",docstring:"def __iter__(self):\n  self.a = 1\n  return self"},{type:"snippet",label:"__next__",code:"def __next__(self):\n  x = self.a\n  self.a += 1\n  return x",docstring:"def __next__(self):\n  x = self.a\n  self.a += 1\n  return x"},{type:"snippet",label:"tryexcept",code:"try:\n  print(x)\nexcept:\n  print('An exception occurred')",docstring:"try:\n  print(x)\nexcept:\n  print('An exception occurred')"},{type:"snippet",label:"tryexceptfinally",code:"try:\n  print(x)\nexcept:\n  print('Something went wrong')\nfinally:\n  print('The try except is finished')",docstring:"try:\n  print(x)\nexcept:\n  print('Something went wrong')\nfinally:\n  print('The try except is finished')"},{type:"snippet",label:"openFile",code:"f = open('demofile.txt', 'r')\nprint(f.read())",docstring:"f = open('demofile.txt', 'r')\nprint(f.read())"},{type:"snippet",label:"openFileReadLine",code:"f = open('demofile.txt', 'r')\nprint(f.readline())",docstring:"f = open('demofile.txt', 'r')\nprint(f.readline())"},{type:"snippet",label:"readImgColor",detail:"cv2",code:"cv2.imread(${1:image_path}, cv2.IMREAD_COLOR)",docstring:"This method is used to read an image from its path."},{type:"snippet",label:"readImgBW",detail:"cv2",code:"cv2.imread(${1:image_path}, cv2.IMREAD_GRAYSCALE)",docstring:"This method is used to read an image from its path."},{type:"snippet",label:"line",detail:"cv2",code:"cv2.line(${1:img}, ${2:start_coordinates}, ${3:end_coordinate}, ${4:color_in_bgr}, ${5:thickness})",docstring:"Draws a line segment connecting two points."},{type:"snippet",label:"rectangle",detail:"cv2",code:"cv2.rectangle(${1:img},${2:top_left_vertex_coordinates}, ${3:lower_right_vertex_coordinates}, ${4:color_in_bgr}, ${5:thickness})",docstring:"Draws a simple, thick, or filled up-right rectangle."},{type:"snippet",label:"circle",detail:"cv2",code:"cv2.circle(${1:img}, ${2:center_coordinates}, ${3:radius}, ${4:color}, ${5:thickness})",docstring:"Draws a circle"},{type:"snippet",label:"polylines",detail:"cv2",code:"cv2.polylines(${1:img}, ${2:[pts]}, ${3:isClosed}, ${4:color}, ${5:thickness})",docstring:"Draws several polygonal curves."},{type:"snippet",label:"text",detail:"cv2",code:"cv2.putText(${1:img}, ${2:‘TextContent’}, ${3:‘text_starting_point_coordinates’})",docstring:"Draws a text string."},{type:"snippet",label:"addImg",detail:"cv2",code:"cv2.add(${1:img1}, ${2:img2})",docstring:"This function is used to add two images."},{type:"snippet",label:"subtractImg",detail:"cv2",code:"cv2.subtract(${1:img1}, ${2:img2})",docstring:"This function is used to subtract two images."},{type:"snippet",label:"addWeightedImg",detail:"cv2",code:"cv2.addWeighted(${1:img1}, ${2:weight1}, ${3:img2}, ${4:weight2}, ${5:gammaValue})",docstring:"This is also known as Alpha Blending. This is nothing but a weighted blending process of two images."},{type:"snippet",label:"bitwise_and",detail:"cv2",code:"cv2.bitwise_and(${1:img1}, ${2:img2}, ${3:destination}, ${4:mask})",docstring:"This performs bitwise and logical operations between two images."},{type:"snippet",label:"bitwise_or",detail:"cv2",code:"cv2.bitwise_or(${1:img1}, ${2:img2}, ${3:destination}, ${4:mask})",docstring:"This performs bitwise or logical operations between two images."},{type:"snippet",label:"bitwise_not",detail:"cv2",code:"cv2.bitwise_not(${1:img}, ${2:destination}, ${3:mask})",docstring:"This performs bitwise not logical operations between an image and a mask."},{type:"snippet",label:"bitwise_xor",detail:"cv2",code:"cv2.bitwise_xor(${1:img1}, ${2:img2}, ${3:destination}, ${4:mask})",docstring:"This performs bitwise xor logical operations between two images."},{type:"snippet",label:"inRange",detail:"cv2",code:"cv2.inRange(${1:raw_img}, ${2:lower}, ${3:upper})",docstring:"Checks if array elements lie between the elements of two other arrays."},{type:"snippet",label:"bgr2gray",detail:"cv2",code:"cv2.cvtColor(${1:img}, cv2.COLOR_BGR2GRAY)",docstring:"Converts an image from one BGR color space to GRAY."},{type:"snippet",label:"bgr2hsv",detail:"cv2",code:"cv2.cvtColor(${1:img}, cv2.COLOR_BGR2HSV)",docstring:"Converts an image from one BGR color space to HSV."}],ja=function(e,t){switch(e){case"variable":default:return t.languages.CompletionItemKind.Variable;case"class":case"instance":return t.languages.CompletionItemKind.Class;case"param":return t.languages.CompletionItemKind.TypeParameter;case"path":return t.languages.CompletionItemKind.File;case"property":return t.languages.CompletionItemKind.Property;case"statement":case"function":return t.languages.CompletionItemKind.Function;case"module":return t.languages.CompletionItemKind.Module;case"method":return t.languages.CompletionItemKind.Method;case"snippet":return t.languages.CompletionItemKind.Snippet;case"keyword":return t.languages.CompletionItemKind.Keyword}},Ca=function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}l((r=r.apply(e,t||[])).next())})},Sa=function(e,t){var n,r,i,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=s(0),a.throw=s(1),a.return=s(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},za=function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))},Ea=["E0401","E1101"],Oa=["W0611"],Aa=["C0114","C0303","C0304","C0305","C0411"],Ra=[],Ia=[],Pa=function(e,t){switch(e){case"refactor":case"convention":return t.MarkerSeverity.Info;case"error":default:return t.MarkerSeverity.Error;case"warning":case"fatal":return t.MarkerSeverity.Warning}};const Ta=function(e){var t=e.commsManager,o=e.fileContent,a=e.setFileContent,s=e.saveFile,l=e.language,c=e.zoomLevel,f=u(),d=(0,r.useRef)(null),p=(0,r.useRef)(null),h=(0,r.useState)(14),g=h[0],v=h[1],m=function(e){if(d.current&&p.current){var t=new AbortController;return Ca(void 0,void 0,void 0,function(){var t,n,r;return Sa(this,function(i){return null===p.current?[2]:(t=e.data)?(n=d.current.getModel(),r=t.pylint_output.map(function(e,t){if(null!==p.current)return{startLineNumber:e.line,startColumn:e.column,endLineNumber:null===e.endLine?e.column:e.endLine,endColumn:null===e.endColumn?n.getLineMaxColumn(e.line):e.endColumn,message:e.message,severity:Pa(e.type,p.current)}}),p.current.editor.setModelMarkers(n,"owner",r),[2]):[2]})}),function(){return t.abort()}}},b=function(e){if(d.current){var t=e.data;t&&a(t.formatted_code)}},y=function(e){return Ca(void 0,void 0,void 0,function(){return Sa(this,function(t){return e.ctrlKey&&"s"===e.key&&(e.preventDefault(),s()),[2]})})};(0,r.useEffect)(function(){if(null!==t)return t.subscribe("code-format",b),t.subscribe("code-analysis",m),function(){t.unsubscribe("code-format",b),t.unsubscribe("code-analysis",m)}},[t]),(0,r.useEffect)(function(){return function(){d.current.getDomNode().removeEventListener("keydown",y)}},[]);var w={fontSize:g,lineNumbers:"on",roundedSelection:!1,scrollBeyondLastLine:!0,wordWrap:"wordWrapColumn",wordWrapColumn:80,wrappingIndent:"indent",minimap:{enabled:!1},automaticLayout:!0,tabSize:4,rulers:[80],suggestOnTriggerCharacters:!0,quickSuggestions:!0,wordBasedSuggestions:"currentDocument",hover:{enabled:!0},glyphMargin:!0,lineNumbersMinChars:3,smoothScrolling:!0,scrollbar:{vertical:"auto",horizontal:"auto",verticalScrollbarSize:8,horizontalScrollbarSize:8}};return(0,r.useEffect)(function(){v(Math.max(10,14+2*c))},[c]),(0,r.useEffect)(function(){d.current&&p.current&&o&&t&&(d.current.addCommand(p.current.KeyMod.CtrlCmd|p.current.KeyMod.Shift|p.current.KeyCode.KeyI,function(){"python"===l&&t&&o&&t.code_format(o)}),"python"===l&&t.code_analysis(o,za(za(za(za(za([],Ea,!0),Oa,!0),Aa,!0),Ra,!0),Ia,!0)))},[o]),(0,n.jsx)(xa,{width:"100%",height:"100%",defaultLanguage:"python",defaultValue:"",language:l,value:o,theme:"dark-theme",onChange:function(e){a(e)},options:w,beforeMount:function(e){e.editor.defineTheme("dark-theme",{base:"vs-dark",inherit:!0,rules:[],colors:{"editor.background":f.palette.background}}),e.editor.defineTheme("light-theme",{base:"vs",inherit:!0,rules:[],colors:{"editor.background":f.palette.background}})},onMount:function(e,n){return Ca(void 0,void 0,void 0,function(){return Sa(this,function(r){return p.current=n,d.current=e,d.current.getDomNode().addEventListener("keydown",y),function(e,t){e.languages.register({id:"python"});var n=new(i(7)),r=!0;e.languages.registerCompletionItemProvider("python",{triggerCharacters:[".","("],provideCompletionItems:function(i,o){return a=void 0,s=void 0,c=function(){var a,s,l,c,u;return function(e,t){var n,r,i,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=s(0),a.throw=s(1),a.return=s(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,function(f){switch(f.label){case 0:if(r=!0,a=i.getWordUntilPosition(o),s=i.getWordUntilPosition({lineNumber:o.lineNumber,column:o.column-1}),l={startLineNumber:o.lineNumber,endLineNumber:o.lineNumber,startColumn:a.startColumn,endColumn:a.endColumn},c=""===s.word?function(e,t){var n=[],r=ka;return r&&r.length?(r.forEach(function(r){r.label&&r.code&&n.push({label:r.label,kind:ja(r.type,e),detail:r.detail,documentation:r.docstring,insertText:r.code,insertTextRules:e.languages.CompletionItemInsertTextRule.InsertAsSnippet,range:t})}),n):[]}(e,l):[],null===t)return[2,{suggestions:c}];try{t.code_autocomplete(i.getValue(),o.lineNumber,a.endColumn-1)}catch(e){return[2,{suggestions:c}]}return u=function(t){var i=t.data;i&&(i.completions.forEach(function(t){c.push({label:t.label,kind:ja(t.type,e),detail:t.detail,documentation:t.docstring,insertText:t.code,insertTextRules:e.languages.CompletionItemInsertTextRule.InsertAsSnippet,range:l})}),r=!1,n.emit("unlocked"))},t.subscribeOnce("code-autocomplete",u),r?[4,new Promise(function(e){return n.once("unlocked",e)})]:[3,2];case 1:f.sent(),f.label=2;case 2:return[2,{suggestions:c}]}})},new((l=void 0)||(l=Promise))(function(e,t){function n(e){try{i(c.next(e))}catch(e){t(e)}}function r(e){try{i(c.throw(e))}catch(e){t(e)}}function i(t){var i;t.done?e(t.value):(i=t.value,i instanceof l?i:new l(function(e){e(i)})).then(n,r)}i((c=c.apply(a,s||[])).next())});var a,s,l,c}})}(n,t),d.current.addCommand(n.KeyMod.CtrlCmd|n.KeyMod.Shift|n.KeyCode.KeyI,function(){"python"===l&&t&&o&&t.code_format(o)}),[2,function(){d.current.getDomNode().removeEventListener("keydown",y)}]})})}})};var Ba,La,Fa=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Na="#666",Ma=sr.div(Ba||(Ba=Fa(["\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding-left: 10px;\n  height: 32px;\n  max-height: 32px;\n  width: 100%;\n  background-color: ",";\n"],["\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding-left: 10px;\n  height: 32px;\n  max-height: 32px;\n  width: 100%;\n  background-color: ",";\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:Na}),Da=sr.div(La||(La=Fa(["\n  width: 6px;\n  height: 6px;\n  border-radius: 50%;\n  display: inline-block;\n  background-color: ",";\n"],["\n  width: 6px;\n  height: 6px;\n  border-radius: 50%;\n  display: inline-block;\n  background-color: ",";\n"])),function(e){var t;return null!==(t=e.color)&&void 0!==t?t:Na}),Wa=function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}l((r=r.apply(e,t||[])).next())})},Ua=function(e,t){var n,r,i,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=s(0),a.throw=s(1),a.return=s(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},$a={json:"json",md:"markdown",py:"python",config:"xml",cfg:"xml",xml:"xml",sdf:"xml",urdf:"xml",yaml:"yaml",repos:"yaml"};const Ha=function(e){var t,i,o,a=e.currentFile,s=e.changeCurrentFile,l=e.currentProjectname,c=e.autosave,f=e.manager,d=e.api,p=e.extraEditors,g=e.splashIcon,v=h(),m=v.error,b=v.warning,y=u(),w=(0,r.useState)(void 0),_=w[0],x=w[1],k=(0,r.useState)(0),j=k[0],C=k[1],S=(0,r.useState)(!1),z=S[0],E=S[1],O=(0,r.useState)(void 0),A=O[0],R=O[1],I=(0,r.useState)("python"),P=I[0],T=I[1],B=(0,r.useState)(l),L=B[0],F=B[1],N=(0,r.useRef)(""),M=function(){return Wa(void 0,void 0,void 0,function(){var e,t;return Ua(this,function(n){switch(n.label){case 0:if(console.log("Auto saving file..."),null===_)return console.log("No content to save"),[2];if(void 0===A)return console.log("No file to save"),[2];if(!1===A.access)return console.log("File is Read-Only"),b("File is Read-Only"),[2];e=_,""!==N.current&&(e=N.current),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,d.file.save(l,A,e)];case 2:return n.sent(),console.log("Auto save completed"),[3,4];case 3:return(t=n.sent())instanceof Error&&(console.error("Error saving file: "+t.message),m("Error saving file: "+t.message)),[3,4];case 4:return[2]}})})};(0,r.useEffect)(function(){E(void 0!==_)},[_]),(0,r.useEffect)(function(){Wa(void 0,void 0,void 0,function(){return Ua(this,function(e){switch(e.label){case 0:return a?A&&c?[4,M()]:[3,2]:[3,4];case 1:e.sent(),e.label=2;case 2:return N.current="",x(void 0),[4,(t=a,Wa(void 0,void 0,void 0,function(){var e,n,r,i,o,s,c,u,f,h,g;return Ua(this,function(v){switch(v.label){case 0:return v.trys.push([0,2,,3]),console.log("Loading new file..."),[4,d.file.get(l,a)];case 1:if(e=v.sent(),n=t.name.split(".").pop(),x(e),r="textplain",n)for(i in $a)if(i===n){r=$a[i];break}for(E(!1),o=0,s=p;o<s.length;o++)for(c=s[o],u=0,f=c.trigger;u<f.length;u++)if((h=f[u]).group===(null==a?void 0:a.group)&&h.extension===(null==a?void 0:a.name.split(".").pop()))return console.log("Loading new file ended"),[2,T(c.language)];return T(r),console.log("Loading new file ended"),[3,3];case 2:return(g=v.sent())instanceof Error&&(console.error("Error fetching file content: "+g.message),m("Error fetching file content: "+g.message)),[3,3];case 3:return[2]}})}))];case 3:return e.sent(),R(a),[3,5];case 4:x(void 0),N.current="",E(!1),e.label=5;case 5:return[2]}var t})})},[a]),(0,r.useEffect)(function(){R(void 0),a&&D(),F(l),x(void 0),N.current=""},[l]);var D=function(){return Wa(void 0,void 0,void 0,function(){var e;return Ua(this,function(t){switch(t.label){case 0:if(console.log(_,a),void 0===_)return console.log("No content to save"),[2];if(void 0===a)return console.log("No file is currently selected"),b("No file is currently selected."),[2];if(!1===a.access)return console.log("File is Read-Only"),b("File is Read-Only"),[2];t.label=1;case 1:return t.trys.push([1,3,,4]),[4,d.file.save(L,a,_)];case 2:return t.sent(),E(!1),[3,4];case 3:return(e=t.sent())instanceof Error&&(console.error("Error saving file: "+e.message),m("Error saving file: "+e.message)),[3,4];case 4:return[2]}})})};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(Ma,{bgColor:null===(t=y.palette)||void 0===t?void 0:t.primary,children:(0,n.jsxs)(Js,{color:null===(i=y.palette)||void 0===i?void 0:i.secondary,children:[z&&(0,n.jsx)(Da,{color:null===(o=y.palette)||void 0===o?void 0:o.text,id:"unsaved-dot"}),(0,n.jsx)(Ii,{id:"save-button",onClick:D,title:"Save File",children:(0,n.jsx)(xe,{viewBox:"0 0 .9375 .9375"})}),(0,n.jsx)(Ii,{id:"zoom-in-button",onClick:function(){C(function(e){return e+1})},title:"Increase Zoom",children:"+"}),(0,n.jsx)(Ii,{id:"zoom-out-button",title:"Decrease Zoom",onClick:function(){C(function(e){return e-1})},children:"-"}),function(){for(var e,t=0,r=p;t<r.length;t++){var i=r[t];if(i.language===P){for(var o=[],a=0,s=i.buttons;a<s.length;a++){var l=s[a];o.push((0,n.jsx)(Qs,{color:null===(e=y.palette)||void 0===e?void 0:e.secondary,children:l}))}return(0,n.jsx)(n.Fragment,{children:o})}}return(0,n.jsx)(n.Fragment,{})}()]})}),_?(0,n.jsx)(n.Fragment,{children:function(){for(var e=0,t=p;e<t.length;e++){var r=t[e];if(r.language===P)return(0,n.jsx)(r.component,{commsManager:f,project:l,file:a,changeFile:s,fileContent:_,setFileContent:x,contentRef:N,saveFile:M,language:P,zoomLevel:j})}return(0,n.jsx)(Ta,{commsManager:f,fileContent:_,setFileContent:x,saveFile:M,language:P,zoomLevel:j})}()}):(0,n.jsx)(n.Fragment,{children:g})]})};var Za,Ga,Va,qa,Ka,Ya,Xa,Ja,Qa,es,ts,ns=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},rs="#666",is=sr.dialog(Za||(Za=ns(["\n  width: 500px;\n  padding: 1rem 1.5rem 1.5rem 1.5rem;\n  position: relative;\n\n  border: 2px solid ",";\n  border-radius: ","px;\n  box-shadow: hsl(0 0% 0% / 10%) 0 0 0.5rem 0.25rem;\n  background-color: ",";\n\n  &::backdrop {\n    background: hsla(0, 0%, 0%, 0.5);\n  }\n\n  &:focus {\n    outline: none;\n  }\n"],["\n  width: 500px;\n  padding: 1rem 1.5rem 1.5rem 1.5rem;\n  position: relative;\n\n  border: 2px solid ",";\n  border-radius: ","px;\n  box-shadow: hsl(0 0% 0% / 10%) 0 0 0.5rem 0.25rem;\n  background-color: ",";\n\n  &::backdrop {\n    background: hsla(0, 0%, 0%, 0.5);\n  }\n\n  &:focus {\n    outline: none;\n  }\n"])),function(e){var t;return null!==(t=e.borderColor)&&void 0!==t?t:rs},function(e){var t;return null!==(t=e.roundness)&&void 0!==t?t:1},function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:rs}),os=sr.div(Ga||(Ga=ns(["\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  flex-grow: 1;\n"],["\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  flex-grow: 1;\n"]))),as=sr.div(Va||(Va=ns(["\n  font-size: large;\n  display: grid;\n  grid-template-columns: 1fr auto 1fr;\n  grid-column-gap: 5px;\n  justify-items: center;\n\n  & label {\n    color: ",";\n    font-weight: 600;\n    align-self: center;\n    grid-column-start: 2;\n    text-align: center;\n  }\n\n  & svg {\n    height: 100%;\n    width: 24px;\n    height: 24px;\n    padding: 2px;\n    border-radius: ","px;\n    background-color: transparent;\n\n    &:hover {\n      background-color: ",";\n    }\n  }\n"],["\n  font-size: large;\n  display: grid;\n  grid-template-columns: 1fr auto 1fr;\n  grid-column-gap: 5px;\n  justify-items: center;\n\n  & label {\n    color: ",";\n    font-weight: 600;\n    align-self: center;\n    grid-column-start: 2;\n    text-align: center;\n  }\n\n  & svg {\n    height: 100%;\n    width: 24px;\n    height: 24px;\n    padding: 2px;\n    border-radius: ","px;\n    background-color: transparent;\n\n    &:hover {\n      background-color: ",";\n    }\n  }\n"])),function(e){var t;return null!==(t=e.color)&&void 0!==t?t:rs},function(e){var t;return null!==(t=e.roundness)&&void 0!==t?t:1},function(e){var t;return null!==(t=e.hoverColor)&&void 0!==t?t:rs}),ss=sr(function(e){return r.createElement("svg",G({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"current"},e),W||(W=r.createElement("path",{d:"M1.378 1.378a1.285 1.285 0 0 1 1.82 0L10 8.183l6.803-6.805a1.287 1.287 0 0 1 1.82 1.82L11.818 10l6.805 6.803a1.287 1.287 0 0 1-1.82 1.82L10 11.818l-6.802 6.805a1.287 1.287 0 0 1-1.82-1.82L8.183 10 1.378 3.198a1.285 1.285 0 0 1 0-1.82"})))})(qa||(qa=ns(["\n  fill: ",";\n  margin-left: auto;\n"],["\n  fill: ",";\n  margin-left: auto;\n"])),function(e){var t;return null!==(t=e.color)&&void 0!==t?t:rs}),ls=sr(function(e){return r.createElement("svg",P({xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"current",strokeWidth:0,viewBox:"-2.4 -2.4 36 36"},e),A||(A=r.createElement("path",{d:"M23.36-.074a1.795 1.795 0 0 0-2.539 0L8.893 11.855a5.386 5.386 0 0 0-.001 7.615l11.795 11.805a1.795 1.795 0 1 0 2.538-2.539L11.426 16.938a1.795 1.795 0 0 1 0-2.539L23.36 2.466a1.795 1.795 0 0 0 0-2.539z"})))})(Ka||(Ka=ns(["\n  fill: ",";\n  margin-right: auto;\n"],["\n  fill: ",";\n  margin-right: auto;\n"])),function(e){var t;return null!==(t=e.color)&&void 0!==t?t:rs}),cs=sr.div(Ya||(Ya=ns(["\n  & select,\n  button {\n    width: 100%;\n    display: block;\n    border: none;\n    color: ",";\n    font-size: medium;\n  }\n\n  & button {\n    background-color: ",";\n    margin-bottom: 10px;\n    border-radius: ","px;\n    height: 2em;\n    font-size: medium;\n    opacity: 0.6;\n\n    &:hover:enabled {\n      opacity: 1;\n    }\n  }\n\n  & label {\n    color: ",";\n  }\n"],["\n  & select,\n  button {\n    width: 100%;\n    display: block;\n    border: none;\n    color: ",";\n    font-size: medium;\n  }\n\n  & button {\n    background-color: ",";\n    margin-bottom: 10px;\n    border-radius: ","px;\n    height: 2em;\n    font-size: medium;\n    opacity: 0.6;\n\n    &:hover:enabled {\n      opacity: 1;\n    }\n  }\n\n  & label {\n    color: ",";\n  }\n"])),function(e){var t;return null!==(t=e.color)&&void 0!==t?t:rs},function(e){var t;return null!==(t=e.buttonColor)&&void 0!==t?t:rs},function(e){var t;return null!==(t=e.roundness)&&void 0!==t?t:1},function(e){var t;return null!==(t=e.color)&&void 0!==t?t:rs}),us=sr.div(Xa||(Xa=ns(["\n  margin-top: 30px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-items: center;\n  gap: 10px;\n\n  & button {\n    width: 100px;\n    display: block;\n    border: none;\n    color: ",";\n    font-size: medium;\n    background-color: ",";\n    opacity: 0.6;\n    margin-bottom: 10px;\n    border-radius: ","px;\n    height: 2em;\n    font-size: medium;\n\n    &:hover:enabled {\n      opacity: 1;\n    }\n  }\n"],["\n  margin-top: 30px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-items: center;\n  gap: 10px;\n\n  & button {\n    width: 100px;\n    display: block;\n    border: none;\n    color: ",";\n    font-size: medium;\n    background-color: ",";\n    opacity: 0.6;\n    margin-bottom: 10px;\n    border-radius: ","px;\n    height: 2em;\n    font-size: medium;\n\n    &:hover:enabled {\n      opacity: 1;\n    }\n  }\n"])),function(e){var t;return null!==(t=e.color)&&void 0!==t?t:rs},function(e){var t;return null!==(t=e.buttonColor)&&void 0!==t?t:rs},function(e){var t;return null!==(t=e.roundness)&&void 0!==t?t:1}),fs=sr.button(Ja||(Ja=ns(["\n  opacity: 0.6;\n  background-color: ",";\n  &:hover:enabled {\n    opacity: 1;\n  }\n"],["\n  opacity: 0.6;\n  background-color: ",";\n  &:hover:enabled {\n    opacity: 1;\n  }\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:rs}),ds=sr.div(Qa||(Qa=ns(["\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n"],["\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n"]))),ps=sr.div(es||(es=ns(["\n  position: relative;\n"],["\n  position: relative;\n"]))),hs=sr.input(ts||(ts=ns(["\n  padding-left: 1em;\n  padding-top: 13px;\n  width: 100%;\n  align-self: center;\n  height: 50px;\n  outline: 0;\n  font-size: 1rem;\n  transition: border-color 0.2s;\n  border: 2px solid;\n  background-color: "," !important;\n  border-radius: ","px;\n  color: ",";\n\n  & label {\n    position: absolute;\n    top: 15px;\n    left: 17px;\n    display: block;\n    transition: 0.2s;\n    font-size: 1rem;\n    color: ",";\n    user-select: none;\n  }\n\n  &:required,\n  :invalid {\n    box-shadow: none;\n  }\n\n  &:focus ~ label {\n    position: absolute;\n    top: 5px;\n    display: block;\n    transition: 0.2s;\n    font-size: 0.9rem;\n    font-weight: 700;\n  }\n\n  &:placeholder-shown ~ label {\n    font-size: 1rem;\n    cursor: text;\n    top: 15px;\n  }\n\n  &:not(placeholder-shown) ~ label {\n    position: absolute;\n    top: 5px;\n    display: block;\n    transition: 0.2s;\n    font-size: 0.9rem;\n    font-weight: 700;\n    cursor: text;\n  }\n\n  &:focus {\n    border-color: ",";\n    outline: none !important;\n  }\n\n  &::placeholder {\n    color: transparent;\n    user-select: none;\n  }\n\n  .bt-modal-complex-input-indications {\n    color: var(--input-placeholder-text);\n    font-size: 0.7rem;\n  }\n\n  ","\n"],["\n  padding-left: 1em;\n  padding-top: 13px;\n  width: 100%;\n  align-self: center;\n  height: 50px;\n  outline: 0;\n  font-size: 1rem;\n  transition: border-color 0.2s;\n  border: 2px solid;\n  background-color: "," !important;\n  border-radius: ","px;\n  color: ",";\n\n  & label {\n    position: absolute;\n    top: 15px;\n    left: 17px;\n    display: block;\n    transition: 0.2s;\n    font-size: 1rem;\n    color: ",";\n    user-select: none;\n  }\n\n  &:required,\n  :invalid {\n    box-shadow: none;\n  }\n\n  &:focus ~ label {\n    position: absolute;\n    top: 5px;\n    display: block;\n    transition: 0.2s;\n    font-size: 0.9rem;\n    font-weight: 700;\n  }\n\n  &:placeholder-shown ~ label {\n    font-size: 1rem;\n    cursor: text;\n    top: 15px;\n  }\n\n  &:not(placeholder-shown) ~ label {\n    position: absolute;\n    top: 5px;\n    display: block;\n    transition: 0.2s;\n    font-size: 0.9rem;\n    font-weight: 700;\n    cursor: text;\n  }\n\n  &:focus {\n    border-color: ",";\n    outline: none !important;\n  }\n\n  &::placeholder {\n    color: transparent;\n    user-select: none;\n  }\n\n  .bt-modal-complex-input-indications {\n    color: var(--input-placeholder-text);\n    font-size: 0.7rem;\n  }\n\n  ","\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:rs},function(e){var t;return null!==(t=e.roundness)&&void 0!==t?t:1},function(e){var t;return null!==(t=e.color)&&void 0!==t?t:rs},function(e){var t;return null!==(t=e.placeholderColor)&&void 0!==t?t:rs},function(e){var t;return null!==(t=e.focusBorderColor)&&void 0!==t?t:rs},function(e){var t,n;return e.valid?"\n        border-color: ".concat(null!==(t=e.invalidBorderColor)&&void 0!==t?t:rs," !important;\n      "):"\n    border-color: ".concat(null!==(n=e.borderColor)&&void 0!==n?n:rs," !important;\n  ")});const gs=function(e){var t=e.id,i=void 0===t?"modal":t,o=e.isOpen,a=(e.hasCloseBtn,e.onClose),s=e.children,l=u(),c=(0,r.useState)(o),f=c[0],d=c[1],p=(0,r.useRef)(null);return(0,r.useEffect)(function(){d(o)},[o]),(0,r.useEffect)(function(){var e=p.current;document.getElementById(i).focus(),e&&(f?e.showModal():e.close())},[f]),(0,n.jsx)(is,{id:i,ref:p,onKeyDown:function(e){"Escape"===e.key&&(a&&a(),d(!1))},bgColor:l.palette.background,borderColor:l.palette.secondary,roundness:l.roundness,children:(0,n.jsx)(os,{id:"bt-modal-contents",children:s})})};var vs=function(e){var t=e.title,r=e.htmlFor,i=e.hasClose,o=e.hasBack,a=e.handleClose,s=e.handleBack,l=u();return(0,n.jsxs)(as,{color:l.palette.text,hoverColor:l.palette.secondary,roundness:l.roundness,children:[o&&(0,n.jsx)(ls,{viewBox:"-2.4 -2.4 36 36",id:"back-modal",onClick:function(){s()},color:l.palette.text}),(0,n.jsx)("label",{htmlFor:r,children:t}),i&&(0,n.jsx)(ss,{viewBox:"0 0 20 20",id:"close-modal",onClick:function(){a()},color:l.palette.text})]})};vs.defaultProps={hasClose:!1,hasBack:!1,handleClose:function(){},handleBack:function(){}};var ms=sr(gs)(ys||(ys=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  width: fit-content;\n"],["\n  width: fit-content;\n"])));const bs=function(e){var t=e.onSubmit,i=e.isOpen,o=e.onClose,a=e.selectedEntry,s=u();(0,r.useEffect)(function(){},[i]);var l=function(e){e&&e.preventDefault(),o()};return(0,n.jsx)(ms,{id:"delete-modal",hasCloseBtn:!0,isOpen:i,onClose:o,children:(0,n.jsxs)("form",{onSubmit:function(e){e.preventDefault(),t()},onReset:l,children:[(0,n.jsx)(vs,{title:"Delete confirmation",htmlFor:"delete-modal",hasClose:!0,handleClose:function(){l(void 0)}}),(0,n.jsx)(cs,{color:s.palette.text,buttonColor:s.palette.primary,roundness:s.roundness,children:(0,n.jsx)("div",{children:(0,n.jsxs)("label",{children:[" Do you want to delete ",a.name," ?"]})})}),(0,n.jsxs)(us,{color:s.palette.text,buttonColor:s.palette.primary,roundness:s.roundness,children:[(0,n.jsx)("button",{type:"reset",id:"cancel-delete-selected",children:"Cancel"}),(0,n.jsx)(fs,{bgColor:s.palette.primary,type:"submit",id:"delete-selected-button",children:"Delete"})]})]})})};var ys,ws,_s,xs,ks=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},js="#666",Cs=sr.label(ws||(ws=ks(["\n  width: 100%;\n  display: block;\n  border: none;\n  font-size: large;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 10px;\n"],["\n  width: 100%;\n  display: block;\n  border: none;\n  font-size: large;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 10px;\n"]))),Ss=sr.div(_s||(_s=ks(["\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-evenly;\n"],["\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-evenly;\n"]))),zs=sr.div(xs||(xs=ks(["\n  float: left;\n  width: 30%;\n  border-radius: ","px;\n\n  & div {\n    border-radius: ","px;\n    cursor: pointer;\n    text-align: center;\n    margin: 3px;\n    padding: 5px;\n\n    & svg {\n      height: 90px;\n      width: 100%;\n    }\n  }\n\n  &:hover div {\n    background-color: ",";\n  }\n\n  & p {\n    margin: 3px !important;\n    color: ",';\n  }\n\n  & input[type="radio"] {\n    display: none;\n    z-index: 100;\n  }\n\n  input[type="radio"]:checked + div {\n    background-color: '," !important;\n  }\n"],["\n  float: left;\n  width: 30%;\n  border-radius: ","px;\n\n  & div {\n    border-radius: ","px;\n    cursor: pointer;\n    text-align: center;\n    margin: 3px;\n    padding: 5px;\n\n    & svg {\n      height: 90px;\n      width: 100%;\n    }\n  }\n\n  &:hover div {\n    background-color: ",";\n  }\n\n  & p {\n    margin: 3px !important;\n    color: ",';\n  }\n\n  & input[type="radio"] {\n    display: none;\n    z-index: 100;\n  }\n\n  input[type="radio"]:checked + div {\n    background-color: '," !important;\n  }\n"])),function(e){var t;return null!==(t=e.roundness)&&void 0!==t?t:1},function(e){var t;return null!==(t=e.roundness)&&void 0!==t?t:1},function(e){var t;return null!==(t=e.hoverColor)&&void 0!==t?t:js},function(e){var t;return null!==(t=e.color)&&void 0!==t?t:js},function(e){var t;return null!==(t=e.selectedColor)&&void 0!==t?t:js}),Es=function(){return Es=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},Es.apply(this,arguments)},Os={fileType:"plain",fileName:"",templateType:"empty"},As=function(e,t,n,r){this.value=e,this.id=t,this.icon=n,this.text=r};const Rs=function(e){var t=e.onSubmit,i=e.isOpen,o=e.onClose,a=e.fileList,s=e.location,l=u(),c=(0,r.useRef)(null),f=(0,r.useState)(Os),d=f[0],p=f[1],h=(0,r.useState)("empty"),g=h[0],v=h[1],m=(0,r.useState)("plain"),b=m[0],y=m[1],w=(0,r.useState)(!1),_=w[0],x=w[1],k=(0,r.useState)([]),j=k[0],S=k[1],z=(0,r.useState)([]),E=z[0],O=z[1],A=[new As("plain","plainType",(0,n.jsx)(C,{viewBox:"0 0 6.4 6.4",fill:l.palette.text}),"Plain File"),new As("actions","actionsType",(0,n.jsx)(ne,{viewBox:"0 0 20 20",fill:l.palette.text}),"Action")],R=[new As("empty","emptyTemplate",(0,n.jsx)(J,{viewBox:"0 0 20 20",stroke:l.palette.text}),"Empty"),new As("action","actionTemplate",(0,n.jsx)(C,{viewBox:"0 0 6.4 6.4",fill:l.palette.text}),"Action"),new As("io","ioTemplate",(0,n.jsx)(ne,{viewBox:"0 0 20 20",fill:l.palette.text}),"I/O")];(0,r.useEffect)(function(){i&&c.current&&setTimeout(function(){c.current.focus()},0),y("plain"),v("empty"),i&&(I(s,O),I("actions",S))},[i]),(0,r.useEffect)(function(){T(d.fileName)},[b]);var I=function(e,t){var n=a;if(e)for(var r=e.split("/"),i=function(e){n=n.find(function(t){return t.name===r[e]&&t.is_dir}).files},o=0;o<r.length;o++)i(o);console.log(n),t(n||[])},P=function(e){var t=e.target,n=t.name,r=t.value;p(function(e){var t;return Es(Es({},e),((t={})[n]=r,t))}),"fileName"===n&&T(r)},T=function(e){var t,n,r=!0;"actions"===b?(t=""!==e&&!e.includes(".")&&!e.includes("/"),n=j):(t=""!==e&&!e.includes("/"),n=E),t&&n?n.some(function(t){var n=t.name;return"actions"===b&&(n=n.replace(".py","")),n===e&&(r=!1,!0)}):r=!1,console.log(b,n),x(r)},B=function(e){e&&e.preventDefault(),o(),p(Os),x(!1)};return(0,n.jsx)(gs,{id:"new-action-modal",hasCloseBtn:!0,isOpen:i,onClose:B,children:(0,n.jsxs)("form",{onSubmit:function(e){e.preventDefault(),t(s,d),p(Os),x(!1)},onReset:B,children:[(0,n.jsx)(vs,{title:"Create new file",htmlFor:"fileName",hasClose:!0,handleClose:B}),(0,n.jsx)(ds,{children:(0,n.jsxs)(ps,{children:[(0,n.jsx)(hs,{ref:c,type:"text",id:"fileName",name:"fileName",onChange:P,autoComplete:"off",placeholder:"File Name",required:!0,color:l.palette.text,placeholderColor:l.palette.placeholderText,bgColor:l.palette.background,borderColor:l.palette.background,focusBorderColor:l.palette.background,invalidBorderColor:l.palette.background,roundness:l.roundness,valid:_||""===d.fileName}),(0,n.jsx)("label",{htmlFor:"fileName",children:"File Name"})]})}),(0,n.jsx)(Ps,{contentArray:A,title:"Select File Type",id:"types-list",name:"fileType",checkedVariable:b,checkedCallback:function(e){y(e.target.value),P(e)}}),"actions"===b&&(0,n.jsx)(Ts,{contentArray:R,title:"Select Template Type",id:"templates-list",name:"templateType",checkedVariable:g,checkedCallback:function(e){v(e.target.value),P(e)}}),(0,n.jsx)(cs,{color:l.palette.text,buttonColor:l.palette.primary,roundness:l.roundness,children:(0,n.jsx)(us,{color:l.palette.text,buttonColor:l.palette.primary,roundness:l.roundness,children:(0,n.jsx)("button",{type:"submit",id:"create-new-action",disabled:!_,children:"Create"})})})]})})};var Is,Ps=function(e){var t=e.contentArray,r=e.title,i=e.id,o=e.name,a=e.checkedVariable,s=e.checkedCallback,l=u();return(0,n.jsxs)(cs,{color:l.palette.text,buttonColor:l.palette.primary,roundness:l.roundness,id:i,children:[(0,n.jsx)(Cs,{htmlFor:"templateType",children:r}),(0,n.jsx)(Ss,{children:t.map(function(e){return(0,n.jsx)(Bs,{cardEntryProp:e,name:o,checkedVariable:a,checkedCallback:s})})})]})},Ts=sr(Ps)(Is||(Is=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  height: 170px;\n"],["\n  height: 170px;\n"]))),Bs=function(e){var t=e.cardEntryProp,r=e.name,i=e.checkedVariable,o=e.checkedCallback,a=u();return(0,n.jsxs)(zs,{hoverColor:a.palette.secondary,selectedColor:a.palette.selectedGradient,color:a.palette.text,roundness:a.roundness,children:[(0,n.jsx)("input",{type:"radio",name:r,value:t.value,id:t.id,checked:i===t.value,onChange:o}),(0,n.jsxs)("div",{id:"button-"+t.id,children:[t.icon,(0,n.jsxs)("p",{children:[" ",t.text," "]})]})]})},Ls=function(){return Ls=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},Ls.apply(this,arguments)},Fs={folderName:""};const Ns=function(e){var t=e.onSubmit,i=e.isOpen,o=e.onClose,a=e.fileList,s=e.location,l=u(),c=(0,r.useRef)(null),f=(0,r.useState)(Fs),d=f[0],p=f[1],h=(0,r.useState)(!1),g=h[0],v=h[1],m=(0,r.useState)([]),b=m[0],y=m[1];(0,r.useEffect)(function(){if(i&&c.current&&setTimeout(function(){c.current.focus()},0),i){var e=a;if(s)for(var t=s.split("/"),n=function(n){e=e.find(function(e){return e.name===t[n]&&e.is_dir}).files},r=0;r<t.length;r++)n(r);y(e||[])}},[i]);var w=function(e){e&&e.preventDefault(),o(),p(Fs),v(!1)};return(0,n.jsx)(gs,{id:"new-folder-modal",hasCloseBtn:!0,isOpen:i,onClose:o,children:(0,n.jsxs)("form",{onSubmit:function(e){e.preventDefault(),t(s,d.folderName),p(Fs),v(!1),o()},onReset:w,children:[(0,n.jsx)(vs,{title:"Create new folder",htmlFor:"folderName",hasClose:!0,handleClose:function(){w(null)}}),(0,n.jsx)(ds,{children:(0,n.jsxs)(ps,{children:[(0,n.jsx)(hs,{ref:c,type:"text",id:"folderName",name:"folderName",onChange:function(e){var t=e.target,n=t.name,r=t.value,i=!0;p(function(e){var t;return Ls(Ls({},e),((t={})[n]=r,t))}),"folderName"===n&&(""===r||r.includes(".")?i=!1:b.some(function(e){return e.name===r&&(i=!1,!0)}),v(i))},autoComplete:"off",placeholder:"Folder Name",required:!0,color:l.palette.text,placeholderColor:l.palette.placeholderText,bgColor:l.palette.background,borderColor:l.palette.background,focusBorderColor:l.palette.background,invalidBorderColor:l.palette.background,roundness:l.roundness,valid:g||""===d.folderName}),(0,n.jsx)("label",{htmlFor:"folderName",children:"Folder Name"})]})}),(0,n.jsx)(cs,{color:l.palette.text,buttonColor:l.palette.primary,roundness:l.roundness,children:(0,n.jsx)(us,{color:l.palette.text,buttonColor:l.palette.primary,roundness:l.roundness,children:(0,n.jsx)("button",{type:"submit",id:"create-new-action",disabled:!g,children:"Create"})})})]})})};var Ms=function(){return Ms=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},Ms.apply(this,arguments)},Ds={renameData:""};const Ws=function(e){var t=e.onSubmit,i=e.isOpen,o=e.onClose,a=e.fileList,s=e.selectedEntry,l=u(),c=(0,r.useRef)(null),f=(0,r.useState)(Ds),d=f[0],p=f[1],h=(0,r.useState)(!1),g=h[0],v=h[1],m=(0,r.useState)([]),b=m[0],y=m[1];(0,r.useEffect)(function(){if(i&&c.current&&setTimeout(function(){c.current.focus()},0),i){p(function(e){return Ms(Ms({},e),{renameData:s.name})});var e=document.getElementById("renameData");e&&(e.value=s.name);var t=s.path.split("/");if(1===t.length)return y(a);for(var n=a,r=function(e){n=n.find(function(n){return n.name===t[e]&&n.is_dir}).files},o=0;o<t.length-1;o++)r(o);y(n||[])}},[i]);var w=function(e){e&&e.preventDefault(),o(),p(Ds),v(!1)};return(0,n.jsx)(gs,{id:"new-folder-modal",hasCloseBtn:!0,isOpen:i,onClose:o,children:(0,n.jsxs)("form",{onSubmit:function(e){var n,r;e.preventDefault(),t((n=d.renameData,(r=s.path.split("/")).slice(0,r.length-1).join("/")+"/"+n)),p(Ds),v(!1),o()},onReset:w,children:[(0,n.jsx)(vs,{title:"Rename ".concat(s.is_dir?"Folder":"File"),htmlFor:"renameData",hasClose:!0,handleClose:function(){w(void 0)}}),(0,n.jsx)(ds,{children:(0,n.jsxs)(ps,{children:[(0,n.jsx)(hs,{ref:c,type:"text",id:"renameData",name:"renameData",onChange:function(e){var t=e.target,n=t.name,r=t.value,i=!0;p(function(e){var t;return Ms(Ms({},e),((t={})[n]=r,t))}),"renameData"===n&&((s.is_dir?""===r||r.includes("."):""===r)?i=!1:b.some(function(e){return e.name===r&&(i=!1,!0)}),v(i))},autoComplete:"off",placeholder:s.is_dir?"Rename Folder":"Rename File",required:!0,color:l.palette.text,placeholderColor:l.palette.placeholderText,bgColor:l.palette.background,borderColor:l.palette.background,focusBorderColor:l.palette.background,invalidBorderColor:l.palette.background,roundness:l.roundness,valid:g}),(0,n.jsxs)("label",{htmlFor:"renameData",children:["Rename ",s.is_dir?"Folder":"File"]})]})}),(0,n.jsx)(cs,{color:l.palette.text,buttonColor:l.palette.primary,roundness:l.roundness,children:(0,n.jsxs)(us,{color:l.palette.text,buttonColor:l.palette.primary,roundness:l.roundness,children:[(0,n.jsx)("button",{type:"reset",children:"Cancel"}),(0,n.jsx)("button",{type:"submit",id:"create-new-action",disabled:!g,children:"Create"})]})})]})})};var Us,$s="#666",Hs=sr.label(Us||(Us=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  position: relative;\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n  padding: 20px;\n  border-radius: ","px;\n  margin-bottom: 10px;\n  border: 2px dashed ",";\n  color: ",";\n  cursor: pointer;\n  transition:\n    background 0.2s ease-in-out,\n    border 0.2s ease-in-out;\n  &:hover {\n    background: ",";\n    border-color: ",";\n  }\n\n  & span {\n    color: ",";\n    font-size: 20px;\n    font-weight: bold;\n    text-align: center;\n    transition: color 0.2s ease-in-out;\n  }\n\n  & input {\n    width: 350px;\n    border: 2px solid ",";\n    color: ",";\n    font-size: medium;\n    background-color: ",";\n    border-radius: ","px;\n    padding: 5px;\n    font-size: medium;\n    outline: none;\n\n    &::file-selector-button {\n      margin-right: 20px;\n      border: none;\n      background: ",";\n      padding: 10px 20px;\n      border-radius: ","px;\n      color: ",";\n      cursor: pointer;\n      transition: background 0.2s ease-in-out;\n    }\n\n    &::file-selector-button:hover {\n      background: ",";\n    }\n  }\n\n  ","\n"],["\n  position: relative;\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n  padding: 20px;\n  border-radius: ","px;\n  margin-bottom: 10px;\n  border: 2px dashed ",";\n  color: ",";\n  cursor: pointer;\n  transition:\n    background 0.2s ease-in-out,\n    border 0.2s ease-in-out;\n  &:hover {\n    background: ",";\n    border-color: ",";\n  }\n\n  & span {\n    color: ",";\n    font-size: 20px;\n    font-weight: bold;\n    text-align: center;\n    transition: color 0.2s ease-in-out;\n  }\n\n  & input {\n    width: 350px;\n    border: 2px solid ",";\n    color: ",";\n    font-size: medium;\n    background-color: ",";\n    border-radius: ","px;\n    padding: 5px;\n    font-size: medium;\n    outline: none;\n\n    &::file-selector-button {\n      margin-right: 20px;\n      border: none;\n      background: ",";\n      padding: 10px 20px;\n      border-radius: ","px;\n      color: ",";\n      cursor: pointer;\n      transition: background 0.2s ease-in-out;\n    }\n\n    &::file-selector-button:hover {\n      background: ",";\n    }\n  }\n\n  ","\n"])),function(e){var t;return null!==(t=e.roundness)&&void 0!==t?t:1},function(e){var t;return null!==(t=e.borderColor)&&void 0!==t?t:$s},function(e){var t;return null!==(t=e.text)&&void 0!==t?t:$s},function(e){var t;return null!==(t=e.borderColor)&&void 0!==t?t:$s},function(e){var t;return null!==(t=e.hoverBorderColor)&&void 0!==t?t:$s},function(e){var t;return null!==(t=e.text)&&void 0!==t?t:$s},function(e){var t;return null!==(t=e.borderColor)&&void 0!==t?t:$s},function(e){var t;return null!==(t=e.text)&&void 0!==t?t:$s},function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:$s},function(e){var t;return null!==(t=e.roundness)&&void 0!==t?t:1},function(e){var t;return null!==(t=e.buttonColor)&&void 0!==t?t:$s},function(e){var t;return null!==(t=e.roundness)&&void 0!==t?t:1},function(e){var t;return null!==(t=e.text)&&void 0!==t?t:$s},function(e){var t;return null!==(t=e.hoverColor)&&void 0!==t?t:$s},function(e){var t,n;if(e.active)return"\n      background-color: ".concat(null!==(t=e.borderColor)&&void 0!==t?t:$s," !important;\n      border-color: ").concat(null!==(n=e.hoverBorderColor)&&void 0!==n?n:$s," !important;\n    ")}),Zs=function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}l((r=r.apply(e,t||[])).next())})},Gs=function(e,t){var n,r,i,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=s(0),a.throw=s(1),a.return=s(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};const Vs=function(e){var t=e.onSubmit,i=e.isOpen,o=e.onClose,a=(e.location,e.currentProject,u()),s=h().error,l=(0,r.useState)(""),c=l[0],f=l[1],d=(0,r.useState)(0),p=d[0],g=d[1],v=(0,r.useState)(!1),m=v[0],b=v[1],y=(0,r.useRef)(null),w=(0,r.useRef)(null);(0,r.useEffect)(function(){f(""),g(0),y.current.value=""},[i]);var _=function(e){return Zs(void 0,void 0,void 0,function(){return Gs(this,function(t){return e&&x(Array.from(e)),[2]})})},x=function(e){return Zs(void 0,void 0,void 0,function(){var t,n;return Gs(this,function(r){return t=e.length,n=0,e.forEach(function(e,r){var i=new FileReader;i.onprogress=function(e){if(e.lengthComputable){var r=Math.round(e.loaded/e.total*100);g(r*(n/t))}},i.onload=function(e){e.target.result.split(",")[1];try{console.log("Uploading file Completed")}catch(e){e instanceof Error&&(console.error("Error uploading file"+e.message),s("Error uploading file"+e.message))}f("Uploaded"),g(n/t*100)},i.readAsDataURL(e),n++}),o(),[2]})})},k=function(e){e&&e.preventDefault(),o()};return(0,n.jsx)(gs,{id:"upload-modal",hasCloseBtn:!0,isOpen:i,onClose:o,children:(0,n.jsxs)("form",{onSubmit:function(e){e.preventDefault(),t()},onReset:k,children:[(0,n.jsx)(vs,{title:"Upload",htmlFor:"uploadName",hasClose:!0,handleClose:function(e){k(e)}}),(0,n.jsx)(cs,{color:a.palette.text,buttonColor:a.palette.primary,roundness:a.roundness,children:(0,n.jsxs)(Hs,{ref:w,htmlFor:"uploadDropInput",onDragOver:function(e){e.preventDefault()},onDragEnter:function(){return b(!0)},onDragLeave:function(){return b(!1)},onDrop:function(e){return(t=e).preventDefault(),w.current.classList.remove("bt-drag-active"),void(t.dataTransfer.files.length>0&&(y.current.files=t.dataTransfer.files,_(y.current.files)));var t},text:a.palette.text,bgColor:a.palette.background,buttonColor:a.palette.primary,hoverColor:a.palette.secondary,borderColor:a.palette.primary,hoverBorderColor:a.palette.background,roundness:a.roundness,active:m,children:[(0,n.jsx)("span",{children:"Drop files here"}),"or",(0,n.jsx)("input",{ref:y,id:"uploadDropInput",onChange:function(e){return _(e.target.files)},type:"file",title:"Upload folder contents",multiple:!0,required:!0})]})}),""!==c&&(0,n.jsx)(nl,{completed:p})]})})};var qs,Ks,Ys,Xs=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},Js=sr.div(qs||(qs=Xs(["\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  gap: 5px;\n"],["\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  gap: 5px;\n"]))),Qs=sr.div(Ks||(Ks=Xs(["\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  gap: 5px;\n  border-left: 1px solid ",";\n"],["\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  gap: 5px;\n  border-left: 1px solid ",";\n"])),function(e){var t;return null!==(t=e.color)&&void 0!==t?t:"#666"}),el="#666",tl=sr.div(Ys||(Ys=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}(["\n  height: 20px;\n  background-color: ",";\n  border-radius: ","px;\n\n  & div {\n    height: 100%;\n    width: ","%;\n    background-color: ",";\n    border-radius: inherit;\n    text-align: right;\n    & span {\n      padding: 5px;\n      color: ",";\n      font-weight: bold;\n    }\n  }\n"],["\n  height: 20px;\n  background-color: ",";\n  border-radius: ","px;\n\n  & div {\n    height: 100%;\n    width: ","%;\n    background-color: ",";\n    border-radius: inherit;\n    text-align: right;\n    & span {\n      padding: 5px;\n      color: ",";\n      font-weight: bold;\n    }\n  }\n"])),function(e){var t;return null!==(t=e.bgColor)&&void 0!==t?t:el},function(e){var t;return null!==(t=e.roundness)&&void 0!==t?t:50},function(e){var t;return null!==(t=e.progress)&&void 0!==t?t:0},function(e){var t;return null!==(t=e.color)&&void 0!==t?t:el},function(e){var t;return null!==(t=e.text)&&void 0!==t?t:el});const nl=function(e){var t=e.completed,r=u();return(0,n.jsx)(tl,{text:r.palette.text,color:r.palette.progressBar.color,bgColor:r.palette.progressBar.background,progress:t,children:(0,n.jsx)("div",{children:(0,n.jsx)("span",{children:"".concat(t.toFixed(2),"%")})})})},rl=function(e){var t,i,o,a,s,l=e.commsManager,c=e.resetManager,f=e.project,d=e.explorers,p=e.editorApi,h=e.extraEditors,g=e.viewers,v=e.layout,m=e.options,b=e.splashIcon,y=(0,r.useState)(void 0),w=y[0],_=y[1],x=u();return void 0===b&&(b=(0,n.jsx)(wr,{color:x.palette.primary,viewBox:"0 0 200 200"})),(0,n.jsxs)(vr,{id:"styled-ide-container",bgColor:null===(t=x.palette)||void 0===t?void 0:t.primary,children:[(0,n.jsxs)(jo,{baseWidth:[20,40,40],maxWidth:[40,60,60],showExplorer:d.length>0,layout:v,splashIcon:b,children:[d.length>0&&(0,n.jsx)(ko,{children:d.map(function(e){return(0,n.jsx)(Fi,{setCurrentFile:_,currentFile:w,project:f,api:e})})}),(0,n.jsx)(mr,{bgColor:null===(i=x.palette)||void 0===i?void 0:i.primary,children:(0,n.jsx)(br,{bgColor:null===(o=x.palette)||void 0===o?void 0:o.background,children:(0,n.jsx)(Ha,{currentFile:w,changeCurrentFile:_,currentProjectname:f,autosave:!0,manager:l,api:p,extraEditors:h,splashIcon:b})})}),(0,n.jsx)(mr,{bgColor:null===(a=x.palette)||void 0===a?void 0:a.primary,children:(0,n.jsx)(br,{bgColor:null===(s=x.palette)||void 0===s?void 0:s.background,children:(0,n.jsx)(jr,{viewers:g,splashIcon:b,options:m})})})]}),(0,n.jsx)(Wr,{project:f,commsManager:l,resetManager:c})]})}})(),o})());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,