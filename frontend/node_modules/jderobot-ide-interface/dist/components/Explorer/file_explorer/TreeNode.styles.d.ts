export declare const StyledSidebarEntryContainer: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export declare const StyledSidebarEntry: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
interface StyledExplorerItemContainerProps {
    bgColor?: string;
    hoverColor?: string;
    active?: boolean;
}
export declare const StyledExplorerItemContainer: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledExplorerItemContainerProps>> & string;
interface StyledExplorerItemProps {
    color?: string;
    depth: number;
}
export declare const StyledExplorerItem: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledExplorerItemProps>> & string;
interface StyledActionIconProps {
    color?: string;
}
export declare const StyledActionIcon: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("react").SVGProps<SVGSVGElement> & {
    title?: string;
}, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void) | import("react").RefObject<SVGSVGElement> | null | undefined;
}, StyledActionIconProps>> & string & Omit<import("react").FunctionComponent<import("react").SVGProps<SVGSVGElement> & {
    title?: string;
}>, keyof import("react").Component<any, {}, any>>;
interface StyledExplorerAccentProps {
    color?: string;
}
export declare const StyledExplorerAccent: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("react").SVGProps<SVGSVGElement> & {
    title?: string;
}, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void) | import("react").RefObject<SVGSVGElement> | null | undefined;
}, StyledExplorerAccentProps>> & string & Omit<import("react").FunctionComponent<import("react").SVGProps<SVGSVGElement> & {
    title?: string;
}>, keyof import("react").Component<any, {}, any>>;
export {};
