interface StyledIdeHorizContainerProps {
    bgColor?: string;
}
export declare const StyledIdeHorizContainer: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledIdeHorizContainerProps>> & string;
interface StyledIdeVertContainerProps {
    bgColor?: string;
}
export declare const StyledIdeVertContainer: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledIdeVertContainerProps>> & string;
interface StyledIdeContainerProps {
    bgColor?: string;
}
export declare const StyledIdeContainer: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledIdeContainerProps>> & string;
interface StyledViewerMenuProps {
    bgColor?: string;
}
export declare const StyledViewerMenu: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledViewerMenuProps>> & string;
interface StyledSplashIcon {
    color?: string;
}
export declare const StyledMonocolorSplashIcon: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("react").SVGProps<SVGSVGElement> & {
    title?: string;
}, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void) | import("react").RefObject<SVGSVGElement> | null | undefined;
}, StyledSplashIcon>> & string & Omit<import("react").FunctionComponent<import("react").SVGProps<SVGSVGElement> & {
    title?: string;
}>, keyof import("react").Component<any, {}, any>>;
export declare const StyledSplashIcon: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("react").SVGProps<SVGSVGElement> & {
    title?: string;
}, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void) | import("react").RefObject<SVGSVGElement> | null | undefined;
}, StyledSplashIcon>> & string & Omit<import("react").FunctionComponent<import("react").SVGProps<SVGSVGElement> & {
    title?: string;
}>, keyof import("react").Component<any, {}, any>>;
export {};
