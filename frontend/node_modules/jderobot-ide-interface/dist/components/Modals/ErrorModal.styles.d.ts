import { ErrorVariant } from "./ErrorModal";
interface StyledModalErrorRowProps {
    roundness?: number;
    variant: ErrorVariant;
    errorButtonColor?: string;
    errorHoverColor?: string;
    errorTextColor?: string;
    infoButtonColor?: string;
    infoHoverColor?: string;
    infoTextColor?: string;
    warningButtonColor?: string;
    warningHoverColor?: string;
    warningTextColor?: string;
}
export declare const StyledModalErrorRow: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledModalErrorRowProps>> & string;
interface StyledModalErrorProps {
    variant: ErrorVariant;
    error?: string;
    errorBorder?: string;
    info?: string;
    infoBorder?: string;
    warning?: string;
    warningBorder?: string;
}
export declare const StyledModalError: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<{
    id: string;
    isOpen: boolean;
    hasCloseBtn: boolean;
    onClose: Function;
    children: any;
}, StyledModalErrorProps>> & string & Omit<({ id, isOpen, hasCloseBtn, onClose, children, }: {
    id: string;
    isOpen: boolean;
    hasCloseBtn: boolean;
    onClose: Function;
    children: any;
}) => JSX.Element, keyof import("react").Component<any, {}, any>>;
interface StyledModalErrorTitlebarProps {
    variant: ErrorVariant;
    color?: string;
    darkColor?: string;
}
export declare const StyledModalErrorTitlebar: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<{
    title: string;
    htmlFor: string;
    hasClose: boolean;
    hasBack: boolean;
    handleClose: Function;
    handleBack: Function;
}, StyledModalErrorTitlebarProps>> & string & Omit<{
    ({ title, htmlFor, hasClose, hasBack, handleClose, handleBack, }: {
        title: string;
        htmlFor: string;
        hasClose: boolean;
        hasBack: boolean;
        handleClose: Function;
        handleBack: Function;
    }): JSX.Element;
    defaultProps: {
        hasClose: boolean;
        hasBack: boolean;
        handleClose: () => void;
        handleBack: () => void;
    };
}, keyof import("react").Component<any, {}, any>>;
export {};
