import { ReactNode } from "react";
import { ModelRowTypes } from "Types";
declare const Modal: ({ id, isOpen, onClose, children, onSubmit, onReset, }: {
    id: string;
    isOpen: boolean;
    onClose: Function;
    children: any;
    onSubmit?: (event: any) => void;
    onReset?: (event: any) => void;
}) => JSX.Element;
export default Modal;
export declare const ModalTitlebar: {
    ({ title, htmlFor, hasClose, hasBack, handleClose, handleBack, }: {
        title: string;
        htmlFor: string;
        hasClose: boolean;
        hasBack: boolean;
        handleClose: Function;
        handleBack: Function;
    }): JSX.Element;
    defaultProps: {
        hasClose: boolean;
        hasBack: boolean;
        handleClose: () => void;
        handleBack: () => void;
    };
};
export declare const ModalRow: {
    ({ type, id, children, }: {
        type: ModelRowTypes;
        id?: string;
        children?: ReactNode;
    }): JSX.Element;
    defaultProps: {
        type: string;
    };
};
interface ModalInputBoxProps extends React.InputHTMLAttributes<HTMLInputElement> {
    ref: React.RefObject<HTMLInputElement>;
    id: string;
    description?: string;
    placeholder: string;
    onChange: (event: any) => void;
    isInputValid: boolean;
}
export declare const ModalInputBox: ({ ref, id, placeholder, onChange, isInputValid, description, ...props }: ModalInputBoxProps) => JSX.Element;
export declare const ModalEditableList: ({ list, onSelect, onDelete, }: {
    list: string[];
    onSelect: (event: any, entry: string) => void;
    onDelete: (event: any, entry: string) => void;
}) => JSX.Element;
interface ModalInputDropdownProps extends ModalInputBoxProps {
    entries?: string[];
}
export declare const ModalInputDropdown: ({ ref, id, placeholder, onChange, isInputValid, description, entries, ...props }: ModalInputDropdownProps) => JSX.Element;
