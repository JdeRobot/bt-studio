interface StyledModalProps {
    bgColor?: string;
    borderColor?: string;
    roundness?: number;
}
export declare const StyledModal: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>, StyledModalProps>> & string;
export declare const StyledModalContent: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
interface StyledModalTitlebarProps {
    color?: string;
    hoverColor?: string;
    roundness?: number;
}
export declare const StyledModalTitlebar: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledModalTitlebarProps>> & string;
interface StyledModalButtonProps {
    color?: string;
}
export declare const StyledModalCloseButton: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("react").SVGProps<SVGSVGElement> & {
    title?: string;
}, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void) | import("react").RefObject<SVGSVGElement> | null | undefined;
}, StyledModalButtonProps>> & string & Omit<import("react").FunctionComponent<import("react").SVGProps<SVGSVGElement> & {
    title?: string;
}>, keyof import("react").Component<any, {}, any>>;
export declare const StyledModalBackButton: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("react").SVGProps<SVGSVGElement> & {
    title?: string;
}, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void) | import("react").RefObject<SVGSVGElement> | null | undefined;
}, StyledModalButtonProps>> & string & Omit<import("react").FunctionComponent<import("react").SVGProps<SVGSVGElement> & {
    title?: string;
}>, keyof import("react").Component<any, {}, any>>;
export declare const StyledModalDeleteButton: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("react").SVGProps<SVGSVGElement> & {
    title?: string;
}, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void) | import("react").RefObject<SVGSVGElement> | null | undefined;
}, StyledModalButtonProps>> & string & Omit<import("react").FunctionComponent<import("react").SVGProps<SVGSVGElement> & {
    title?: string;
}>, keyof import("react").Component<any, {}, any>>;
interface StyledModalRowProps {
    color?: string;
    buttonColor?: string;
    roundness?: number;
}
export declare const StyledModalRow: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledModalRowProps>> & string;
export declare const StyledModalRowDataText: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
interface StyledModalRowDataTextTitleProps {
    color?: string;
    buttonColor?: string;
    roundness?: number;
}
export declare const StyledModalRowDataTextTitle: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, StyledModalRowDataTextTitleProps>> & string;
export declare const StyledModalRowDataTextEntries: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
interface StyledModalButtonRowProps {
    color?: string;
    buttonColor?: string;
    roundness?: number;
}
export declare const StyledModalButtonRow: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledModalButtonRowProps>> & string;
interface StyledModalImageRowProps {
    color?: string;
    roundness?: number;
}
export declare const StyledModalImageRow: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledModalImageRowProps>> & string;
interface StyledModalButtonDeleteProps {
    bgColor?: string;
}
export declare const StyledModalButtonDelete: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, StyledModalButtonDeleteProps>> & string;
export declare const StyledModalInputRowContainer: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
interface StyledModalInputProps {
    color?: string;
    placeholderColor?: string;
    bgColor?: string;
    borderColor?: string;
    focusBorderColor?: string;
    invalidBorderColor?: string;
    roundness?: number;
    valid?: boolean;
}
export declare const StyledModalInput: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledModalInputProps>> & string;
interface StyledModalEditableListProps {
    scrollBarColor?: string;
    roundness?: number;
}
export declare const StyledModalEditableList: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLUListElement>, HTMLUListElement>, StyledModalEditableListProps>> & string;
interface StyledModalEntryListProps {
    color?: string;
    entryColor?: string;
    hoverColor?: string;
    deleteColor?: string;
    roundness?: number;
}
export declare const StyledModalEntryList: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledModalEntryListProps>> & string;
export declare const StyledModalActionEntry: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<Omit<import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, keyof StyledModalEntryListProps> & StyledModalEntryListProps, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, never>> & string;
interface StyledModelDropAreaProps {
    text?: string;
    bgColor?: string;
    hoverColor?: string;
    buttonColor?: string;
    borderColor?: string;
    hoverBorderColor?: string;
    roundness?: number;
    active?: boolean;
}
export declare const StyledModalDropArea: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, StyledModelDropAreaProps>> & string;
export declare const StyledModalInputSelectorTitle: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, never>> & string;
export declare const StyledModalInputSelector: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
interface StyledModalSelectIconProps {
    hoverColor?: string;
    selectedColor?: string;
    color?: string;
    roundness?: number;
    icon: "fill" | "stroke";
    active?: boolean;
}
export declare const StyledModalSelectIcon: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledModalSelectIconProps>> & string;
export {};
