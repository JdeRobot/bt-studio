{"version":3,"file":"LayerModel.js","sourceRoot":"","sources":["../../../src/entities/layer/LayerModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseModel, BaseModelGenerics, BaseModelOptions } from '../../core-models/BaseModel';\nimport { CanvasModel } from '../canvas/CanvasModel';\nimport * as _ from 'lodash';\nimport { CanvasEngine } from '../../CanvasEngine';\nimport { FactoryBank } from '../../core/FactoryBank';\nimport { AbstractModelFactory } from '../../core/AbstractModelFactory';\nimport { DeserializeEvent } from '../../core-models/BaseEntity';\n\nexport interface LayerModelOptions extends BaseModelOptions {\n\tisSvg?: boolean;\n\ttransformed?: boolean;\n}\n\nexport interface LayerModelGenerics extends BaseModelGenerics {\n\tOPTIONS: LayerModelOptions;\n\tPARENT: CanvasModel;\n\tCHILDREN: BaseModel;\n\tENGINE: CanvasEngine;\n}\n\nexport abstract class LayerModel<G extends LayerModelGenerics = LayerModelGenerics> extends BaseModel<G> {\n\tprotected models: { [id: string]: G['CHILDREN'] };\n\tprotected repaintEnabled: boolean;\n\n\tconstructor(options: G['OPTIONS'] = {}) {\n\t\tsuper(options);\n\t\tthis.models = {};\n\t\tthis.repaintEnabled = true;\n\t}\n\n\t/**\n\t * This is used for deserialization\n\t */\n\tabstract getChildModelFactoryBank(engine: G['ENGINE']): FactoryBank<AbstractModelFactory<BaseModel>>;\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.isSvg = !!event.data.isSvg;\n\t\tthis.options.transformed = !!event.data.transformed;\n\t\t_.forEach(event.data.models, (model) => {\n\t\t\tconst modelOb = this.getChildModelFactoryBank(event.engine).getFactory(model.type).generateModel({\n\t\t\t\tinitialConfig: model\n\t\t\t});\n\t\t\tmodelOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: model\n\t\t\t});\n\t\t\tthis.addModel(modelOb);\n\t\t});\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tisSvg: this.options.isSvg,\n\t\t\ttransformed: this.options.transformed,\n\t\t\tmodels: _.mapValues(this.models, (model) => {\n\t\t\t\treturn model.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tisRepaintEnabled() {\n\t\treturn this.repaintEnabled;\n\t}\n\n\tallowRepaint(allow: boolean = true) {\n\t\tthis.repaintEnabled = allow;\n\t}\n\n\tremove() {\n\t\tif (this.parent) {\n\t\t\tthis.parent.removeLayer(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\taddModel(model: G['CHILDREN']) {\n\t\tmodel.setParent(this);\n\t\tthis.models[model.getID()] = model;\n\t}\n\n\tgetSelectionEntities(): Array<BaseModel> {\n\t\treturn _.flatMap(this.models, (model) => {\n\t\t\treturn model.getSelectionEntities();\n\t\t});\n\t}\n\n\tgetModels() {\n\t\treturn this.models;\n\t}\n\n\tgetModel(id: string) {\n\t\treturn this.models[id];\n\t}\n\n\tremoveModel(id: string | G['CHILDREN']): boolean {\n\t\tconst _id = typeof id === 'string' ? id : id.getID();\n\t\tif (this.models[_id]) {\n\t\t\tdelete this.models[_id];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n"]}