{"version":3,"file":"toolkit.js","sourceRoot":"","sources":["../src/toolkit.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,QAAQ,MAAM,gBAAgB,CAAC;AAEtC,OAAO,EAAU,YAAY,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAEnE,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,MAAe,EAAU,EAAE;IAChE,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACxB,OAAO,iBAAiB,EAAE,CAAC;KAC3B;IAED,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAEvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACvC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE;YACvB,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACnB;QACD,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE;YACvB,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACnB;QACD,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE;YACvB,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACnB;QACD,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE;YACvB,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACnB;KACD;IAED,OAAO;QACN,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,IAAI,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;QAC9C,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,IAAI,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;QAC/C,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE,IAAI,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;QAClD,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,IAAI,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;KACjD,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,QAAmB,EAAU,EAAE;IACtE,OAAO,qBAAqB,CAC3B,QAAQ,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,EAAE;QAC9B,OAAO,OAAO,CAAC,SAAS,EAAE,CAAC;IAC5B,CAAC,CAAC,CACF,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { Point } from './Point';\nimport _flatMap from 'lodash/flatMap';\nimport { Polygon } from './Polygon';\nimport { Bounds, BoundsCorner, createEmptyBounds } from './Bounds';\n\nexport const boundingBoxFromPoints = (points: Point[]): Bounds => {\n\tif (points.length === 0) {\n\t\treturn createEmptyBounds();\n\t}\n\n\tlet minX = points[0].x;\n\tlet maxX = points[0].x;\n\tlet minY = points[0].y;\n\tlet maxY = points[0].y;\n\n\tfor (let i = 1; i < points.length; i++) {\n\t\tif (points[i].x < minX) {\n\t\t\tminX = points[i].x;\n\t\t}\n\t\tif (points[i].x > maxX) {\n\t\t\tmaxX = points[i].x;\n\t\t}\n\t\tif (points[i].y < minY) {\n\t\t\tminY = points[i].y;\n\t\t}\n\t\tif (points[i].y > maxY) {\n\t\t\tmaxY = points[i].y;\n\t\t}\n\t}\n\n\treturn {\n\t\t[BoundsCorner.TOP_LEFT]: new Point(minX, minY),\n\t\t[BoundsCorner.TOP_RIGHT]: new Point(maxX, minY),\n\t\t[BoundsCorner.BOTTOM_RIGHT]: new Point(maxX, maxY),\n\t\t[BoundsCorner.BOTTOM_LEFT]: new Point(minX, maxY)\n\t};\n};\n\nexport const boundingBoxFromPolygons = (polygons: Polygon[]): Bounds => {\n\treturn boundingBoxFromPoints(\n\t\t_flatMap(polygons, (polygon) => {\n\t\t\treturn polygon.getPoints();\n\t\t})\n\t);\n};\n"]}