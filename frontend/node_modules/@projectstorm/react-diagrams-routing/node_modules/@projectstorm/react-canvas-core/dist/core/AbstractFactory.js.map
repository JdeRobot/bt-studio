{"version":3,"file":"AbstractFactory.js","sourceRoot":"","sources":["../../src/core/AbstractFactory.ts"],"names":[],"mappings":"AAGA;;;GAGG;AACH,MAAM,OAAgB,eAAe;IAWpC,YAAY,IAAY;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,CAAC;IAED,gBAAgB,CAAC,MAAS;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACtB,CAAC;IAED,cAAc,CAAC,IAAiB;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,CAAC;IAED,OAAO;QACN,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;CACD","sourcesContent":["import { CanvasEngine } from '../CanvasEngine';\nimport { FactoryBank } from './FactoryBank';\n\n/**\n * Base factory for all the different types of entities.\n * Gets registered with the engine, and is used to generate models\n */\nexport abstract class AbstractFactory<E extends CanvasEngine = CanvasEngine> {\n\t/**\n\t * Couples the factory with the models it generates\n\t */\n\tprotected type: string;\n\t/**\n\t * The engine gets injected when the factory is registered\n\t */\n\tprotected engine: E;\n\tprotected bank: FactoryBank;\n\n\tconstructor(type: string) {\n\t\tthis.type = type;\n\t}\n\n\tsetDiagramEngine(engine: E) {\n\t\tthis.engine = engine;\n\t}\n\n\tsetFactoryBank(bank: FactoryBank) {\n\t\tthis.bank = bank;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n}\n"]}